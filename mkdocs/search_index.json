{
    "docs": [
        {
            "location": "/",
            "text": "WSO2 Siddhi\n\u00b6\n\n\nSiddhi is a java library that listens to events from data streams, detect complex conditions described via a \nStreaming\n SQL language\n, and trigger actions. It can be used to do both \nStream Processing\n and \n \nComplex Event Processing\n.  \n\n\nOverview\n\u00b6\n\n\n\n\n\n\nIt can be used for;\n\n\n\n\nData preprocessing\n\n\nGenerate alerts based on thresholds\n\n\nCalculate aggregations over a short window or a long time period\n\n\nJoining multiple data streams\n\n\nData correlation while finding missing and erroneous events\n\n\nInteract streaming data with databases\n\n\nDetecting temporal event patterns\n\n\nTracking (something over space or time)\n\n\nTrend analysis (rise, fall, turn, tipple bottom)\n\n\nReal-time predictions with existing and online machine learning models\n\n\nAnd many more ... \n\u201cPatterns of Streaming Realtime Analytics\u201d\n\n\n\n\nSiddhi is free and open source, under \nApache Software License v2.0\n.\n\n\nGet Started!\n\u00b6\n\n\nGet started with Siddhi in few minutes by following \nSiddhi Quick Start Guide\n\n\nWhy use Siddhi ?\n\u00b6\n\n\n\n\nFast, that \nUBER\n \nuse it to process 20 Billion events per day (300,000 events per second). \n\n\nLightweight (<2MB), embeddable in Android and RaspberryPi\n\n\nHas 40+ \nSiddhi Extensions\n\n\n60+ companies including many Fortune 500 companies use Siddhi in production, following are some; \n\n\nWSO2 use Siddhi in their products such as \nWSO2 Data Analytics Server\n \n   and \nWSO2 Stream Processor\n to provide stream processing capabilities. \n   Uses it as the \nedge analytics\n library of \nWSO2 IoT Server\n, \n   core of \nWSO2 API Manager\n's throttling, and core of \n   \nWSO2 products'\n analytics.\n\n\nUBER\n for fraud analytics\n\n\nApache Eagle\n use Siddhi as a policy engine\n\n\n\n\n\n\nSolutions based on Siddhi has been a finalist at \nACM DEBS Grand Challenge Stream Processing competitions in 2014, 2015, 2016, 2017\n.\n\n\nBeen basis of many academic research projects and have \n60+ citations\n. \n\n\n\n\nIf you also use Siddhi, we would love to hear more. \n\n\nTry Siddhi with \nWSO2 Stream Processor\n\u00b6\n\n\nWSO2 Stream Processor\n is a server version of Siddhi that's also released under \n \nApache Software License v2.0\n. It was a Strong Performer in \nThe Forrester Wave\u2122: Big Data Streaming Analytics, Q1 2016\n \n (\nReport\n) \nand a \nCool Vendors in Internet of Things Analytics, 2016\n. \n\n\nTo get following capabilities by using \nWSO2 Stream Processor\n :  \n\n\n\n\nSiddhi Query Editor\n \n\n\nSiddhi Debugger\n\n\nEvent Simulator\n \n\n\nRun Siddhi as a Server with High Availability and Scalability\n\n\nMonitoring support for Siddhi\n\n\nRealtime dashboard \n\n\nBusiness user friendly query generation and deployment\n\n\n\n\nThere are domain specific solutions built using Siddhi, including \nFraud Detection, Stock Market Surveillance, Location analytics, Proximity Marketing, Contextual Recommendation, Ad Optimization, Operational Analytics, and Detecting Chart Patterns\n. \n\n\nIf you want more information please contact us via \nhttp://wso2.com/support/\n.\n\n\nSiddhi Versions\n\u00b6\n\n\nFind the released Siddhi libraries from \nhere\n.\n\n\n \n\n\n\n\n\n\nActive development version of Siddhi\n : \nv4.0.0\n  \nbuilt on Java 8.\n \n\n\nSiddhi Query Guide\n for Siddhi v4.x.x\n\n\n\n\n\n\nLatest Stable Release of Siddhi\n : \nv3.0.5\n \nbuilt on Java 7.\n\n\nSiddhi Query Guide\n for Siddhi v3.x.x\n\n\n\n\n\n\nLatest API Docs\n\u00b6\n\n\nLatest API Docs is \n4.0.0-M85\n.\n\n\nJenkins Build Status\n\u00b6\n\n\n\n\n\n\n\n\nSiddhi Branch\n\n\nJenkins Build Status\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\n\n\n\n\n\n\n\n\nHow to Contribute\n\u00b6\n\n\n\n\nPlease report issues at \nGitHub Issue Tracker\n.\n\n\nFeel fee to play with the \nSiddhi source code\n and send your contributions as pull requests to \nmaster branch\n. \n\n\n\n\nContact us\n\u00b6\n\n\n\n\nPost your questions with the \n\"Siddhi\"\n tag in \nStackoverflow\n. \n\n\nFor more details and support contact us via \nhttp://wso2.com/support/\n\n\n\n\nSupport\n\u00b6\n\n\n\n\nWe are committed to ensuring support for Siddhi (with it's \nextensions\n) and \nWSO2 Stream Processor\n from development to production. \n\n\nOur unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology. \n\n\nFor more details and to take advantage of this unique opportunity contact us via \nhttp://wso2.com/support/\n. \n\n\n\n\nSiddhi was joint research project initiated by WSO2 and University of Moratuwa, Sri Lanka.",
            "title": "Welcome to WSO2 Siddhi"
        },
        {
            "location": "/#wso2-siddhi",
            "text": "Siddhi is a java library that listens to events from data streams, detect complex conditions described via a  Streaming\n SQL language , and trigger actions. It can be used to do both  Stream Processing  and \n  Complex Event Processing .",
            "title": "WSO2 Siddhi"
        },
        {
            "location": "/#overview",
            "text": "It can be used for;   Data preprocessing  Generate alerts based on thresholds  Calculate aggregations over a short window or a long time period  Joining multiple data streams  Data correlation while finding missing and erroneous events  Interact streaming data with databases  Detecting temporal event patterns  Tracking (something over space or time)  Trend analysis (rise, fall, turn, tipple bottom)  Real-time predictions with existing and online machine learning models  And many more ...  \u201cPatterns of Streaming Realtime Analytics\u201d   Siddhi is free and open source, under  Apache Software License v2.0 .",
            "title": "Overview"
        },
        {
            "location": "/#get-started",
            "text": "Get started with Siddhi in few minutes by following  Siddhi Quick Start Guide",
            "title": "Get Started!"
        },
        {
            "location": "/#why-use-siddhi",
            "text": "Fast, that  UBER  \nuse it to process 20 Billion events per day (300,000 events per second).   Lightweight (<2MB), embeddable in Android and RaspberryPi  Has 40+  Siddhi Extensions  60+ companies including many Fortune 500 companies use Siddhi in production, following are some;   WSO2 use Siddhi in their products such as  WSO2 Data Analytics Server  \n   and  WSO2 Stream Processor  to provide stream processing capabilities. \n   Uses it as the  edge analytics  library of  WSO2 IoT Server , \n   core of  WSO2 API Manager 's throttling, and core of \n    WSO2 products'  analytics.  UBER  for fraud analytics  Apache Eagle  use Siddhi as a policy engine    Solutions based on Siddhi has been a finalist at  ACM DEBS Grand Challenge Stream Processing competitions in 2014, 2015, 2016, 2017 .  Been basis of many academic research projects and have  60+ citations .    If you also use Siddhi, we would love to hear more.",
            "title": "Why use Siddhi ?"
        },
        {
            "location": "/#try-siddhi-with-wso2-stream-processor",
            "text": "WSO2 Stream Processor  is a server version of Siddhi that's also released under \n  Apache Software License v2.0 . It was a Strong Performer in  The Forrester Wave\u2122: Big Data Streaming Analytics, Q1 2016  \n ( Report ) \nand a  Cool Vendors in Internet of Things Analytics, 2016 .   To get following capabilities by using  WSO2 Stream Processor  :     Siddhi Query Editor    Siddhi Debugger  Event Simulator    Run Siddhi as a Server with High Availability and Scalability  Monitoring support for Siddhi  Realtime dashboard   Business user friendly query generation and deployment   There are domain specific solutions built using Siddhi, including  Fraud Detection, Stock Market Surveillance, Location analytics, Proximity Marketing, Contextual Recommendation, Ad Optimization, Operational Analytics, and Detecting Chart Patterns .   If you want more information please contact us via  http://wso2.com/support/ .",
            "title": "Try Siddhi with WSO2 Stream Processor"
        },
        {
            "location": "/#siddhi-versions",
            "text": "Find the released Siddhi libraries from  here .       Active development version of Siddhi  :  v4.0.0    built on Java 8.    Siddhi Query Guide  for Siddhi v4.x.x    Latest Stable Release of Siddhi  :  v3.0.5   built on Java 7.  Siddhi Query Guide  for Siddhi v3.x.x",
            "title": "Siddhi Versions"
        },
        {
            "location": "/#latest-api-docs",
            "text": "Latest API Docs is  4.0.0-M85 .",
            "title": "Latest API Docs"
        },
        {
            "location": "/#jenkins-build-status",
            "text": "Siddhi Branch  Jenkins Build Status      master",
            "title": "Jenkins Build Status"
        },
        {
            "location": "/#how-to-contribute",
            "text": "Please report issues at  GitHub Issue Tracker .  Feel fee to play with the  Siddhi source code  and send your contributions as pull requests to  master branch .",
            "title": "How to Contribute"
        },
        {
            "location": "/#contact-us",
            "text": "Post your questions with the  \"Siddhi\"  tag in  Stackoverflow .   For more details and support contact us via  http://wso2.com/support/",
            "title": "Contact us"
        },
        {
            "location": "/#support",
            "text": "We are committed to ensuring support for Siddhi (with it's  extensions ) and  WSO2 Stream Processor  from development to production.   Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology.   For more details and to take advantage of this unique opportunity contact us via  http://wso2.com/support/ .    Siddhi was joint research project initiated by WSO2 and University of Moratuwa, Sri Lanka.",
            "title": "Support"
        },
        {
            "location": "/features/",
            "text": "Features\n\u00b6\n\n\n\n\nRetrieving Events \n\n\nFrom various data sources supporting various message formats\n\n\n\n\n\n\nMapping Events\n\n\nMapping events with various data formats to Stream for processing\n\n\nMapping streams to multiple data formats for publishing\n\n\n\n\n\n\nProcessing Streams\n\n\nFilter \n\n\nFiltering stream based on conditions\n\n\n\n\n\n\nWindow\n\n\nSupport for sliding and batch (tumbling) and many other type of windows  \n\n\n\n\n\n\nAggregation \n\n\nFor long running aggregations and aggregation over windows \n\n\nSupporting \nAvg\n, \nSum\n, \nMin\n, \nMax\n, etc\n\n\nAbility aggregate processing with \nGroup by\n and filter aggrigated data with \nHaving\n conditions\n\n\n\n\n\n\nIncremental summarisation\n\n\nSupport for processing and retrieving long running summarisations\n\n\n\n\n\n\nTable \n\n\nFor storing events for future processing and retrieving them on demand\n\n\nSupporting storage in in-memory, RDBMs, Solr, mongoDb, etc \n\n\n\n\n\n\nJoin\n\n\nJoining two streams based on conditions \n\n\nJoining a streams with table or incremental summarisation based on conditions  \n\n\nSupports Left, Right & Full Outer Joins and Inner Joins\n\n\n\n\n\n\nPattern \n\n\nIdentifies event occurrence patterns among streams\n\n\nIdentify non occurrence of events\n\n\nSupports repetitive matches of event pattern occurrences with logical conditions and time bound\n\n\n\n\n\n\nSequence processing\n\n\nIdentifies continuous sequence of events from streams\n\n\nSupports zero to many, one to many, and zero to one condition\n\n\n\n\n\n\nPartitions\n\n\nGrouping queries and based on keywords and value ranges for isolated parallel processing\n\n\n\n\n\n\nScripting \n\n\nSupport writing scripts like JavaScript, Scala and R within Siddhi Queries\n\n\n\n\n\n\nProcess Based on event time\n\n\nWhole execution driven by the event time  \n\n\n\n\n\n\n\n\n\n\nPublishing Events \n\n\nTo various data sources with various message formats\n\n\nSupporting load balancing and failover data publishing \n\n\n\n\n\n\nSnapshot and restore\n\n\nSupport for periodic state persistence and restore capabilities for long running execution",
            "title": "Features"
        },
        {
            "location": "/features/#features",
            "text": "Retrieving Events   From various data sources supporting various message formats    Mapping Events  Mapping events with various data formats to Stream for processing  Mapping streams to multiple data formats for publishing    Processing Streams  Filter   Filtering stream based on conditions    Window  Support for sliding and batch (tumbling) and many other type of windows      Aggregation   For long running aggregations and aggregation over windows   Supporting  Avg ,  Sum ,  Min ,  Max , etc  Ability aggregate processing with  Group by  and filter aggrigated data with  Having  conditions    Incremental summarisation  Support for processing and retrieving long running summarisations    Table   For storing events for future processing and retrieving them on demand  Supporting storage in in-memory, RDBMs, Solr, mongoDb, etc     Join  Joining two streams based on conditions   Joining a streams with table or incremental summarisation based on conditions    Supports Left, Right & Full Outer Joins and Inner Joins    Pattern   Identifies event occurrence patterns among streams  Identify non occurrence of events  Supports repetitive matches of event pattern occurrences with logical conditions and time bound    Sequence processing  Identifies continuous sequence of events from streams  Supports zero to many, one to many, and zero to one condition    Partitions  Grouping queries and based on keywords and value ranges for isolated parallel processing    Scripting   Support writing scripts like JavaScript, Scala and R within Siddhi Queries    Process Based on event time  Whole execution driven by the event time        Publishing Events   To various data sources with various message formats  Supporting load balancing and failover data publishing     Snapshot and restore  Support for periodic state persistence and restore capabilities for long running execution",
            "title": "Features"
        },
        {
            "location": "/documentation/siddhi-quckstart-4.0/",
            "text": "Siddhi Application can be written in a Streaming SQL language to process event streams and identify complex event occurrences.\n\n\nSiddhi Application can run \n\n\n\n\nBy embedding Siddhi as a Java library in your project\n\n\nOr with WSO2 Stream Processor\n\n\n\n\nCreating Siddhi Applications via WSO2 Stream Processor\n\u00b6\n\n\nFor instructions to write and deploy a Siddhi application in WSO2 Stream Processor, see the \nWSO2 SP Quick Start Guide\n.\n\n\nUsing Siddhi as an Java Library\n\u00b6\n\n\nTo use Siddhi as a library by embedding it in a Java project, follow the steps below:\n\n\nStep 1: Creating a Java Project\n\u00b6\n\n\n\n\nCreate a Java project using Maven and include the following dependencies in its \npom.xml\n file.\n\n\n\n\n   \n<dependency>\n\n     \n<groupId>\norg.wso2.siddhi\n</groupId>\n\n     \n<artifactId>\nsiddhi-core\n</artifactId>\n\n     \n<version>\n4.x.x\n</version>\n\n   \n</dependency>\n\n   \n<dependency>\n\n     \n<groupId>\norg.wso2.siddhi\n</groupId>\n\n     \n<artifactId>\nsiddhi-query-api\n</artifactId>\n\n     \n<version>\n4.x.x\n</version>\n\n   \n</dependency>\n\n   \n<dependency>\n\n     \n<groupId>\norg.wso2.siddhi\n</groupId>\n\n     \n<artifactId>\nsiddhi-query-compiler\n</artifactId>\n\n     \n<version>\n4.x.x\n</version>\n\n   \n</dependency>\n\n   \n<dependency>\n\n     \n<groupId>\norg.wso2.siddhi\n</groupId>\n\n     \n<artifactId>\nsiddhi-annotations\n</artifactId>\n\n     \n<version>\n4.x.x\n</version>\n\n   \n</dependency>\n   \n\n\n\n\n\nAdd the following repository configuration to the same file.\n\n\n   \n<repositories>\n\n     \n<repository>\n\n         \n<id>\nwso2.releases\n</id>\n\n         \n<name>\nWSO2 Repository\n</name>\n\n         \n<url>\nhttp://maven.wso2.org/nexus/content/repositories/releases/\n</url>\n\n         \n<releases>\n\n             \n<enabled>\ntrue\n</enabled>\n\n             \n<updatePolicy>\ndaily\n</updatePolicy>\n\n             \n<checksumPolicy>\nignore\n</checksumPolicy>\n\n         \n</releases>\n\n     \n</repository>\n\n   \n</repositories>\n\n\n\n\n\n\nNote\n: You can create the Java project using any method you prefer. The required dependencies can be downloaded from \nhere\n.\n* Create a new Java class in the Maven project.\n\n\nStep 2: Creating Siddhi Application\n\u00b6\n\n\nA Siddhi application is a self contained execution entity that defines how data is captured, processed and sent out.  \n\n\n\n\nCreate a Siddhi Application by defining a stream definition E.g.\nStockEventStream\n defining the format of the incoming\n events, and by defining a Siddhi query as follows.\n\n\n\n\n  \nString\n \nsiddhiApp\n \n=\n \n\"define stream StockEventStream (symbol string, price float, volume long); \"\n \n+\n \n                     \n\" \"\n \n+\n\n                     \n\"@info(name = 'query1') \"\n \n+\n\n                     \n\"from StockEventStream#window.time(5 sec)  \"\n \n+\n\n                     \n\"select symbol, sum(price) as price, sum(volume) as volume \"\n \n+\n\n                     \n\"group by symbol \"\n \n+\n\n                     \n\"insert into AggregateStockStream ;\"\n;\n\n\n\n\n\n\nThis Siddhi query groups the events by symbol and calculates aggregates such as the sum for price and sum of volume \n  for the last 5 seconds time window. Then it inserts the results into a stream named \nAggregateStockStream\n. \n\n\nStep 3: Creating Siddhi Application Runtime\n\u00b6\n\n\nThis step involves creating a runtime representation of a Siddhi application.\n\n\nSiddhiManager\n \nsiddhiManager\n \n=\n \nnew\n \nSiddhiManager\n();\n\n\nSiddhiAppRuntime\n \nsiddhiAppRuntime\n \n=\n \nsiddhiManager\n.\ncreateSiddhiAppRuntime\n(\nsiddhiApp\n);\n\n\n\n\n\n\nThe Siddhi Manager parses the Siddhi application and provides you with an Siddhi application runtime. \nThis Siddhi application runtime can be used to add callbacks and input handlers such that you can \nprogrammatically invoke the Siddhi application.\n\n\nStep 4: Registering a Callback\n\u00b6\n\n\nYou can register a callback to the Siddhi application runtime in order to receive the results once the events are processed. There are two types of callbacks:\n\n\n\n\nQuery callback\n: This subscribes to a query.\n\n\nStream callback\n: This subscribes to an event stream.\nIn this example, a Stream callback is added to the \nAggregateStockStream\n to capture the processed events.\n\n\n\n\nsiddhiAppRuntime\n.\naddCallback\n(\n\"AggregateStockStream\"\n,\n \nnew\n \nStreamCallback\n()\n \n{\n\n           \n@Override\n\n           \npublic\n \nvoid\n \nreceive\n(\nEvent\n[]\n \nevents\n)\n \n{\n\n               \nEventPrinter\n.\nprint\n(\nevents\n);\n\n           \n}\n\n       \n});\n\n\n\n\n\n\nHere, once the results are generated they are sent to the receive method of this callback. An event printer is added \ninside this callback to print the incoming events for demonstration purposes.\n\n\nStep 5: Sending Events\n\u00b6\n\n\nIn order to programmatically send events from the stream you need to obtain it's an input handler as follows:\n\n\nInputHandler\n \ninputHandler\n \n=\n \nsiddhiAppRuntime\n.\ngetInputHandler\n(\n\"StockEventStream\"\n);\n\n\n\n\n\n\nUse the following code to start the Siddhi application runtime, send events and to shutdown Siddhi:\n\n\n//Start SiddhiApp runtime\n\n\nsiddhiAppRuntime\n.\nstart\n();\n\n\n\n//Sending events to Siddhi\n\n\ninputHandler\n.\nsend\n(\nnew\n \nObject\n[]{\n\"IBM\"\n,\n \n100\nf\n,\n \n100L\n});\n\n\nThread\n.\nsleep\n(\n1000\n);\n\n\ninputHandler\n.\nsend\n(\nnew\n \nObject\n[]{\n\"IBM\"\n,\n \n200\nf\n,\n \n300L\n});\n\n\ninputHandler\n.\nsend\n(\nnew\n \nObject\n[]{\n\"WSO2\"\n,\n \n60\nf\n,\n \n200L\n});\n\n\nThread\n.\nsleep\n(\n1000\n);\n\n\ninputHandler\n.\nsend\n(\nnew\n \nObject\n[]{\n\"WSO2\"\n,\n \n70\nf\n,\n \n400L\n});\n\n\ninputHandler\n.\nsend\n(\nnew\n \nObject\n[]{\n\"GOOG\"\n,\n \n50\nf\n,\n \n30L\n});\n\n\nThread\n.\nsleep\n(\n1000\n);\n\n\ninputHandler\n.\nsend\n(\nnew\n \nObject\n[]{\n\"IBM\"\n,\n \n200\nf\n,\n \n400L\n});\n\n\nThread\n.\nsleep\n(\n2000\n);\n\n\ninputHandler\n.\nsend\n(\nnew\n \nObject\n[]{\n\"WSO2\"\n,\n \n70\nf\n,\n \n50L\n});\n\n\nThread\n.\nsleep\n(\n2000\n);\n\n\ninputHandler\n.\nsend\n(\nnew\n \nObject\n[]{\n\"WSO2\"\n,\n \n80\nf\n,\n \n400L\n});\n\n\ninputHandler\n.\nsend\n(\nnew\n \nObject\n[]{\n\"GOOG\"\n,\n \n60\nf\n,\n \n30L\n});\n\n\nThread\n.\nsleep\n(\n1000\n);\n\n\n\n//Shutdown SiddhiApp runtime\n\n\nsiddhiAppRuntime\n.\nshutdown\n();\n\n\n\n//Shutdown Siddhi\n\n\nsiddhiManager\n.\nshutdown\n();\n\n\n\n\n\n\nWhen the events are sent, you can see the output logged by the event printer.\n\n\nFind the executable Java code of this example \nhere\n \n\n\nFor more code examples, see \nquick start samples for Siddhi\n.",
            "title": "Quick Start Guide"
        },
        {
            "location": "/documentation/siddhi-quckstart-4.0/#creating-siddhi-applications-via-wso2-stream-processor",
            "text": "For instructions to write and deploy a Siddhi application in WSO2 Stream Processor, see the  WSO2 SP Quick Start Guide .",
            "title": "Creating Siddhi Applications via WSO2 Stream Processor"
        },
        {
            "location": "/documentation/siddhi-quckstart-4.0/#using-siddhi-as-an-java-library",
            "text": "To use Siddhi as a library by embedding it in a Java project, follow the steps below:",
            "title": "Using Siddhi as an Java Library"
        },
        {
            "location": "/documentation/siddhi-quckstart-4.0/#step-1-creating-a-java-project",
            "text": "Create a Java project using Maven and include the following dependencies in its  pom.xml  file.       <dependency> \n      <groupId> org.wso2.siddhi </groupId> \n      <artifactId> siddhi-core </artifactId> \n      <version> 4.x.x </version> \n    </dependency> \n    <dependency> \n      <groupId> org.wso2.siddhi </groupId> \n      <artifactId> siddhi-query-api </artifactId> \n      <version> 4.x.x </version> \n    </dependency> \n    <dependency> \n      <groupId> org.wso2.siddhi </groupId> \n      <artifactId> siddhi-query-compiler </artifactId> \n      <version> 4.x.x </version> \n    </dependency> \n    <dependency> \n      <groupId> org.wso2.siddhi </groupId> \n      <artifactId> siddhi-annotations </artifactId> \n      <version> 4.x.x </version> \n    </dependency>      Add the following repository configuration to the same file.      <repositories> \n      <repository> \n          <id> wso2.releases </id> \n          <name> WSO2 Repository </name> \n          <url> http://maven.wso2.org/nexus/content/repositories/releases/ </url> \n          <releases> \n              <enabled> true </enabled> \n              <updatePolicy> daily </updatePolicy> \n              <checksumPolicy> ignore </checksumPolicy> \n          </releases> \n      </repository> \n    </repositories>   Note : You can create the Java project using any method you prefer. The required dependencies can be downloaded from  here .\n* Create a new Java class in the Maven project.",
            "title": "Step 1: Creating a Java Project"
        },
        {
            "location": "/documentation/siddhi-quckstart-4.0/#step-2-creating-siddhi-application",
            "text": "A Siddhi application is a self contained execution entity that defines how data is captured, processed and sent out.     Create a Siddhi Application by defining a stream definition E.g. StockEventStream  defining the format of the incoming\n events, and by defining a Siddhi query as follows.      String   siddhiApp   =   \"define stream StockEventStream (symbol string, price float, volume long); \"   +  \n                      \" \"   + \n                      \"@info(name = 'query1') \"   + \n                      \"from StockEventStream#window.time(5 sec)  \"   + \n                      \"select symbol, sum(price) as price, sum(volume) as volume \"   + \n                      \"group by symbol \"   + \n                      \"insert into AggregateStockStream ;\" ;   This Siddhi query groups the events by symbol and calculates aggregates such as the sum for price and sum of volume \n  for the last 5 seconds time window. Then it inserts the results into a stream named  AggregateStockStream .",
            "title": "Step 2: Creating Siddhi Application"
        },
        {
            "location": "/documentation/siddhi-quckstart-4.0/#step-3-creating-siddhi-application-runtime",
            "text": "This step involves creating a runtime representation of a Siddhi application.  SiddhiManager   siddhiManager   =   new   SiddhiManager ();  SiddhiAppRuntime   siddhiAppRuntime   =   siddhiManager . createSiddhiAppRuntime ( siddhiApp );   The Siddhi Manager parses the Siddhi application and provides you with an Siddhi application runtime. \nThis Siddhi application runtime can be used to add callbacks and input handlers such that you can \nprogrammatically invoke the Siddhi application.",
            "title": "Step 3: Creating Siddhi Application Runtime"
        },
        {
            "location": "/documentation/siddhi-quckstart-4.0/#step-4-registering-a-callback",
            "text": "You can register a callback to the Siddhi application runtime in order to receive the results once the events are processed. There are two types of callbacks:   Query callback : This subscribes to a query.  Stream callback : This subscribes to an event stream.\nIn this example, a Stream callback is added to the  AggregateStockStream  to capture the processed events.   siddhiAppRuntime . addCallback ( \"AggregateStockStream\" ,   new   StreamCallback ()   { \n            @Override \n            public   void   receive ( Event []   events )   { \n                EventPrinter . print ( events ); \n            } \n        });   Here, once the results are generated they are sent to the receive method of this callback. An event printer is added \ninside this callback to print the incoming events for demonstration purposes.",
            "title": "Step 4: Registering a Callback"
        },
        {
            "location": "/documentation/siddhi-quckstart-4.0/#step-5-sending-events",
            "text": "In order to programmatically send events from the stream you need to obtain it's an input handler as follows:  InputHandler   inputHandler   =   siddhiAppRuntime . getInputHandler ( \"StockEventStream\" );   Use the following code to start the Siddhi application runtime, send events and to shutdown Siddhi:  //Start SiddhiApp runtime  siddhiAppRuntime . start ();  //Sending events to Siddhi  inputHandler . send ( new   Object []{ \"IBM\" ,   100 f ,   100L });  Thread . sleep ( 1000 );  inputHandler . send ( new   Object []{ \"IBM\" ,   200 f ,   300L });  inputHandler . send ( new   Object []{ \"WSO2\" ,   60 f ,   200L });  Thread . sleep ( 1000 );  inputHandler . send ( new   Object []{ \"WSO2\" ,   70 f ,   400L });  inputHandler . send ( new   Object []{ \"GOOG\" ,   50 f ,   30L });  Thread . sleep ( 1000 );  inputHandler . send ( new   Object []{ \"IBM\" ,   200 f ,   400L });  Thread . sleep ( 2000 );  inputHandler . send ( new   Object []{ \"WSO2\" ,   70 f ,   50L });  Thread . sleep ( 2000 );  inputHandler . send ( new   Object []{ \"WSO2\" ,   80 f ,   400L });  inputHandler . send ( new   Object []{ \"GOOG\" ,   60 f ,   30L });  Thread . sleep ( 1000 );  //Shutdown SiddhiApp runtime  siddhiAppRuntime . shutdown ();  //Shutdown Siddhi  siddhiManager . shutdown ();   When the events are sent, you can see the output logged by the event printer.  Find the executable Java code of this example  here    For more code examples, see  quick start samples for Siddhi .",
            "title": "Step 5: Sending Events"
        },
        {
            "location": "/documentation/user-guide/",
            "text": "User Guide\n\u00b6\n\n\nUsing the Siddhi in \nWSO2 Stream Processor\n\u00b6\n\n\n\n\n\n\nYou can use Siddhi in the latest \nWSO2 Stream Processor\n that is a part of \nWSO2 Analytics\n offering, with editor, debugger and simulation support. \n\n\n\n\n\n\nAll \nSiddhi extensions\n are shipped by default with WSO2 Stream Processor.\n\n\n\n\n\n\nRefer the \nWSO2 SP Quick Start Guide\n for more information.\n\n\n\n\n\n\nUsing Siddhi as a \njava library\n\u00b6\n\n\n\n\nTo embed Siddhi as a java library in your project add the following Siddhi libraries as maven dependencies to the \npom.xml\n file.\n\n\n\n\n    \n<dependency>\n\n      \n<groupId>\norg.wso2.siddhi\n</groupId>\n\n      \n<artifactId>\nsiddhi-core\n</artifactId>\n\n      \n<version>\n4.x.x\n</version>\n\n    \n</dependency>\n\n    \n<dependency>\n\n      \n<groupId>\norg.wso2.siddhi\n</groupId>\n\n      \n<artifactId>\nsiddhi-query-api\n</artifactId>\n\n      \n<version>\n4.x.x\n</version>\n\n    \n</dependency>\n\n    \n<dependency>\n\n      \n<groupId>\norg.wso2.siddhi\n</groupId>\n\n      \n<artifactId>\nsiddhi-query-compiler\n</artifactId>\n\n      \n<version>\n4.x.x\n</version>\n\n    \n</dependency>\n\n    \n<dependency>\n\n      \n<groupId>\norg.wso2.siddhi\n</groupId>\n\n      \n<artifactId>\nsiddhi-annotations\n</artifactId>\n\n      \n<version>\n4.x.x\n</version>\n\n    \n</dependency>\n    \n\n\n\n\n\nAdd the following repository configuration to the same file.\n\n\n   \n<repositories>\n\n     \n<repository>\n\n         \n<id>\nwso2.releases\n</id>\n\n         \n<name>\nWSO2 Repository\n</name>\n\n         \n<url>\nhttp://maven.wso2.org/nexus/content/repositories/releases/\n</url>\n\n         \n<releases>\n\n             \n<enabled>\ntrue\n</enabled>\n\n             \n<updatePolicy>\ndaily\n</updatePolicy>\n\n             \n<checksumPolicy>\nignore\n</checksumPolicy>\n\n         \n</releases>\n\n     \n</repository>\n\n   \n</repositories>\n\n\n\n\n\n\n\n\nThe required dependencies can be downloaded from \nhere\n\n\nRefer the \nSiddhi Quick Start Guide\n for more how to setup and run a Siddhi Application.\n\n\n\n\nSystem Requirements\n\u00b6\n\n\n\n\nMinimum memory - 500 MB (based on in-memory data stored for processing)\n\n\nProcessor      - Pentium 800MHz or equivalent at minimum\n\n\nJava SE Development Kit 1.8 (1.7 for 3.x version)\n\n\nTo build Siddhi from the Source distribution, it is necessary that you have\n   JDK 1.8 version (1.7 for 3.x version) or later and Maven 3.0.4 or later",
            "title": "User Guide"
        },
        {
            "location": "/documentation/user-guide/#user-guide",
            "text": "",
            "title": "User Guide"
        },
        {
            "location": "/documentation/user-guide/#using-the-siddhi-in-wso2-stream-processor",
            "text": "You can use Siddhi in the latest  WSO2 Stream Processor  that is a part of  WSO2 Analytics  offering, with editor, debugger and simulation support.     All  Siddhi extensions  are shipped by default with WSO2 Stream Processor.    Refer the  WSO2 SP Quick Start Guide  for more information.",
            "title": "Using the Siddhi in WSO2 Stream Processor"
        },
        {
            "location": "/documentation/user-guide/#using-siddhi-as-a-java-library",
            "text": "To embed Siddhi as a java library in your project add the following Siddhi libraries as maven dependencies to the  pom.xml  file.        <dependency> \n       <groupId> org.wso2.siddhi </groupId> \n       <artifactId> siddhi-core </artifactId> \n       <version> 4.x.x </version> \n     </dependency> \n     <dependency> \n       <groupId> org.wso2.siddhi </groupId> \n       <artifactId> siddhi-query-api </artifactId> \n       <version> 4.x.x </version> \n     </dependency> \n     <dependency> \n       <groupId> org.wso2.siddhi </groupId> \n       <artifactId> siddhi-query-compiler </artifactId> \n       <version> 4.x.x </version> \n     </dependency> \n     <dependency> \n       <groupId> org.wso2.siddhi </groupId> \n       <artifactId> siddhi-annotations </artifactId> \n       <version> 4.x.x </version> \n     </dependency>       Add the following repository configuration to the same file.      <repositories> \n      <repository> \n          <id> wso2.releases </id> \n          <name> WSO2 Repository </name> \n          <url> http://maven.wso2.org/nexus/content/repositories/releases/ </url> \n          <releases> \n              <enabled> true </enabled> \n              <updatePolicy> daily </updatePolicy> \n              <checksumPolicy> ignore </checksumPolicy> \n          </releases> \n      </repository> \n    </repositories>    The required dependencies can be downloaded from  here  Refer the  Siddhi Quick Start Guide  for more how to setup and run a Siddhi Application.",
            "title": "Using Siddhi as a java library"
        },
        {
            "location": "/documentation/user-guide/#system-requirements",
            "text": "Minimum memory - 500 MB (based on in-memory data stored for processing)  Processor      - Pentium 800MHz or equivalent at minimum  Java SE Development Kit 1.8 (1.7 for 3.x version)  To build Siddhi from the Source distribution, it is necessary that you have\n   JDK 1.8 version (1.7 for 3.x version) or later and Maven 3.0.4 or later",
            "title": "System Requirements"
        },
        {
            "location": "/documentation/siddhi-4.0/",
            "text": "Siddhi Streaming SQL Guide 4.0\n\u00b6\n\n\nIntroduction\n\u00b6\n\n\nSiddhi Streaming SQL is designed to process event streams in streaming manner, detect complex event occurrences, \nand notify them in real-time. \n\n\nSiddhi Application\n\u00b6\n\n\nStreaming processing and Complex Event Processing rules can be written is Siddhi Streaming SQL and they can be put \ntogether as \nSiddhiApp\n in one file. \n\n\nPurpose\n\n\nEach Siddhi Application is an isolated processing unit that let you deploy and \nexecute queries independent of other SiddhiApps in the system.\n\n\nThe flowing diagram depicts how \nevent flows\n within some of the key Siddhi Streaming SQL elements \nof the Siddhi Application.\n\n\n\n\nBelow table provides brief description of a few key elements in the Siddhi Streaming SQL Language.\n\n\n\n\n\n\n\n\nElements\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nStream\n\n\nA logical series of events ordered in time with a uniquely identifiable name and set of defined typed attributes defining it's schema\n\n\n\n\n\n\nEvent\n\n\nAn event is associated with only one stream, and all events of that stream have an identical set of attributes assigned specific types (or the same schema). An event contains a timestamp and set of attribute values according to the schema.\n\n\n\n\n\n\nTable\n\n\nA structured representation of stored data with a defined schema. Stored data can be backed by \nIn-Memory\n, \nRDBMs\n, \nMongoDB\n, etc to be accessed and manipulated at runtime.\n\n\n\n\n\n\nQuery\n\n\nA logical construct that process events in streaming manner by combining existing streams and/or tables, and generates events to output stream or table. A query consumes one or more input streams and zero or one table, process those events in a streaming manner, publishes the output events to stream or tables for further processing or notifications.\n\n\n\n\n\n\nSource\n\n\nA contract that consumes data from external sources (such as \nTCP\n, \nKafka\n, \nHTTP\n, etc), converts it's data format (such as \nXML\n, \nJSON\n, \nbinary\n, etc) to Siddhi event, and passes that to a Stream for processing.\n\n\n\n\n\n\nSink\n\n\nA contract that takes events arriving at a Stream, map them to a predefined data format (such as \nXML\n, \nJSON\n, \nbinary\n, etc), and publish them to external endpoints (such as \nE-mail\n, \nTCP\n, \nKafka\n, \nHTTP\n, etc).\n\n\n\n\n\n\nInput Handler\n\n\nA mechanism to programmatically inject events into Streams.\n\n\n\n\n\n\nStream/Query Callback\n\n\nA mechanism to programmatically consumes output events from Streams and Queries.\n\n\n\n\n\n\nPartition\n\n\nA logical container that isolates processing of queries based on partition keys. Here separate instance of queries will be generated for each partition key to achieve isolation.\n\n\n\n\n\n\nInner Stream\n\n\nA positionable stream that connects portioned queries within their partitions preserving isolation.\n\n\n\n\n\n\n\n\nGrammar\n\n\nThe element of Siddhi SQL can be composed together as a script in Siddhi App, Here each construct should be separated \nby a semicolon ( ; ). \n\n\n<siddhi app>  : \n        <app annotation> * \n        ( <stream definition> | <table definition> | ... ) + \n        ( <query> | <partition> ) +\n        ;\n\n\n\n\n\nStreams\n\u00b6\n\n\nStreams is a logical series of events ordered in time. It's schema is defined via the \nstream definition\n.\nA stream definition contains a unique name and a set of attributes with specific types and uniquely identifiable names within the stream.\nAll events of a particular Stream will have the same schema (i.e. have the same attributes in the same order). \n\n\nPurpose\n\n\nBy defining a schema it unifies common types of events together. This enables them to be processed at queries using their defined attributes in a streaming manner, and let sinks and sources to map events to/from various data formats.\n\n\nSyntax\n\n\nThe following is the syntax for defining a new stream.\n\n\ndefine\n \nstream\n \n<\nstream\n \nname\n>\n \n(\n<\nattribute\n \nname\n>\n \n<\nattribute\n \ntype\n>\n,\n \n<\nattribute\n \nname\n>\n \n<\nattribute\n \ntype\n>\n,\n \n...\n \n);\n\n\n\n\n\n\nThe following parameters are configured in a stream definition.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstream name\n\n\nThe name of the stream created. (as a convention \nPascalCase\n is used for stream name)\n\n\n\n\n\n\nattribute name\n\n\nThe schema of an stream is defined by its attributes by uniquely identifiable attribute names (as a convention \ncamalCase\n is used for attribute names)\n\n\n\n\n\n\nattribute type\n\n\nThe type of each attribute defined in the schema. \n This can be \nSTRING\n, \nINT\n, \nLONG\n, \nDOUBLE\n, \nFLOAT\n, \nBOOL\n or \nOBJECT\n.\n\n\n\n\n\n\n\n\nExample\n\n\ndefine\n \nstream\n \nTempStream\n \n(\ndeviceID\n \nlong\n,\n \nroomNo\n \nint\n,\n \ntemp\n \ndouble\n);\n\n\n\n\n\n\nThe above creates a stream named \nTempStream\n with the following attributes.\n\n\n\n\ndeviceID\n of type \nlong\n\n\nroomNo\n of type \nint\n \n\n\ntemp\n of type \ndouble\n \n\n\n\n\nSources\n\u00b6\n\n\nSources allow you to receive events via multiple transports and with various data formats into streams for processing.\n\n\nSource let you define a mapping to convert the incoming event from its native data format (such as \nJSON\n, \nTEXT\n, \nXML\n, etc) \nto Siddhi Event, when customization to such mappings is not provided Siddhi assumes that the arriving event adhere to a \npredefined format based on the stream definition and the selected message format.\n\n\nPurpose\n\n\nSource provides a way to Siddhi consume events from external systems and map the events to adhere to the associated stream. \n\n\nSyntax\n\n\nTo configure a stream to consume events via a source, add the source configuration to a stream definition by adding the \n@source\n annotation with the required parameter values. \nThe source syntax is as follows:\n\n\n@\nsource\n(\ntype\n=\n'source_type'\n,\n \nstatic\n.\noption\n.\nkey1\n=\n'static_option_value1'\n,\n \nstatic\n.\noption\n.\nkeyN\n=\n'static_option_valueN'\n,\n\n    \n@\nmap\n(\ntype\n=\n'map_type'\n,\n \nstatic\n.\noption_key1\n=\n'static_option_value1'\n,\n \nstatic\n.\noption\n.\nkeyN\n=\n'static_option_valueN'\n,\n\n        \n@\nattributes\n(\n \nattributeN\n=\n'attribute_mapping_N'\n,\n \nattribute1\n=\n'attribute_mapping_1'\n)\n\n    \n)\n\n\n)\n\n\ndefine\n \nstream\n \nstream_name\n \n(\nattribute1\n \nType1\n,\n \nattributeN\n \nTypeN\n);\n\n\n\n\n\n\nSource\n\n\nThe \ntype\n parameter of \n@source\n defines the source type that receives events. The other parameters to be configured \ndepends on the source selected, some of those can also be optional values. \nFor detailed information about the parameters refer the appropriate source documentation.\n\n\nSome of the supports source types are:\n\n\n\n\nTCP\n\n\nKafka\n \n\n\nHTTP\n \n(Only works in WSO2 Stream Processor)\n \n\n\nMQTT\n \n\n\nRabbitMQ\n \n\n\nIn-Memory\n\n\nFile\n \n(Only works in WSO2 Stream Processor)\n \n\n\nJMS\n \n(Only works in WSO2 Stream Processor)\n  \n\n\nE-mail\n  \n(Only works in WSO2 Stream Processor)\n \n\n\nWSO2-Event\n \n(Only works in WSO2 Stream Processor)\n \n\n\n\n\nSource Mapper\n\n\nEach \n@source\n will have a mapping denoted by \n@map\n that converts the incoming message format to Siddhi event.\n\n\nThe \ntype\n parameter of \n@map\n defines the map type that's responsible of mapping the data. The other parameters to be \nconfigured depends on the mapper selected, some of those can also be optional values. \nFor detailed information about the parameters refer the appropriate mapper documentation.\n\n\n\n\nTip\n\n\nWhen \n@map\n is not provided \n@map(type='passThrough')\n will be used as default. This can be used when source consumes Siddhi events and when it does not need any mappings.\n\n\n\n\nMap Attributes\n\n\n@attributes\n is an optional parameter of \n@map\n to define custom mapping. When \n@attributes\n is not provided each mapper\nassumes that the incoming events will be adhere to it's own expected default data format. By defining \n@attributes\n you \ncan configure mappers to extract data from the incoming message selectively and assign then to attributes. \n\n\nThere are two ways you can configure \n@attributes\n. \n\n\n\n\nDefining attributes as keys and mapping content as value in the following format: \n\n\n@attributes( attributeN='mapping_N', attribute1='mapping_1')\n \n\n\nDefining all attributes' mapping content in the same order as how the attributes are defined in stream definition: \n\n\n@attributes( 'mapping_1', 'mapping_N')\n \n\n\n\n\nSome of the supports source mappings are:\n\n\n\n\nJSON\n\n\nXML\n\n\nBinary\n\n\nText\n\n\nKey-Value\n\n\n\n\nExample\n\n\nThe following query receives events via the \nHTTP\n source on \nJSON\n data format, and passes them in the \nInputStream\n stream for processing. \nHere the HTTP source is configured to receive events on all network interfaces on port \n8080\n on the context \nfoo\n, and \nits protected by basic authentication.\n\n\n@\nsource\n(\ntype\n=\n'http'\n,\n \nreceiver\n.\nurl\n=\n'http://0.0.0.0:8080/foo'\n,\n \nis\n.\nbasic\n.\nauth\n.\nenabled\n=\n'true'\n,\n \n  \n@\nmap\n(\ntype\n=\n'json'\n))\n\n\ndefine\n \nstream\n \nInputStream\n \n(\nname\n \nstring\n,\n \nage\n \nint\n,\n \ncountry\n \nstring\n);\n\n\n\n\n\n\nSinks\n\u00b6\n\n\nSinks allow you to publish events from the streams via multiple transports to external endpoints with various data formats.\n\n\nSink let you define a mapping to convert the Siddhi event to appropriate output data format (such as \nJSON\n, \nTEXT\n, \nXML\n, etc), \nwhen customization to such mappings is not provided Siddhi converts events to its default format based on the stream definition and \nthe selected data format and publish the events.\n\n\nPurpose\n\n\nSink provides a way to publish Siddhi events to external systems in their preferred data format. \n\n\nSyntax\n\n\nTo configure a stream to publish events via a Sink, add the sink configuration to a stream definition by adding the \n@sink\n \nannotation with the required parameter values. The sink syntax is as follows:\n\n\n@\nsink\n(\ntype\n=\n'sink_type'\n,\n \nstatic_option_key1\n=\n'static_option_value1'\n,\n \ndynamic_option_key1\n=\n'{{dynamic_option_value1}}'\n,\n\n    \n@\nmap\n(\ntype\n=\n'map_type'\n,\n \nstatic_option_key1\n=\n'static_option_value1'\n,\n \ndynamic_option_key1\n=\n'{{dynamic_option_value1}}'\n,\n\n        \n@\npayload\n(\n'payload_mapping'\n)\n\n    \n)\n\n\n)\n\n\ndefine\n \nstream\n \nstream_name\n \n(\nattribute1\n \nType1\n,\n \nattributeN\n \nTypeN\n);\n\n\n\n\n\n\n\n\nDynamic Properties\n\n\nThe Sink and Sink mapper properties that are categorised as \ndynamic\n have the ability to absorb attributes values \nfrom their associated Streams. This can be done by using the attribute names in double curly braces as \n{{...}}\n when configuring the property value. \n\n\nSome valid dynamic properties values are: \n\n\n\n\n'{{attribute1}}'\n\n\n'This is {{attribute1}}'\n \n\n\n{{attribute1}} > {{attributeN}}\n  \n\n\n\n\nHere the attribute names in the double curly braces will be replaced with event values during execution. \n\n\n\n\nSink\n\n\nThe \ntype\n parameter of \n@sink\n defines the sink type that publishes the events. The other parameters to be configured \ndepends on the sink selected, some of those can also be optional and some can be dynamic values. \nFor detailed information about the parameters refer the appropriate sink documentation.\n\n\nSome of the supports sink types are:\n\n\n\n\nTCP\n\n\nKafka\n \n\n\nE-mail\n  \n(Only works in WSO2 Stream Processor)\n \n\n\nMQTT\n \n\n\nRabbitMQ\n \n\n\nIn-Memory\n\n\nFile\n \n(Only works in WSO2 Stream Processor)\n \n\n\nHTTP\n \n(Only works in WSO2 Stream Processor)\n \n\n\nJMS\n \n(Only works in WSO2 Stream Processor)\n  \n\n\nWSO2-Event\n \n(Only works in WSO2 Stream Processor)\n \n\n\n\n\nSink Mapper\n\n\nEach \n@sink\n will have a mapping denoted by \n@map\n that converts the Siddhi event to an outgoing message format.\n\n\nThe \ntype\n parameter of \n@map\n defines the map type that's responsible of mapping the event. The other parameters to be configured depends on the mapper selected, some of those can also be optional or dynamic values. \nFor detailed information about the parameters refer the appropriate mapper documentation.\n\n\n\n\nTip\n\n\nWhen \n@map\n is not provided \n@map(type='passThrough')\n will be used as default. This can be used when Sink can publish Siddhi events and when it does not need any mappings.\n\n\n\n\nMap Payload\n\n\n@payload\n is an optional parameter of \n@map\n to define a custom mapping. When \n@payload\n is not provided each mapper\nmaps the outgoing events to it's own default data format. By defining \n@payload\n you \ncan configure mappers to produce the output payload as of your choice using dynamic properties by selectively assigning \nthe attributes on your preferred format. \n\n\nThere are two ways you can configure \n@payload\n. \n\n\n\n\nSome mappers such as \nXML\n, \nJSON\n, and \nTest\n accepts only one output payload using the following format: \n\n\n@payload( 'This is a test message from {{user}}.' )\n \n\n\nSome mappers such \nkey-value\n accepts series of mapping values defined as: \n\n\n@payload( key1='mapping_1', key2='user : {{user}}')\n \n\n\n\n\nSome of the supports sink mappings are:\n\n\n\n\nJSON\n\n\nXML\n\n\nBinary\n\n\nText\n\n\nKey-Value\n\n\n\n\nExample\n\n\nThe following query publishes events from \nOutputStream\n via the \nHTTP\n Sink. Here the events are mapped to default \nJSON\n payloads and sent to \nhttp://localhost:8005/endpoint\n\n using \nPOST\n method, \nAccept\n header, and basic authentication having \nadmin\n as both the username and the password.\n\n\n@\nsink\n(\ntype\n=\n'http'\n,\n \npublisher\n.\nurl\n=\n'http://localhost:8005/endpoint'\n,\n \nmethod\n=\n'POST'\n,\n \nheaders\n=\n'Accept-Date:20/02/2017'\n,\n \n  \nbasic\n.\nauth\n.\nusername\n=\n'admin'\n,\n \nbasic\n.\nauth\n.\npassword\n=\n'admin'\n,\n \nbasic\n.\nauth\n.\nenabled\n=\n'true'\n,\n\n  \n@\nmap\n(\ntype\n=\n'json'\n))\n\n\ndefine\n \nstream\n \nOutputStream\n \n(\nname\n \nstring\n,\n \nang\n \nint\n,\n \ncountry\n \nstring\n);\n\n\n\n\n\n\nQuery\n\u00b6\n\n\nEach Siddhi query can consume one/more streams and zero/one table, process the events in streaming manner and generate a\n output event to a stream or performs CRUD operation to a table.\n\n\nPurpose\n\n\nQuery enables you to perform Complex Event Processing and Stream Processing operations by processing incoming events one by one in the arrival order. \n\n\nSyntax\n\n\nAll queries contain an input and output section, some also contain a projection section. A simple query with all three sections is as follows.\n\n\nfrom\n \n<\ninput\n \nstream\n>\n \n\nselect\n \n<\nattribute\n \nname\n>\n,\n \n<\nattribute\n \nname\n>\n,\n \n...\n\n\ninsert\n \ninto\n \n<\noutput\n \nstream\n/\ntable\n>\n\n\n\n\n\n\nExample\n\n\nFollowing simple query in the Siddhi App consumes events from defined \nTempStream\n stream and output the room temperature and room number to \nRoomTempStream\n stream.\n\n\ndefine\n \nstream\n \nTempStream\n \n(\ndeviceID\n \nlong\n,\n \nroomNo\n \nint\n,\n \ntemp\n \ndouble\n);\n\n\n\nfrom\n \nTempStream\n \n\nselect\n \nroomNo\n,\n \ntemp\n\n\ninsert\n \ninto\n \nRoomTempStream\n;\n\n\n\n\n\n\n\n\nInferred Stream\n\n\nHere the \nRoomTempStream\n is an inferred Stream, i.e. \nRoomTempStream\n can be used as any other defined stream \nwithout explicitly defining its Stream Definition and the definition of the \nRoomTempStream\n will be inferred from the \nfirst query that produces the Stream.  \n\n\n\n\nQuery Projection\n\u00b6\n\n\nSiddhi queries supports the following for query projections.\n\n\n\n    \n\n        \nAction\n\n        \nDescription\n\n    \n\n    \n\n        \nSelecting required objects for projection\n\n        \nThis involves selecting only some of the attributes from the input stream to be inserted into an output stream.\n            \n\n            E.g., The following query selects only the `roomNo` and `temp` attributes from the `TempStream` stream.\n            \nfrom TempStream\nselect roomNo, temp\ninsert into RoomTempStream;\n\n        \n\n    \n\n    \n\n        \nSelecting all attributes for projection\n\n        \nSelecting all the attributes in an input stream to be inserted into an output stream. This can be done by using asterisk ( * ) or by omitting the `select` statement.\n            \n\n            E.g., Use one of the following queries to select all the attributes in the `NewTempStream` stream.\n            \nfrom TempStream\nselect *\ninsert into NewTempStream;\n\n            or\n            \nfrom TempStream\ninsert into NewTempStream;\n\n        \n\n    \n\n    \n\n        \nRenaming attributes\n\n        \nThis selects attributes from the input streams and inserting them into the output stream with different names.\n            \n\n            E.g., The following query renames `roomNo` to `roomNumber` and `temp` to `temperature`.\n            \nfrom TempStream \nselect roomNo as roomNumber, temp as temperature\ninsert into RoomTempStream;\n\n        \n\n    \n\n    \n\n        \nIntroducing the constant value\n\n        \nThis adds constant values by assigning it to an attribute using `as`.\n            \n\n            E.g., Using 'C' as the constant value for `scale` attribute. \n            \nfrom TempStream\nselect roomNo, temp, 'C' as scale\ninsert into RoomTempStream;\n\n        \n\n    \n\n    \n\n        \nUsing mathematical and logical expressions\n\n        \nThis uses attributes with mathematical and logical expressions in the precedence order given below, and assign them to the output attribute using `as`.\n            \n\n            \nOperator precedence\n\n            \n\n                \n\n                    \nOperator\n\n                    \nDistribution\n\n                    \nExample\n\n                \n\n                \n\n                    \n\n                        ()\n                    \n\n                    \n\n                        Scope\n                    \n\n                    \n\n                        \n(cost + tax) * 0.05\n\n                    \n\n                \n\n                \n\n                    \n\n                         IS NULL\n                    \n\n                    \n\n                        Null check\n                    \n\n                    \n\n                        \ndeviceID is null\n\n                    \n\n                \n\n                \n\n                    \n\n                        NOT\n                    \n\n                    \n\n                        Logical NOT\n                    \n\n                    \n\n                        \nnot (price > 10)\n\n                    \n\n                \n\n                \n\n                    \n\n                         *   /   %  \n                    \n\n                    \n\n                        Multiplication, division, modulo\n                    \n\n                    \n\n                        \ntemp * 9/5 + 32\n\n                    \n\n                \n\n                \n\n                    \n\n                        +   -  \n                    \n\n                    \n\n                        Addition, substraction\n                    \n\n                    \n\n                        \ntemp * 9/5 - 32\n\n                    \n\n                \n\n                \n\n                    \n\n                        \n<\n   \n<\n=   >   >=\n                    \n\n                    \n\n                        Comparators: less-than, greater-than-equal, greater-than, less-than-equal\n                    \n\n                    \n\n                        \ntotalCost >= price * quantity\n\n                    \n\n                \n\n                \n\n                    \n\n                        ==   !=  \n                    \n\n                    \n\n                        Comparisons: equal, not equal\n                    \n\n                    \n\n                        \ntotalCost !=  price * quantity\n\n                    \n\n                \n\n                \n\n                    \n\n                        IN\n                    \n\n                    \n\n                        Contains in table\n                    \n\n                    \n\n                        \nroomNo in ServerRoomsTable\n\n                    \n\n                \n\n                \n\n                    \n\n                        AND\n                    \n\n                    \n\n                        Logical AND\n                    \n\n                    \n\n                        \ntemp \n<\n 40 and (humidity \n<\n 40 or humidity >= 60)\n\n                    \n\n                \n\n                \n\n                    \n\n                        OR\n                    \n\n                    \n\n                        Logical OR\n                    \n\n                    \n\n                        \ntemp \n<\n 40 or (humidity \n<\n 40 and humidity >= 60)\n\n                    \n\n                \n\n            \n\n            E.g., Converting Celsius to Fahrenheit and identifying rooms with room number between 10 and 15 as server rooms.\n            \nfrom TempStream\nselect roomNo, temp * 9/5 + 32 as temp, 'F' as scale, roomNo > 10 and roomNo \n<\n 15 as isServerRoom\ninsert into RoomTempStream;\n       \n    \n\n\n\n\n\n\nFunctions\n\u00b6\n\n\nA function consumes zero, one or more parameters and always produces a result value. It can be used any location where\n an attribute can be used. \n\n\nPurpose\n\n\nFunctions encapsulates complex making the Siddhi application simple and easy to understand. \n\n\nFunction Parameters\n\n\nFunctions parameters can be attributes, constant values, results of other functions, results of mathematical or logical expressions or time parameters. \nFunction parameters depending on the function being called.\n\n\nTime is a special parameter that can we defined using the integer time value followed by its unit as \n<int> <unit>\n. \nFollowing are the supported unit types. Upon execution time returns the value in the scale of milliseconds as a long value. \n\n\n\n    \n\n        \n\n            Unit  \n        \n\n        \n\n            Syntax\n        \n\n    \n\n    \n\n        \n\n            Year\n        \n\n        \n\n            year | years\n        \n\n    \n\n    \n\n        \n\n            Month\n        \n\n        \n\n            month | months\n        \n\n    \n\n    \n\n        \n\n            Week\n        \n\n        \n\n            week | weeks\n        \n\n    \n\n    \n\n        \n\n            Day\n        \n\n        \n\n            day | days\n        \n\n    \n\n    \n\n        \n\n            Hour\n        \n\n        \n\n           hour | hours\n        \n\n    \n\n    \n\n        \n\n           Minutes\n        \n\n        \n\n           minute | minutes | min\n        \n\n    \n\n    \n\n        \n\n           Seconds\n        \n\n        \n\n           second | seconds | sec\n        \n\n    \n\n    \n\n        \n\n           Milliseconds\n        \n\n        \n\n           millisecond | milliseconds\n        \n\n    \n\n\n\n\n\nE.g. Passing 1 hour and 25 minutes to \ntest()\n function.\n\n\ntest(1 hour 25 min)\n\n\n\n\n\nNote\n\n\nFunctions, mathematical expressions, and logical expressions can be used in a nested manner.\n\n\n\n\nFollowing are some inbuilt functions shipped with Siddhi, for more functions refer execution \nextensions\n.\n\n\n\n\neventTimestamp\n\n\nlog\n\n\nUUID\n\n\ndefault\n\n\ncast\n\n\nconvert\n\n\nifThenElse\n\n\nminimum\n\n\nmaximum\n\n\ncoalesce\n\n\ninstanceOfBoolean\n\n\ninstanceOfDouble\n\n\ninstanceOfFloat\n\n\ninstanceOfInteger\n\n\ninstanceOfLong\n\n\ninstanceOfString\n\n\n\n\nExample\n\n\nThe following configuration converts the \nroomNo\n to \nstring\n and adds a \nmessageID\n to each event using the \nconvert\n and \nUUID\n functions.\n\n\nfrom\n \nTempStream\n\n\nselect\n \nconvert\n(\nroomNo\n,\n \n'string'\n)\n \nas\n \nroomNo\n,\n \ntemp\n,\n \nUUID\n()\n \nas\n \nmessageID\n\n\ninsert\n \ninto\n \nRoomTempStream\n;\n\n\n\n\n\n\nFilters\n\u00b6\n\n\nFilters are included in queries to filter information from input streams based on a specified condition.\n\n\nPurpose\n\n\nA filter allows you to separate events that match a specific condition as the output, or for further processing.\n\n\nSyntax\n\n\nFilter conditions should be defined in square brackets next to the input stream name as shown below.\n\n\nfrom\n \n<\ninput\n \nstream\n>\n[\n<\nfilter\n \ncondition\n>\n]\n\n\nselect\n \n<\nattribute\n \nname\n>\n,\n \n<\nattribute\n \nname\n>\n,\n \n...\n\n\ninsert\n \ninto\n \n<\noutput\n \nstream\n>\n\n\n\n\n\n\nExample\n\n\nThe following query filters all server rooms within the range of 100 and 210, and having temperature greater than 40 degrees \nfrom the \nTempStream\n stream, and inserts the results into the \nHighTempStream\n stream.\n\n\nfrom\n \nTempStream\n[(\nroomNo\n \n>=\n \n100\n \nand\n \nroomNo\n \n<\n \n210\n)\n \nand\n \ntemp\n \n>\n \n40\n]\n\n\nselect\n \nroomNo\n,\n \ntemp\n\n\ninsert\n \ninto\n \nHighTempStream\n;\n\n\n\n\n\n\nWindows\n\u00b6\n\n\nWindows allow you to capture a subset of events based on a specific criterion from an input stream for calculation. \nEach input stream can only have maximum of one window.\n\n\nPurpose\n\n\nTo create subsets of events within a stream based on time duration, number of events, etc for processing. \nWindow can operate on sliding or tumbling (batch) manner.\n\n\nSyntax\n\n\nThe \n#window\n prefix should be inserted next to the relevant stream in order to use a window.\n\n\nfrom\n \n<\ninput\n \nstream\n>#\nwindow\n.\n<\nwindow\n \nname\n>\n(\n<\nparameter\n>\n,\n \n<\nparameter\n>\n,\n \n...\n \n)\n\n\nselect\n \n<\nattribute\n \nname\n>\n,\n \n<\nattribute\n \nname\n>\n,\n \n...\n\n\ninsert\n \n<\nevent\n \ntype\n>\n \ninto\n \n<\noutput\n \nstream\n>\n\n\n\n\n\n\n\n\nNote\n\n\nFilter condition can be applied both before and/or after the window\n\n\n\n\nExample\n\n\nIf you want to identify the maximum temperature out of last 10 events, you need to define a \nlength\n window of 10 events.\n This window operates as a sliding mode where the following 3 subsets will be calculated when a list of 12 events are received in a sequential order.\n\n\n\n\n\n\n\n\nSubset\n\n\nEvent Range\n\n\n\n\n\n\n\n\n\n\n1\n\n\n1-10\n\n\n\n\n\n\n2\n\n\n2-11\n\n\n\n\n\n\n3\n\n\n3-12\n\n\n\n\n\n\n\n\nThe following query finds the maximum temperature out of \nlast 10 events\n from the \nTempStream\n stream, \nand inserts the results into the \nMaxTempStream\n stream.\n\n\nfrom\n \nTempStream\n#\nwindow\n.\nlength\n(\n10\n)\n\n\nselect\n \nmax\n(\ntemp\n)\n \nas\n \nmaxTemp\n\n\ninsert\n \ninto\n \nMaxTempStream\n;\n\n\n\n\n\n\nIf you define the maximum temperature reading out of every 10 events, you need to define a \nlengthBatch\n window of 10 events.\n Where this window operates as a batch/tumbling mode where the following 3 subsets will be calculated when a list of 30 events are received in a sequential order.\n\n\n\n\n\n\n\n\nSubset\n\n\nEvent Range\n\n\n\n\n\n\n\n\n\n\n1\n\n\n1-10\n\n\n\n\n\n\n2\n\n\n11-20\n\n\n\n\n\n\n3\n\n\n21-30\n\n\n\n\n\n\n\n\nThe following query finds the maximum temperature out of \nevery 10 events\n from the \nTempStream\n stream, \nand inserts the results into the \nMaxTempStream\n stream.\n\n\nfrom\n \nTempStream\n#\nwindow\n.\nlengthBatch\n(\n10\n)\n\n\nselect\n \nmax\n(\ntemp\n)\n \nas\n \nmaxTemp\n\n\ninsert\n \ninto\n \nMaxTempStream\n;\n\n\n\n\n\n\n\n\nNote\n\n\nSimilar operations can also be done time with \ntime\n window and \ntimeBatch\n window and for others. \nCode segments such as \n#window.time(10 min)\n will consider events in last 10 minutes in a sliding manner and \n#window.timeBatch(2 min)\n will consider events every 2 minutes in a tumbling manner. \n\n\n\n\nFollowing are some inbuilt windows shipped with Siddhi, for more window types refer execution \nextensions\n. \n\n\n\n\ntime\n\n\ntimeBatch\n\n\nlength\n\n\nlengthBatch\n\n\nsort\n\n\nfrequent\n\n\nlossyFrequent\n\n\ncron\n\n\nexternalTime\n\n\nexternalTimeBatch\n\n\n\n\nOutput event type\n\n\nProjection of the query depends on the output event types such as, \ncurrent\n and \nexpired\n event types.\n By default all queries produce \ncurrent\n events and only queries with windows produce \nexpired\n events \n when events expire from the window.\n By controlling the event types outputted you will be able to manipulate the output of the query. \n\n\nNote!\n Controlling the output event types will not alter the execution within the query and will not affect the correctness of the query execution.  \n\n\nThe following keywords can be used with the output stream to manipulate output. \n\n\n\n\n\n\n\n\nOutput event types\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncurrent events\n\n\nOutput events when incoming events arrives to the query. \n This is the default functionality of no output event types is specified.\n\n\n\n\n\n\nexpired events\n\n\nOutput events when events expires from the window.\n\n\n\n\n\n\nall events\n\n\nOutput events when incoming events arrives to the query and \n when events expires from the window.\n\n\n\n\n\n\n\n\nThe output event type keyword can be used between \ninsert\n and \ninto\n as given in the following example.\n\n\nExample\n\n\nDelay all events in a stream by 1 minute.  \n\n\nfrom\n \nTempStream\n#\nwindow\n.\ntime\n(\n1\n \nmin\n)\n\n\nselect\n \n*\n\n\ninsert\n \nexpired\n \nevents\n \ninto\n \nDelayedTempStream\n\n\n\n\n\n\nAggregate functions\n\u00b6\n\n\nAggregate functions perform aggregate calculations in the query. \nWhen a window is defined the aggregation will get restricted within that window and if no window is provided they will aggregate from the start of the Siddhi application.\n\n\nSyntax\n\n\nfrom\n \n<\ninput\n \nstream\n>#\nwindow\n.\n<\nwindow\n \nname\n>\n(\n<\nparameter\n>\n,\n \n<\nparameter\n>\n,\n \n...\n \n)\n\n\nselect\n \n<\naggregate\n \nfunction\n>\n(\n<\nparameter\n>\n,\n \n<\nparameter\n>\n,\n \n...\n \n)\n \nas\n \n<\nattribute\n \nname\n>\n,\n \n<\nattribute2\n \nname\n>\n,\n \n...\n\n\ninsert\n \ninto\n \n<\noutput\n \nstream\n>\n;\n\n\n\n\n\n\nAggregate Parameters\n\n\nAggregate parameters can be attributes, constant values, results of other functions or aggregates, results of mathematical or logical expressions or time parameters. \nAggregate parameters depending on the Aggregation being called.\n\n\nExample\n\n\nThe following query calculates the average of \ntemp\n attribute of \nTempStream\n stream for the last \n10 minutes and emit it as `avgTemp``.\n\n\nfrom\n \nTempStream\n#\nwindow\n.\ntime\n(\n10\n \nmin\n)\n\n\nselect\n \navg\n(\ntemp\n)\n \nas\n \navgTemp\n,\n \nroomNo\n,\n \ndeviceID\n\n\ninsert\n \ninto\n \nAvgTempStream\n;\n\n\n\n\n\n\nFollowing are some inbuilt aggregation functions shipped with Siddhi, for more aggregation functions refer execution \nextensions\n. \n\n\n\n\navg\n\n\nsum\n\n\nmax\n\n\nmin\n\n\ncount\n\n\ndistinctCount\n\n\nmaxForever\n\n\nminForever\n\n\nstdDev\n\n\n\n\nGroup By\n\u00b6\n\n\nGroup By allows you to group the aggregate based on specified attributes.\n\n\nSyntax\n\n\nfrom\n \n<\ninput\n \nstream\n>#\nwindow\n.\n<\nwindow\n \nname\n>\n(...)\n\n\nselect\n \n<\naggregate\n \nfunction\n>\n(\n \n<\nparameter\n>\n,\n \n<\nparameter\n>\n,\n \n...)\n \nas\n \n<\nattribute1\n \nname\n>\n,\n \n<\nattribute2\n \nname\n>\n,\n \n...\n\n\ngroup\n \nby\n \n<\nattribute1\n \nname\n>\n,\n \n<\nattribute2\n \nname\n>\n \n...\n\n\ninsert\n \ninto\n \n<\noutput\n \nstream\n>\n;\n\n\n\n\n\n\nExample\n\nThe following query calculates the average temperature per \nroomNo\n and \ndeviceID\n combination \nfor sliding 10 minutes time from the \nTempStream\n stream.\n\n\nfrom\n \nTempStream\n#\nwindow\n.\ntime\n(\n10\n \nmin\n)\n\n\nselect\n \navg\n(\ntemp\n)\n \nas\n \navgTemp\n,\n \nroomNo\n,\n \ndeviceID\n\n\ngroup\n \nby\n \nroomNo\n,\n \ndeviceID\n\n\ninsert\n \ninto\n \nAvgTempStream\n;\n\n\n\n\n\n\nHaving\n\u00b6\n\n\nHaving allows you to filter events after processing the \nselect\n statement,\n this will be helpful to filter the aggregation output.\n\n\nSyntax\n\n\nfrom\n \n<\ninput\n \nstream\n>#\nwindow\n.\n<\nwindow\n \nname\n>\n(\n \n...\n \n)\n\n\nselect\n \n<\naggregate\n \nfunction\n>\n(\n \n<\nparameter\n>\n,\n \n<\nparameter\n>\n,\n \n...)\n \nas\n \n<\nattribute1\n \nname\n>\n,\n \n<\nattribute2\n \nname\n>\n,\n \n...\n\n\ngroup\n \nby\n \n<\nattribute1\n \nname\n>\n,\n \n<\nattribute2\n \nname\n>\n \n...\n\n\nhaving\n \n<\ncondition\n>\n\n\ninsert\n \ninto\n \n<\noutput\n \nstream\n>\n;\n\n\n\n\n\n\nExample\n\n\nThe following query calculates the average temperature per room for the last 10 minutes, and alerts if it exceeds 30 degrees.\n\n\nfrom\n \nTempStream\n#\nwindow\n.\ntime\n(\n10\n \nmin\n)\n\n\nselect\n \navg\n(\ntemp\n)\n \nas\n \navgTemp\n,\n \nroomNo\n\n\ngroup\n \nby\n \nroomNo\n\n\nhaving\n \navgTemp\n \n>\n \n30\n\n\ninsert\n \ninto\n \nAlertStream\n;\n\n\n\n\n\n\nOutput rate limiting\n\u00b6\n\n\nOutput rate limiting allows queries to emit events periodically based on the condition specified.\n\n\nPurpose\n\n\nThis allows you to limit the output to avoid overloading following executions and to remove unnecessary information.\n\n\nSyntax\n\n\nThe following is the syntax of an output rate limiting configuration.\n\n\nfrom\n \n<\ninput\n \nstream\n>\n \n...\n\n\nselect\n \n<\nattribute\n \nname\n>\n,\n \n<\nattribute\n \nname\n>\n,\n \n...\n\n\noutput\n \n<\nrate\n \nlimiting\n \nconfiguration\n>\n\n\ninsert\n \ninto\n \n<\noutput\n \nstream\n>\n\n\n\n\n\n\nThree type of output rate limiting configuration are available, such as \n\n\n\n\n\n\n\n\nRate limiting configuration\n\n\nSyntax\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nBased on time\n\n\n<output event> every <time interval>\n\n\nOutput \n<output event>\n for every given \n<time interval>\n time interval.\n\n\n\n\n\n\nBased on number of events\n\n\n<output event> every <event interval> events\n\n\nOutput \n<output event>\n for every \n<event interval>\n number of events.\n\n\n\n\n\n\nSnapshot based output\n\n\nsnapshot every <time interval>\n\n\nOutput all events in the window (or the last event if no window is defined in the query) for every given \n<time interval>\n time interval.\n\n\n\n\n\n\n\n\nHere the \n<output event>\n specifies which event(s) should be emitted as the output of the query. \nThe possible values are as follows:\n\n \nfirst\n : Only the first event processed by the query in the specified time interval/sliding window is emitted.\n\n \nlast\n : Only the last event processed by the query in the specified time interval/sliding window is emitted.\n* \nall\n : All the events processed by the query in the specified time interval/sliding window are emitted. \nWhen no \n<output event>\n is defined \nall\n will be used as default.\n\n\nExamples\n\n\n\n\n\n\nEmitting events based on number of events\n\n\nHere the events are emitted every time the specified number of events arrive. You can also specify whether to emit only the first event, last event, or all events out of the events that arrived.\n\n\nIn this example, the last temperature per sensor is emitted for every 10 events.\n\n\n\n\n\n\nfrom\n \nTempStreamselect\n \n\nselect\n \ntemp\n,\n \ndeviceID\n\n\ngroup\n \nby\n \ndeviceID\n\n\noutput\n \nlast\n \nevery\n \n10\n \nevents\n\n\ninsert\n \ninto\n \nLowRateTempStream\n;\n\n\n\n\n\n\n\n\n\n\nEmitting events based on time\n\n\nHere events are emitted for every predefined time interval. You can also specify whether to to emit only the first event, last event, or all events out of the events that arrived during the specified time interval.\n\n\nIn this example, emits all temperature events every 10 seconds    \n\n\n\n\n\n\nfrom\n \nTempStreamoutput\n \n\noutput\n \nevery\n \n10\n \nsec\n\n\ninsert\n \ninto\n \nLowRateTempStream\n;\n\n\n\n\n\n\n\n\n\n\nEmitting a periodic snapshot of events\n\n\nThis method works best with windows. When an input stream is connected to a window, snapshot rate limiting emits all the current events that have arrived and do not have corresponding expired events for every predefined time interval. \nIf the input stream is not connected to a window, only the last current event for each predefined time interval is emitted.\n\n\nThe following query emits snapshot of the events in a time window of 5 seconds every 1 second. \n\n\n\n\n\n\nfrom\n \nTempStream\n#\nwindow\n.\ntime\n(\n5\n \nsec\n)\n\n\noutput\n \nsnapshot\n \nevery\n \n1\n \nsec\n\n\ninsert\n \ninto\n \nSnapshotTempStream\n;\n\n\n\n\n\n\nTables\n\u00b6\n\n\nA table is a stored version of an stream or a table of events. It's schema is defined via the \ntable definition\n thats\nquite similar to a stream definition. These events are by default stored \n\nin-memory\n but Siddhi also provides store extension to work with data/events stored in various data stores through the \ntable abstraction.\n\n\nPurpose\n\n\nTables allow Siddhi to work with stored events. By defining a schema to table Siddhi enables them to be processed at queries using their defined attributes with the streaming data, and also interactively query the state of the stored events in the table.\n\n\nSyntax\n\n\nThe following is the syntax for defining a new table.\n\n\ndefine\n \nstream\n \n<\nstream\n \nname\n>\n \n(\n<\nattribute\n \nname\n>\n \n<\nattribute\n \ntype\n>\n,\n \n<\nattribute\n \nname\n>\n \n<\nattribute\n \ntype\n>\n,\n \n...\n \n);\n\n\n\n\n\n\nExample\n\n\nThe following creates a table named \nRoomTypeTable\n with the attributes \nroomNo\n with \nint\n type, \ntype\n with \nstring\n type.\n\n\ndefine\n \ntable\n \nRoomTypeTable\n \n(\n \nroomNo\n \nint\n,\n \ntype\n \nstring\n \n);\n\n\n\n\n\n\nPrimary Keys and Indexes\n\n\nEvent tables can be configured with primary keys to avoid the duplication of data, and indexes for fast event access.\n\n\nPrimary keys are configured by including the \n@PrimaryKey\n annotation to the table configuration. The combined value of the primary key attribute should be unique for each entry saved in the table. This ensures that entries in the table are not duplicated.\n\n\nIndexes are configured by including the \n@Index\n annotation within the event table configuration. Each event table configuration can have only one \n@Index\n annotation. However, multiple attributes can be specified as index attributes via a single annotation. When the \n@Index\n annotation is defined, multiple entries can be stored for a given key in the table. Indexes can be configured together with primary keys. \n\n\nExamples\n\n\n\n\nConfiguring primary keys\nThe following query creates an event table with the \nsymbol\n attribute defined as the primary key. Therefore, each entry in this table should have a unique value for the \nsymbol\n attribute.\n\n\n\n\n@\nPrimaryKey\n(\n'symbol'\n)\n\n\ndefine\n \ntable\n \nStockTable\n \n(\nsymbol\n \nstring\n,\n \nprice\n \nfloat\n,\n \nvolume\n \nlong\n);\n\n\n\n\n\n\n\n\nConfiguring indexes\n\n\n\n\nThe following query creates an indexed event table named \nRoomTypeTable\n with the attributes \nroomNo\n (as an \nINT\n attribute) and \ntype\n (as a \nSTRIN\nG attribute). All entries in the table are to be indexed by the \nroomNo\n attribute.\n\n\n@\nIndex\n(\n'roomNo'\n)\n\n\ndefine\n \ntable\n \nRoomTypeTable\n \n(\nroomNo\n \nint\n,\n \ntype\n \nstring\n);\n\n\n\n\n\n\nJoin\n\u00b6\n\n\nSyntax\n\n\nfrom\n \n<\ninput\n \nstream\n \nname\n>#\nwindow\n.\nlength\n(\n1\n)\n \njoin\n \n<\ntable_name\n>\n\n    \non\n \n<\ninput\n \nstream\n \nname\n>\n.\n<\nattribute\n \nname\n>\n \n<\ncondition\n>\n \n<\ntable_name\n>\n.\n<\ntable\n \nattribute\n \nname\n>\n\n\nselect\n \n<\ninput\n \nstream\n \nname\n>\n.\n<\nattribute\n \nname\n>\n,\n \n<\ntable_name\n>\n.\n<\ntable\n \nattribute\n \nname\n>\n,\n \n...\n\n\ninsert\n \ninto\n \n<\noutput\n \nstream\n \nname\n>\n\n\n\n\n\n\nAt the time of joining, the event table should not be associated with window operations because an event table is not an active construct. Two event tables cannot be joined with each other due to the same reason.\n\n\nPurpose\n\n\nTo allow a stream to retrieve information from an event table.\n\n\nParameters\n\n\nExample\n\n\nThe following query performs a join to update the room number of the events in the \nTempStream\n stream with that of the corresponding events in the \nRoomTypeTable\n event table, and then inserts the updated events into the \nEnhancedTempStream\n stream.\n\n\ndefine\n \ntable\n \nRoomTypeTable\n \n(\nroomNo\n \nint\n,\n \ntype\n \nstring\n);\n\n\ndefine\n \nstream\n \nTempStream\n \n(\ndeviceID\n \nlong\n,\n \nroomNo\n \nint\n,\n \ntemp\n \ndouble\n);\n\n\n\nfrom\n \nTempStream\n \njoin\n \nRoomTypeTable\n\n    \non\n \nRoomTypeTable\n.\nroomNo\n \n==\n \nTempStream\n.\nroomNo\n\n\nselect\n \ndeviceID\n,\n \nRoomTypeTable\n.\nroomNo\n \nas\n \nroomNo\n,\n \ntype\n,\n \ntemp\n\n\ninsert\n \ninto\n \nEnhancedTempStream\n;\n\n\n\n\n\n\nSupported Event Table Operators\n\u00b6\n\n\nThe following event table operators are supported for Siddhi.\n\n\nInsert into\n\u00b6\n\n\nSyntax\n\n\nfrom\n \n<\ninput\n \nstream\n \nname\n>\n \n\nselect\n \n<\nattribute\n \nname\n>\n,\n \n<\nattribute\n \nname\n>\n,\n \n...\n\n\ninsert\n \ninto\n \n<\ntable\n \nname\n>\n\n\n\n\n\n\nTo insert only the specified output event category, use the \ncurrent events\n, \nexpired events\n or the \nall events\n keyword between \ninsert\n and \ninto\n keywords. For more information, see Output Event Categories.\n\n\nPurpose\n\n\nTo store filtered events in a specific event table.\n\n\nParameters\n\n\n\n\n\n\ninput stream name\n: The input stream from which the events are taken to be stored in the event table.\n\n\n\n\n\n\nattribute name\n: Attributes of the chosen events that are selected to be saved in the event table.\n\n\n\n\n\n\ntable name\n: The name of the event table in which the events should be saved.\n\n\n\n\n\n\nExample\n\n\nThe following query inserts all the temperature events from the \nTempStream\n event stream to the \nTempTable\n event table.\n\n\nfrom\n \nTempStream\n\n\nselect\n \n*\n\n\ninsert\n \ninto\n \nTempTable\n;\n\n\n\n\n\n\nDelete\n\u00b6\n\n\nSyntax\n\n\nfrom\n \n<\ninput\n \nstream\n \nname\n>\n \n\nselect\n \n<\nattribute\n \nname\n>\n,\n \n<\nattribute\n \nname\n>\n,\n \n...\n\n\ndelete\n \n<\ntable\n \nname\n>\n\n    \non\n \n<\ncondition\n>\n\n\n\n\n\n\nThe \ncondition\n element specifies the basis on which events are selected to be deleted. When specifying this condition, the attribute names should be referred to with the table name.\nTo delete only the specified output category, use the \ncurrent events\n, \nexpired events\n or the \nall events\n keyword. For more information, see Output Event Categories.\n\n\nPurpose\n\n\nTo delete selected events that are stored in a specific event table.\n\n\nParameters\n\n\n\n\n\n\ninput stream name\n: The input stream that is the source of the events stored in the event table.\n\n\n\n\n\n\nattribute name\n: Attributes to which the given condition is applied in order to filter the events to be deleted.\n\n\n\n\n\n\ntable name\n: The name of the event table from which the filtered events are deleted.\n\n\n\n\n\n\ncondition\n: The condition based on which the events to be deleted are selected.\n\n\n\n\n\n\nExample\n\n\nThe following query deletes all the entries in the \nRoomTypeTable\n event table that have a room number that matches the room number in any event in the \nDeleteStream\n event stream.\n\n\ndefine\n \ntable\n \nRoomTypeTable\n \n(\nroomNo\n \nint\n,\n \ntype\n \nstring\n);\n\n\ndefine\n \nstream\n \nDeleteStream\n \n(\nroomNumber\n \nint\n);\n\n\n\nfrom\n \nDeleteStream\n\n\ndelete\n \nRoomTypeTable\n\n    \non\n \nRoomTypeTable\n.\nroomNo\n \n==\n \nroomNumber\n;\n\n\n\n\n\n\nUpdate\n\u00b6\n\n\nSyntax\n\n\nfrom\n \n<\ninput\n \nstream\n \nname\n>\n \n\nselect\n \n<\nattribute\n \nname\n>\n \nas\n \n<\ntable\n \nattribute\n \nname\n>\n,\n \n<\nattribute\n \nname\n>\n \nas\n \n<\ntable\n \nattribute\n \nname\n>\n,\n \n...\n\n\nupdate\n \n<\ntable\n \nname\n>\n\n    \non\n \n<\ncondition\n>\n\n\n\n\n\n\nThe \ncondition\n element specifies the basis on which events are selected to be updated. When specifying this condition, the attribute names should be referred to with the table name.\nTo update only the specified output category, use the \ncurrent events\n, \nexpired events\n or the \nall events\n keyword. For more information, see Output Event Categories.\n\n\nPurpose\n\n\nTo update selected events in an event table.\n\n\nParameters\n\n\n\n\n\n\ninput stream name\n: The input stream that is the source of the events stored in the event table.\n\n\n\n\n\n\nattribute name\n: Attributes to which the given \ncondition\n is applied in order to filter the events to be updated.\n\n\n\n\n\n\ntable name\n: The name of the event table in which the filtered events should be updated.\n\n\n\n\n\n\ncondition\n: The condition based on which the events to be updated are selected.\n\n\n\n\n\n\nExample\n\n\nThe following query updates room type of all the events in the \nRoomTypeTable\n event table that have a room number that matches the room number in any event in the \nUpdateStream\n event stream.\n\n\ndefine\n \ntable\n \nRoomTypeTable\n \n(\nroomNo\n \nint\n,\n \ntype\n \nstring\n);\n\n\ndefine\n \nstream\n \nUpdateStream\n \n(\nroomNumber\n \nint\n,\n \nroomType\n \nstring\n);\n\n\n\nfrom\n \nUpdateStream\n\n\nselect\n \nroomType\n \nas\n \ntype\n\n\nupdate\n \nRoomTypeTable\n\n    \non\n \nRoomTypeTable\n.\nroomNo\n \n==\n \nroomNumber\n;\n\n\n\n\n\n\nInsert Overwrite\n\u00b6\n\n\nSyntax\n\n\nfrom\n \n<\ninput\n \nstream\n \nname\n>\n \n\nselect\n \n<\nattribute\n \nname\n>\n \nas\n \n<\ntable\n \nattribute\n \nname\n>\n,\n \n<\nattribute\n \nname\n>\n \nas\n \n<\ntable\n \nattribute\n \nname\n>\n,\n \n...\n\n\ninsert\n \noverwrite\n \n<\ntable\n \nname\n>\n\n    \non\n \n<\ncondition\n>\n\n\n\n\n\n\nThe \ncondition\n element specifies the basis on which events are selected to be inserted or overwritten. When specifying this condition, the attribute names should be referred to with the table name.\nWhen specifying the \ntable attribute\n name, the attributes should be specified with the same name specified in the event table, allowing Siddhi to identify the attributes that need to be updated/inserted in the event table.\n\n\nPurpose\n\n\nParameters\n\n\n\n\n\n\ninput stream name\n: The input stream that is the source of the events stored in the event table.\n\n\n\n\n\n\nattribute name\n: Attributes to which the given \ncondition\n is applied in order to filter the events to be inserted or over-written.\n\n\n\n\n\n\ntable name\n: The name of the event table in which the filtered events should be inserted or over-written.\n\n\n\n\n\n\ncondition\n : The condition based on which the events to be inserted or over-written are selected.\n\n\n\n\n\n\nExample\n\n\nThe following query searches for events in the \nUpdateTable\n event table that have room numbers that match the same in the \nUpdateStream\n stream. When such events are founding the event table, they are updated. When a room number available in the stream is not found in the event table, it is inserted from the stream.\n\n\n```sql\n define table RoomTypeTable (roomNo int, type string);\n define stream UpdateStream (roomNumber int, roomType string);\n\n\nfrom UpdateStream\n select roomNumber as roomNo, roomType as type\n insert overwrite RoomTypeTable\n     on RoomTypeTable.roomNo == roomNo;\n ```\n\n\nIn\n\u00b6\n\n\nSyntax\n\n\n<\ncondition\n>\n \nin\n \n<\ntable\n \nname\n>\n\n\n\n\n\n\nThe \ncondition\n element specifies the basis on which events are selected to be inserted or overwritten. When specifying this condition, the attribute names should be referred to with the table name.\n\n\nPurpose\n\n\nParameters\n\n\nExample\n\n\ndefine\n \ntable\n \nServerRoomTable\n \n(\nroomNo\n \nint\n);\n\n\ndefine\n \nstream\n \nTempStream\n \n(\ndeviceID\n \nlong\n,\n \nroomNo\n \nint\n,\n \ntemp\n \ndouble\n);\n\n\n\nfrom\n \nTempStream\n[\nServerRoomTable\n.\nroomNo\n \n==\n \nroomNo\n \nin\n \nServerRoomTable\n]\n\n\ninsert\n \ninto\n \nServerTempStream\n;\n\n\n\n\n\n\nTime based aggregation\n\u00b6\n\n\nTime-based aggregation involves obtaining aggregate attribute values (i.e., sum, average, min, max etc.) for a specified time period.\n\n\nCalculating and storing time-based aggregated values\n\u00b6\n\n\nThis section explains how to write Siddhi queries to calculate aggregate values for specific time periods as required.\n\n\nSyntax\n\n\n@\nstore\n(\ntype\n=\n\"<DATABASE_TYPE>\"\n)\n\n\ndefine\n \naggregation\n \n<\naggregatorName\n>\n\n\nfrom\n \n<\nInputStreamName\n>\n\n\nselect\n \n<\nattributeName\n>\n,\n \n<\naggregate_function\n>\n(\nattributeName\n)\n \nas\n \n<\nattributeName\n>\n,\n \n<\naggregate_function\n>\n(\nattributeName\n)\n \nas\n \n<\nattributeName\n>\n \n...\n\n    \ngroup\n \nby\n \n<\nattributeName\n>\n\n    \naggregate\n \nby\n \ntimestamp\n \nevery\n \n<\ntime_period\n>\n;\n\n\n\n\n\n\nThe above syntax includes the following:\nItem|Description\n---------|---------\n\n@store\n|This annotation is used to refer to the data source where the events for which aggregate values are to be calculated are stored.\n\ndefine aggregation\n|This specifies a unique name for the aggregation\n\ngroup by\n|The attribute by which the calculated aggregate values are grouped. Specifying an attribute to group by is optional. When an attribute is specified, the aggregate values are calculated for the required time periods per value for the specified attribute. If no attribute is specified, all the events are aggregated together.\n\naggregate by timestamp\n|The time period for which the aggregate values are calculated. This is an optional parameter. If the time period is determined by an external timestamp (i.e., the timestamp specified as the value for the \n_timestamp\n attribute in the event), specific timestamps must be specified in the query with the \nwithin\n operator using supported formats (i.e., \n<yyyy>-<MM>-<dd>\n, \n<HH>:<mm>:<ss>\n, \n<Z>\n (if time is not in GMT), and \n<yyyy>-<MM>-<dd> <HH>:<mm>:<ss>\n (if time is in GMT). If the time period is to be determined based on the system time, you can specify the time duration for which the aggregate values should be calculated (e.g., \naggregate every sec...year\n calculates aggregate values for the last second, minute, hour, day, month and year in a sliding manner.).\n\n\nExample\n\n\n@\nstore\n(\ntype\n=\n\"rdbms\"\n)\n\n\ndefine\n \naggregation\n \ntestAggregator\n\n\nfrom\n \ntradesStream\n\n\nselect\n \nsymbol\n,\n \navg\n(\nprice\n)\n \nas\n \navgPrice\n,\n \nsum\n(\nprice\n)\n \nas\n \ntotal\n\n    \ngroup\n \nby\n \nsymbol\n\n    \naggregate\n \nby\n \ntimestamp\n \nevery\n \nsec\n...\nyear\n;\n\n\n\n\n\n\nIn this query, an aggregator named \ntestAggregator\ncalculates the average price and the sum of prices of the events that arrive at the \ntradesStream\n stream every second. These average and total are calculated per symbol, and in each second, the average and sum relevant for the last second, minute, hour, day, month, and year are output, and stored in the RDBMS database.\n\n\nRetrieving aggregate values\n\u00b6\n\n\nThis section explain how to retrieve aggregate values that are already calculated and persisted in the system.\n\nSyntax\n\n\ndefine\n \nstream\n \n`\nInputStreamName\n`\n \n(\n<\nattributeName\n>\n \n<\nATTRIBUTE_TYPE\n>\n,\n \n<\nattributeName\n>\n \n<\nATTRIBUTE_TYPE\n>\n \n...);\n\n\n\nfrom\n \nInputStreamName\n \nas\n \nb\n \njoin\n \n<\nAGGREGATION_NAME\n>\n \nas\n \na\n\n\non\n \na\n.\nsymbol\n \n==\n \nb\n.\nsymbol\n \n\nwithin\n \n\"<START_TIME>\"\n,\n \n\"<END_TIME>\"\n \n\nper\n \n\"<TIME_PERIOD>\"\n \n\nselect\n \na\n.\n<\nattributeName\n>\n,\n \na\n.\n<\nattributeName\n>\n,\n \na\n.\n<\nattributeName\n>\n \n\ninsert\n \ninto\n \nfooBar\n;\n\n\n\n\n\n\nThe above syntax includes the following:\nItem|Description\n---------|---------\n\nwithin \"<START_TIME>\", \"<END_TIME>\"\n|This allows you to specify the time interval for which the aggregate values need to be retrieved by specifying the timestamps for the start time and the end time.\n\nper \"<TIME_PERIOD>\"\n|This specifies the time period by which the aggregate values must be grouped. e.g., If you specify \ndays\n, the retrieved aggregate vlaues are displayed for each day within the selected time interval.\n\n\nExample\n\n\ndefine\n \nstream\n \nbarStream\n \n(\nsymbol\n \nstring\n,\n \nvalue\n \nint\n);\n\n\n\nfrom\n \nbarStream\n \nas\n \nb\n \njoin\n \ntestAggregator\n \nas\n \na\n\n\non\n \na\n.\nsymbol\n \n==\n \nb\n.\nsymbol\n \n\nwithin\n \n\"2014-02-15 00:00:00 +05:30\"\n,\n \n\"2014-03-16 00:00:00 +05:30\"\n \n\nper\n \n\"days\"\n \n\nselect\n \na\n.\nsymbol\n,\n \na\n.\ntotal\n,\n \na\n.\navgPrice\n \n\ninsert\n \ninto\n \nfooBar\n;\n\n\n\n\n\n\nThis query performs a join to match events arriving at the \nbarStream\n stream with the events calculated and persisted by the \ntestAggregator\n aggregator. If the value for the \nsymbol\n attribute of an event that arrives in an input stream is the same as that of an event persisted by the aggregator, the aggregated values already calculated for it for the time period between \n2014-02-15 00:00:00 +05:30\n and \n2014-03-16 00:00:00 +05:30\n are retrieved. The aggregate values (i.e., average and the total in this scenario) for the last day is retrieved. The output events are inserted into the \nFooBar\n output stream.\n\n\nJoins\n\u00b6\n\n\nJoin allows two event streams to be merged based on a condition. In order to carry out a join, each stream should be connected to a window. If no window is specified, a window of zero length (\n#window.length(0)\n) is assigned to the input event stream by default. During the joining process each incoming event on each stream is matched against all the events in the other input event stream window based on the given condition. An output event is generated for all the matching event pairs.\n\n\nSyntax\n\nThe syntax for a join is as follows:\n\n\nfrom\n \n<\ninput\n \nstream\n \nname\n>\n[\n<\nfilter\n \ncondition\n>\n]\n#\nwindow\n.\n<\nwindow\n \nname\n>\n(\n<\nparameter\n>\n,\n \n...\n \n)\n \n{\nunidirectional\n}\n \n{\nas\n \n<\nreference\n>\n}\n\n         \njoin\n \n<\ninput\n \nstream\n \nname\n>#\nwindow\n.\n<\nwindow\n \nname\n>\n(\n<\nparameter\n>\n,\n  \n...\n \n)\n \n{\nunidirectional\n}\n \n{\nas\n \n<\nreference\n>\n}\n\n    \non\n \n<\njoin\n \ncondition\n>\n\n    \nwithin\n \n<\ntime\n \ngap\n>\n\n\nselect\n \n<\nattribute\n \nname\n>\n,\n \n<\nattribute\n \nname\n>\n,\n \n...\n\n\ninsert\n \ninto\n \n<\noutput\n \nstream\n \nname\n>\n\n\n\n\n\n\nExample\n\n\ndefine\n \nstream\n \nTempStream\n(\ndeviceID\n \nlong\n,\n \nroomNo\n \nint\n,\n \ntemp\n \ndouble\n);\n\n\ndefine\n \nstream\n \nRegulatorStream\n(\ndeviceID\n \nlong\n,\n \nroomNo\n \nint\n,\n \nisOn\n \nbool\n);\n\n\n\nfrom\n \nTempStream\n[\ntemp\n \n>\n \n30\n.\n0\n]\n#\nwindow\n.\ntime\n(\n1\n \nmin\n)\n \nas\n \nT\n\n  \njoin\n \nRegulatorStream\n[\nisOn\n \n==\n \nfalse\n]\n#\nwindow\n.\nlength\n(\n1\n)\n \nas\n \nR\n\n  \non\n \nT\n.\nroomNo\n \n==\n \nR\n.\nroomNo\n\n\nselect\n \nT\n.\nroomNo\n,\n \nR\n.\ndeviceID\n,\n \n'start'\n \nas\n \naction\n\n\ninsert\n \ninto\n \nRegulatorActionStream\n;\n\n\n\n\n\n\nWSO2 Siddhi currently supports the following types of joins.\n\n\nLeft Outer Join\n\u00b6\n\n\nOuter join allows two event streams to be merged based on a condition. However, it returns all the events of left stream even if there are no matching events in the right stream. Here each stream should be associated with a window. During the joining process, each incoming event of each stream is matched against all the events in the other input event stream window based on the given condition. Incoming events of the right stream are matched against all events in the left event stream window based on the given condition. An output event is generated for all the matching event pairs. An output event is generated for incoming events of the left stream even if there are no matching events in right stream.\n\n\nExample\n\nThe following query generates output events for all the events in the \nstockStream\n stream whether there is a match for the symbol in the \ntwitterStream\n stream or not.\n\n\nfrom\n \nstockStream\n#\nwindow\n.\nlength\n(\n2\n)\n \n\nleft\n \nouter\n \njoin\n \ntwitterStream\n#\nwindow\n.\nlength\n(\n1\n)\n\n\non\n \nstockStream\n.\nsymbol\n==\n \ntwitterStream\n.\nsymbol\n\n\nselect\n \nstockStream\n.\nsymbol\n \nas\n \nsymbol\n,\n \ntwitterStream\n.\ntweet\n,\n \nstockStream\n.\nprice\n\n\ninsert\n \nall\n \nevents\n \ninto\n \noutputStream\n \n;\n\n\n\n\n\n\nRight Outer Join\n\u00b6\n\n\nThis is similar to left outer join. It returns all the events of the right stream even if there are no matching events in the left stream. Incoming events of the left stream are matched against all events in the right event stream window based on the given condition. An output event is generated for all the matching event pairs. An output event is generated for incoming events of the right stream even if there are no matching events in left stream.\n\n\ne.g., The following generates output events for all the incoming events of each stream whether there is a match for the symbol in the other stream or not.\n\n\nFull Outer Join\n\u00b6\n\n\nThe full outer join combines the results of left outer join and right outer join. An output event is generated for each incoming event even if there are no matching events in the other stream.\n\ne.g., The following generates output events for all the incoming events of each stream whether there is a match for the symbol in the other stream or not.\n\n\nfrom\n \nstockStream\n#\nwindow\n.\nlength\n(\n2\n)\n\n\nfull\n \nouter\n \njoin\n \ntwitterStream\n#\nwindow\n.\nlength\n(\n1\n)\n\n\non\n \nstockStream\n.\nsymbol\n==\n \ntwitterStream\n.\nsymbol\n\n\nselect\n \nstockStream\n.\nsymbol\n \nas\n \nsymbol\n,\n \ntwitterStream\n.\ntweet\n,\n \nstockStream\n.\nprice\n\n\ninsert\n \nall\n \nevents\n \ninto\n \noutputStream\n \n;\n\n\n\n\n\n\nFull Outer Join\n\u00b6\n\n\nThe full outer join combines the results of left outer join and right outer join. An output event is generated for each incoming event even if there are no matching events in the other stream.\n\n\ne.g., The following generates output events for all the incoming events of each stream whether there is a match for the symbol in the other stream or not.\n\n\nfrom stockStream#window.length(2)\nfull outer join twitterStream#window.length(1)\non stockStream.symbol== twitterStream.symbol\nselect stockStream.symbol as symbol, twitterStream.tweet, stockStream.price\ninsert all events into outputStream ;\n\n\n\nPatterns and Sequences\n\u00b6\n\n\nPatterns and sequences allow event streams to be correlated over time and detect event patterns based on the order of event arrival.\n\n\nPatterns\n\u00b6\n\n\nPattern allows event streams to be correlated over time and detect event patterns based on the order of event arrival. With pattern there can be other events in between the events that match the pattern condition. It creates state machines to track the states of the matching process internally. Pattern can correlate events over multiple input streams or over the same input stream. Therefore, each matched input event need to be referenced so that that it can be accessed for future processing and output generation.\n\n\nSyntax\n\nThe following is the syntax for a pattern configuration:\n\n\nfrom\n \n{\nevery\n}\n \n<\ninput\n \nevent\n \nreference\n>=<\ninput\n \nstream\n \nname\n>\n[\n<\nfilter\n \ncondition\n>\n]\n \n->\n \n{\nevery\n}\n \n<\ninput\n \nevent\n \nreference\n>=<\ninput\n \nstream\n \nname\n>\n[\n<\nfilter\n \ncondition\n>\n]\n \n->\n \n...\n        \nwithin\n \n<\ntime\n \ngap\n>\n\n\nselect\n \n<\ninput\n \nevent\n \nreference\n>\n.\n<\nattribute\n \nname\n>\n,\n \n<\ninput\n \nevent\n \nreference\n>\n.\n<\nattribute\n \nname\n>\n,\n \n...\n\n\ninsert\n \ninto\n \n<\noutput\n \nstream\n \nname\n>\n\n\n\n\n\n\nExample\n\n\nThe following query sends an alert if the temperature of a room increases by 5 degrees within 10 min.\n\n\nfrom\n \nevery\n(\n \ne1\n=\nTempStream\n \n)\n \n->\n \ne2\n=\nTempStream\n[\ne1\n.\nroomNo\n==\nroomNo\n \nand\n \n(\ne1\n.\ntemp\n \n+\n \n5\n)\n \n<=\n \ntemp\n \n]\n\n    \nwithin\n \n10\n \nmin\n\n\nselect\n \ne1\n.\nroomNo\n,\n \ne1\n.\ntemp\n \nas\n \ninitialTemp\n,\n \ne2\n.\ntemp\n \nas\n \nfinalTemp\n\n\ninsert\n \ninto\n \nAlertStream\n;\n\n\n\n\n\n\nWSO2 Siddhi supports the following types of patterns:\n\n\n\n\nCounting patterns\n\n\nLogical patterns\n\n\n\n\nCounting Patterns\n\u00b6\n\n\nCounting patterns allow multiple events that may or may not have been received in a sequential order based on the same matching condition.\n\n\nSyntax\n\n\nThe number of events matched can be limited via postfixes as explained below.\n\n\n\n\n\n\n\n\nPostfix\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\n\n\nn1:n2\n\n\nThis matches \nn1\n to \nn2\n events.\n\n\n1:4\n matches 1 to 4 events.\n\n\n\n\n\n\n\n\n<n:>\n\n\nThis matches \nn\n or more events.\n\n\n<2:>\n matches 2 or more events.\n\n\n\n\n\n\n\n\n<:n>\n\n\nThis matches up to \nn\n events.\n\n\n<:5>\n matches up to 5 events.\n\n\n\n\n\n\n\n\n<n>\n\n\nThis matches exactly \nn\n events.\n\n\n<5>\n matches exactly 5 events.\n\n\n\n\n\n\n\n\n\n\nSpecific occurrences of the events that should be matched based on count limits are specified via key words and numeric values within square brackets as explained with the examples given below.\n\n\n\n\ne1[3]\n refers to the 3rd event.\n\n\ne1[last]\n refers to the last event.\n\n\ne1[last - 1]\n refers to the event before the last event.\n\n\n\n\nExample\n\nThe following query calculates the temperature difference between two regulator events.\n\n\ndefine\n \nstream\n \nTempStream\n(\ndeviceID\n \nlong\n,\n \nroomNo\n \nint\n,\n \ntemp\n \ndouble\n);\n\n\ndefine\n \nstream\n \nRegulatorStream\n(\ndeviceID\n \nlong\n,\n \nroomNo\n \nint\n,\n \ntempSet\n \ndouble\n,\n \nisOn\n \nbool\n);\n\n\n\nfrom\n \nevery\n(\n \ne1\n=\nRegulatorStream\n)\n \n->\n \ne2\n=\nTempStream\n[\ne1\n.\nroomNo\n==\nroomNo\n]\n<\n1\n:\n>\n \n->\n \ne3\n=\nRegulatorStream\n[\ne1\n.\nroomNo\n==\nroomNo\n]\n\n\nselect\n \ne1\n.\nroomNo\n,\n \ne2\n[\n0\n].\ntemp\n \n-\n \ne2\n[\nlast\n].\ntemp\n \nas\n \ntempDiff\n\n\ninsert\n \ninto\n \nTempDiffStream\n;\n\n\n\n\n\n\nLogical Patterns\n\u00b6\n\n\nLogical pattern matches events that arrive in temporal order and correlates events with logical relationships.\n\n\nSyntax\n\n\nKeywords such as and and or can be used instead of -> to illustrate the logical relationship.\n\n\n\n\n\n\n\n\nKey Word\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nand\n\n\nThis allows two events received in any order to be matched.\n\n\n\n\n\n\nor\n\n\nOne event from either event stream can be matched regardless of the order in which the events were received.\n\n\n\n\n\n\n\n\nExample: Identifying the occurence of an expected event\n\n\ndefine\n \nstream\n \nTempStream\n(\ndeviceID\n \nlong\n,\n \nroomNo\n \nint\n,\n \ntemp\n \ndouble\n);\n\n\ndefine\n \nstream\n \nRegulatorStream\n(\ndeviceID\n \nlong\n,\n \nroomNo\n \nint\n,\n \ntempSet\n \ndouble\n);\n\n\n\nfrom\n \nevery\n(\n \ne1\n=\nRegulatorStream\n \n)\n \n->\n \ne2\n=\nTempStream\n[\ne1\n.\nroomNo\n==\nroomNo\n \nand\n \ne1\n.\ntempSet\n \n<=\n \ntemp\n \n]\n \nor\n \ne3\n=\nRegulatorStream\n[\ne1\n.\nroomNo\n==\nroomNo\n]\n\n\nselect\n \ne1\n.\nroomNo\n,\n \ne2\n.\ntemp\n \nas\n \nroomTemp\n\n\nhaving\n \ne3\n \nis\n \nnull\n\n\ninsert\n \ninto\n \nAlertStream\n;\n\n\n\n\n\n\nThis query sends an alert when the room temperature reaches the temperature set on the regulator. The pattern matching is reset every time the temperature set on the regulator changes.\n\n\nSequences\n\u00b6\n\n\nSequence allows event streams to be correlated over time and detect event sequences based on the order of event arrival. With sequence there cannot be other events in between the events that match the sequence condition. It creates state machines to track the states of the matching process internally. Sequence can correlate events over multiple input streams or over the same input stream. Therefore, each matched input event needs to be referenced so that it can be accessed for future processing and output generation.\n\nSyntax\n\n\nThe following is the syntax for a sequence configuration.\n\n\nfrom\n \n{\nevery\n}\n \n<\ninput\n \nevent\n \nreference\n>=<\ninput\n \nstream\n \nname\n>\n[\n<\nfilter\n \ncondition\n>\n],\n \n<\ninput\n \nevent\n \nreference\n>=<\ninput\n \nstream\n \nname\n>\n[\n<\nfilter\n \ncondition\n>\n]\n{\n+|*|?\n}\n,\n \n...\n       \nwithin\n \n<\ntime\n \ngap\n>\n\n\nselect\n \n<\ninput\n \nevent\n \nreference\n>\n.\n<\nattribute\n \nname\n>\n,\n \n<\ninput\n \nevent\n \nreference\n>\n.\n<\nattribute\n \nname\n>\n,\n \n...\n\n\ninsert\n \ninto\n \n<\noutput\n \nstream\n \nname\n>\n\n\n\n\n\n\nExample\n\n\nThe following query sends an alert if there is more than 1 degree increase in the temperature between two consecutive temperature events.\n\n\nfrom\n \nevery\n \ne1\n=\nTempStream\n,\n \ne2\n=\nTempStream\n[\ne1\n.\ntemp\n \n+\n \n1\n \n<\n \ntemp\n \n]\n\n\nselect\n \ne1\n.\ntemp\n \nas\n \ninitialTemp\n,\n \ne2\n.\ntemp\n \nas\n \nfinalTemp\n\n\ninsert\n \ninto\n \nAlertStream\n;\n\n\n\n\n\n\nWSO2 Siddhi supports the following types of sequences:\n\n\n\n\nCounting sequences\n\n\nLogical sequences\n\n\n\n\nCounting sequences\n\u00b6\n\n\nCounting sequence allows us to match multiple consecutive events based on the same matching condition.\n\n\nSyntax\n\n\nThe number of events matched can be limited via postfixes as explained below.\n\n\n\n\n\n\n\n\nPostfix\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n*\n\n\nThis matches zero or more events.\n\n\n\n\n\n\n+\n\n\nThis matches 1 or more events.\n\n\n\n\n\n\n?\n\n\nThis matches zero events or one event.\n\n\n\n\n\n\n\n\nExample\n\n\nThe following query identifies peak temperatures.\n\n\ndefine\n \nstream\n \nTempStream\n(\ndeviceID\n \nlong\n,\n \nroomNo\n \nint\n,\n \ntemp\n \ndouble\n);\n\n\ndefine\n \nstream\n \nRegulatorStream\n(\ndeviceID\n \nlong\n,\n \nroomNo\n \nint\n,\n \ntempSet\n \ndouble\n,\n \nisOn\n \nbool\n);\n\n\n\nfrom\n \nevery\n \ne1\n=\nTempStream\n,\n \ne2\n=\nTempStream\n[\ne1\n.\ntemp\n \n<=\n \ntemp\n]\n+\n,\n \ne3\n=\nTempStream\n[\ne2\n[\nlast\n].\ntemp\n \n>\n \ntemp\n]\n\n\nselect\n \ne1\n.\ntemp\n \nas\n \ninitialTemp\n,\n \ne2\n[\nlast\n].\ntemp\n \nas\n \npeakTemp\n\n\ninsert\n \ninto\n \nTempDiffStream\n;\n\n\n\n\n\n\nLogical Sequences\n\u00b6\n\n\nLogical sequence matches events that arrive in temporal order and correlates events with logical relationships.\n\n\nSyntax\n\n\nKeywords such as and and or can be used instead of -> to illustrate the logical relationship.\n\n\n\n\n\n\n\n\nKeyword\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nand\n\n\nThis allows two events received in any order to be matched.\n\n\n\n\n\n\nor\n\n\nOne event from either event stream can be matched regardless of the order in which the events were received.\n\n\n\n\n\n\nnot\n\n\nWhen this precedes a condition in a Siddhi query, it indicates that the condition is not met.\n\n\n\n\n\n\nfor\n\n\nThis is used to define a time period within which an event should arrive. e.g., \nfrom not TemperatureStream[temp > 60] for 5 sec -> e1=FireAlarmStream\n defines a condition for an event to arrive at the \nFireAlarmStream\n stream within 5 seconds after an event with a value greater than 60 for temperature arrives in the \nTemperatureStream\n stream.\n\n\n\n\n\n\n\n\nExample 1: Identifying the occurence of an event\n\n\ndefine\n \nstream\n \nTempStream\n(\ndeviceID\n \nlong\n,\n \ntemp\n \ndouble\n);\ndefine\n \nstream\n \nHumidStream\n(\ndeviceID\n \nlong\n,\n \nhumid\n \ndouble\n);\n\n\ndefine\n \nstream\n \nRegulatorStream\n(\ndeviceID\n \nlong\n,\n \nisOn\n \nbool\n);\n\n\n\nfrom\n \nevery\n \ne1\n=\nRegulatorStream\n,\n \ne2\n=\nTempStream\n \nand\n \ne3\n=\nHumidStream\n\n\nselect\n \ne2\n.\ntemp\n,\n \ne3\n.\nhumid\n\n\ninsert\n \ninto\n \nStateNotificationStream\n;\n\n\n\n\n\n\nThis query creates a notification when a regulator event is followed by both temperature and humidity events.\n\n\nExample 2: Identifying the non-occurence of an expected event\n\n ```sql\n define stream CustomerStream (customerId string, timestamp long);\n\n\nfrom every not CustomerStream for 7 days\n select *\n insert into OutputStream;\n \n``\nThis query receives information about existing customers of the store from the\nCustomerStream\nstream. It identifies customers that have not visited the store for the last seven days, and outputs that information to the\nOutputStream\nstream. A message is generated from the\nOutputStream` stream with information for those customers about the discounts that are currently offered at the store.\n\n\nExample 3: Detecting the non-occurence of an expected event following another event\n\n\ndefine\n \nstream\n \nLocationStream\n \n(\nusername\n \nstring\n,\n \nlatitude\n \ndouble\n,\n \nlongitude\n \ndouble\n);\n\n\ndefine\n \nstream\n \nSpeedStream\n \n(\nusername\n \nstring\n,\n \nspeed\n \ndouble\n);\n\n\nfrom\n \nnot\n \nLocationStream\n[\nlatitude\n \n==\n \n43\n.\n0096\n \nand\n \nlongitude\n \n==\n \n81\n.\n2737\n]\n \nfor\n \n15\n \nminutes\n \nand\n \ne1\n=\nSpeedStream\n[\nspeed\n \n>=\n \n60\n.\n0\n]\n\n\nselect\n \ne1\n.\nusername\n \nas\n \nusername\n\n\ninsert\n \ninto\n \nAlertStream\n;\n\n\n\n\n\n\nThis query receives information about the location of taxis from the \nLocationStream\n stream, and information about the average speed of taxis from the \nSpeedStream\n stream. If a taxi (i.e., a username) with an average speed greater than 60 that has not reached location at \nlatitude == 43.0096 and longitude == 81.2737\n in 15 minutes is identified, an event is output to the \nAlertStream\n in order send an alert that indicates that the taxi has taken the wrong route.\n\n\nExample 4: Detecting the non-occurence of multiple events\n\n\ndefine\n \nstream\n \nLocationStream\n \n(\nusername\n \nstring\n,\n \nlatitude\n \ndouble\n,\n \nlongitude\n \ndouble\n);\n\n\ndefine\n \nstream\n \nStateStream\n \n(\nusername\n \nstring\n,\n \nstate\n \nstring\n);\n\n\nfrom\n \nnot\n \nLocationStream\n[\nlatitude\n \n==\n \n43\n.\n0096\n \nand\n \nlongitude\n \n==\n \n81\n.\n2737\n]\n \nfor\n \n30\n \nminutes\n \nand\n \nnot\n \nStateStream\n[\nstate\n \n==\n \n\u2018\nfinished\n\u2019\n]\n \nfor\n \n30\n \nminutes\n\n\nselect\n \n\u2018\nDanger\n\u2019\n \nas\n \nmessage\n\n\ninsert\n \ninto\n \nAlertStream\n;\n\n\n\n\n\n\nThis query receives information about the location of taxis from the \nLocationStream\n stream, and information about the status of the passenger from the \nStateStream\n stream. If the passenger (i.e., username) does not arrive at the location at \nlatitude == 43.0096 and longitude == 81.2737\n in 30 minutes, and at the same time, if he/she has not marked the journey as \nfinished\n, an event is output to the \nAlertStream\n stream to generate an alert with \nDanger\n as the message.\n\n\nExample 5: Detecting the non-occurence of either of two mutually exclusive events\n\n\ndefine\n \nstream\n \nLocationStream\n \n(\nusername\n \nstring\n,\n \nlatitude\n \ndouble\n,\n \nlongitude\n \ndouble\n);\n\n\n\nfrom\n \nnot\n \nLocationStream\n[\nlatitude\n \n==\n \n43\n.\n0096\n \nand\n \nlongitude\n \n==\n \n81\n.\n2737\n]\n \nfor\n \n15\n \nminutes\n \nor\n \nnot\n \nLocationStream\n[\nlatitude\n \n==\n \n44\n.\n0096\n \nand\n \nlongitude\n \n==\n \n81\n.\n2735\n]\n \nfor\n \n15\n \nminutes\n\n\nselect\n \n\u2018\nUnexpected\n \nDelay\n\u2019\n \nas\n \nmessage\n\n\ninsert\n \ninto\n \nAlertStream\n;\n\n\n\n\n\n\nThis query receives information about the location of taxis from the \nLocationStream\n stream. If a taxi has not reached either the location at \nlatitude == 43.0096 and longitude == 81.2737\n, or the one at \nlatitude == 44.0096 and longitude == 81.2735\n in 15 minutes, an event is output to the \nAlertStream\n stream to generate an alert with \nUnexpected Delay\n as the message.\n\n\nExample 6: Detecting the non-occurence of one event or the occurence of another\n\n\ndefine\n \nstream\n \nLocationStream\n \n(\nusername\n \nstring\n,\n \nlatitude\n \ndouble\n,\n \nlongitude\n \ndouble\n);\n\n\ndefine\n \nstream\n \nDangerStream\n \n(\nusername\n \nstring\n);\n\n\nfrom\n \nnot\n \nLocationStream\n[\nlatitude\n \n==\n \n43\n.\n0096\n \nand\n \nlongitude\n \n==\n \n81\n.\n2737\n]\n \nfor\n \n30\n \nminutes\n \nor\n \ne1\n=\nDangerStream\n\n\nselect\n \ne1\n.\nusername\n \nas\n \nusername\n\n\ninsert\n \ninto\n \nAlertStream\n;\n\n\n\n\n\n\nThis query receives information about the location of taxis from the \nLocationStream\n stream, and information about whether the passenger is in danger from the \nDangerStream\n stream. After 30 minutes, it checkes whether the passenger has reached the location at \nlatitude == 43.0096 and longitude == 81.2737\n, or marked to indicate that he/she is in danger. If the passenger has not reached the location, or if he/she has indicated that he/she is in danger, an event is output to the \nAlertStream\n stream in order to generate an alert to indicate that the passenger is in danger.\n\n\nExample 7: Identifying the occurence of an unexpected event within a specified time interval\n\n\ndefine\n \nstream\n \nTemperatureStream\n \n(\ntemp\n \nfloat\n,\n \ntimestamp\n \nlong\n);\n\n\ndefine\n \nstream\n \nFireAlarmStream\n \n(\nactive\n \nboolean\n);\n\n\nfrom\n \nnot\n \nTemperatureStream\n[\ntemp\n \n>\n \n60\n]\n \nfor\n \n5\n \nsec\n \n->\n \ne1\n=\nFireAlarmStream\n\n\nselect\n \ne1\n.\nid\n \nas\n \nalarmId\n\n\ninsert\n \ninto\n \nAlertStream\n;\n\n\n\n\n\n\nThis query receives information about the temperature from the \nTemperatureStream\n stream, and information about the state of the fire alarm from the \nFireAlarmStream\n stream. If the state of the fire alarm is \nactive\n within a period of 5 seconds during which the temperature is less than 60 degrees, an event is output to the \nAlertStream\n stream in order to indicate that the fire alarm generates false alerts.\n\n\nExample 8: Identifying the non-occurence of an expected event within a specified time period\n\n\ndefine\n \nstream\n \nTemperatureStream\n \n(\ntemp\n \nfloat\n,\n \ntimestamp\n \nlong\n);\n\n\ndefine\n \nstream\n \nFireAlarmStream\n \n(\nactive\n \nboolean\n);\n\n\nfrom\n \nTemperatureStream\n[\ntemp\n \n>\n \n60\n]\n \n->\n \nnot\n \nFireAlarmStream\n[\nactive\n \n==\n \ntrue\n]\n \nfor\n \n5\n \nsec\n\n\nselect\n \n'Fire alarm not working'\n \nas\n \nmessage\n\n\ninsert\n \ninto\n \nAlertStream\n;\n\n\n\n\n\n\nThis query receives information about the temperature from the \nTemperatureStream\n stream, and information about the state of the fire alarm from the \nFireAlarmStream\n stream. If an event where the state of the fire alarm is \nactive\n does not arrive within five seconds after an event that indicates that the temperature has risen above 60 degrees, an event is output to the \nAlertStream\n stream with \nFire alarm not working\n as the message.\n\n\nExample 9: Identifying the occurence of an even that is not preceded by another expected event\n\n\ndefine\n \nstream\n \nLocationStream\n \n(\nlocationId\n \nstring\n,\n \ncustomerId\n \nstring\n);\n\n\n\nfrom\n \nnot\n \nLocationStream\n[\nlocationId\n \n==\n \n'zoneA'\n]\n \nand\n \ne1\n=\nLocationStream\n[\nlocationId\n \n==\n  \n'billingCounter'\n]\n\n\nselect\n \ne1\n.\ncustomerId\n \nas\n \ncustomerId\n,\n \n'Great deals are waiting for you at zone A'\n \nas\n \nmessage\n\n\ninsert\n \ninto\n \nNotificationStream\n;\n\n\n\n\n\n\nThis query receives information about the location of customers from the \nLocationStream\n stream. If an event indicates that a customer has reached the \nbilingCounter\n location, and it is not preceded by an event that indicates that the same customer has been to the \nzoneA\n location, an event is output to the \nNotificationStream\n stream in order to generate a notification with \nGreat deals are waiting for you at zone A\n as the message.\n\n\nPartitions\n\u00b6\n\n\nPartitions allow events and queries to be divided in order to process them in parallel and in isolation. Each partition is tagged with a partition key. Only events corresponding to this key are processed for each partition. A partition can contain one or more Siddhi queries.\nSiddhi supports both variable partitions and well as range partitions.\n\n\nVariable Partitions\n\u00b6\n\n\nA variable partition is created by defining the partition key using the categorical (string) attribute of the input event stream.\n\n\nSyntax\n\n\npartition\n \nwith\n \n(\n \n<\nattribute\n \nname\n>\n \nof\n \n<\nstream\n \nname\n>\n,\n \n<\nattribute\n \nname\n>\n \nof\n \n<\nstream\n \nname\n>\n,\n \n...\n \n)\nbegin\n\n    \n<\nquery\n>\n\n    \n<\nquery\n>\n\n    \n...\n\n\nend\n;\n\n\n\n\n\n\nExample\n\n\nThe following query calculates the maximum temperature recorded for the last 10 events emitted per sensor.\n\n\npartition\n \nwith\n \n(\n \ndeviceID\n \nof\n \nTempStream\n \n)\nbegin\n\n    \nfrom\n \nTempStream\n#\nwindow\n.\nlength\n(\n10\n)\n\n    \nselect\n \nroomNo\n,\n \ndeviceID\n,\n \nmax\n(\ntemp\n)\n \nas\n \nmaxTemp\n\n    \ninsert\n \ninto\n \nDeviceTempStream\n\n\nend\n;\n\n\n\n\n\n\nRange Partitions\n\u00b6\n\n\nA range partition is created by defining the partition key using the numerical attribute of the input event stream.\n\n\nSyntax\n\n\npartition\n \nwith\n \n(\n \n<\ncondition\n>\n \nas\n \n<\npartition\n \nkey\n>\n \nor\n \n<\ncondition\n>\n \nas\n \n<\npartition\n \nkey\n>\n \nor\n \n...\n \nof\n \n<\nstream\n \nname\n>\n,\n \n...\n \n)\nbegin\n\n    \n<\nquery\n>\n\n    \n<\nquery\n>\n\n    \n...\n\n\nend\n;\n\n\n\n\n\n\nExample\n\n\nThe following query calculates the average temperature for the last 10 minutes per office area.\n\n\npartition\n \nwith\n \n(\n \nroomNo\n>=\n1030\n \nas\n \n'serverRoom'\n \nor\n \nroomNo\n<\n1030\n \nand\n \nroomNo\n>=\n330\n \nas\n \n'officeRoom'\n \nor\n \nroomNo\n<\n330\n \nas\n \n'lobby'\n \nof\n \nTempStream\n)\n \n)\nbegin\n\n    \nfrom\n \nTempStream\n#\nwindow\n.\ntime\n(\n10\n \nmin\n)\n\n    \nselect\n \nroomNo\n,\n \ndeviceID\n,\n \navg\n(\ntemp\n)\n \nas\n \navgTemp\n\n    \ninsert\n \ninto\n \nAreaTempStream\n\n\nend\n;\n\n\n\n\n\n\nInner Streams\n\u00b6\n\n\nInner streams can be used for query instances of a partition to communicate between other query instances of the same partition. Inner Streams are denoted by a \"#\" in front of them, and these streams cannot be accessed outside of the partition block. \n\n\nExample\n\n\nPer sensor, calculate the maximum temperature over last 10 temperature events when the sensor is having an average temperature greater than 20 over the last minute.\n\n\n\npartition with ( deviceID of TempStream )\nbegin\n    from TempStream#window.time(1 min)\n    select roomNo, deviceID, temp, avg(temp) as avgTemp\n    insert into #AvgTempStream\n\n    from #AvgTempStream[avgTemp > 20]#window.length(10)\n    select roomNo, deviceID, max(temp) as maxTemp\n    insert into deviceTempStream\nend;\n\n\n\n\nInner streams\n\u00b6\n\n\nInner streams can be used for query instances of a partition to communicate between other query instances of the same partition. Inner Streams are denoted by a \"#\" in front of them, and these streams cannot be accessed outside of the partition block. \nInner streams can be used for query instances of a partition to communicate between other query instances of the same partition. Inner Streams are denoted by a \"#\" in front of them, and these streams cannot be accessed outside of the partition block. \n\nE.g. Per sensor, calculate the maximum temperature over last 10 temperature events when the sensor is having an average temperature greater than 20 over the last minute.\n\n\ndefine\n \ntable\n \nRoomTypeTable\n \n(\nroomNo\n \nint\n,\n \ntype\n \nstring\n);\n\n\n\n\n\n\n(Defined) Windows\n\u00b6\n\n\nAn event window is a window that can be shared across multiple queries. Events are inserted from one or more streams. The event window publishes current and/or expired events as the output. The time at which these events are published depends on the window type.\n\n\nSyntax\n\n\nThe following is the syntax for an event window.\n\n\ndefine\n \nwindow\n \n<\nevent\n \nwindow\n \nname\n>\n \n(\n<\nattribute\n \nname\n>\n \n<\nattribute\n \ntype\n>\n,\n \n<\nattribute\n \nname\n>\n \n<\nattribute\n \ntype\n>\n,\n \n...\n \n)\n \n<\nwindow\n \ntype\n>\n(\n<\nparameter\n>\n,\n \n<\nparameter\n>\n,\n \n\u2026\n)\n \n<\noutput\n \nevent\n \ntype\n>\n;\n\n\n\n\n\n\nExamples\n\n\n\n\nReturning all output categories\n\n\n\n\nIn the following query, the window type is not specified in the window definition. Therefore, it emits both current and expired events as the output.\n\n\ndefine\n \nwindow\n \nSensorWindow\n \n(\nname\n \nstring\n,\n \nvalue\n \nfloat\n,\n \nroomNo\n \nint\n,\n \ndeviceID\n \nstring\n)\n \ntimeBatch\n(\n1\n \nsecond\n);\n\n\n\n\n\n\n\n\nReturning a specified output category\n\n\n\n\nIn the following query, the window type is \noutput all events\n. Therefore, it emits both current and expired events as the output.\n\n\ndefine\n \nwindow\n \nSensorWindow\n \n(\nname\n \nstring\n,\n \nvalue\n \nfloat\n,\n \nroomNo\n \nint\n,\n \ndeviceID\n \nstring\n)\n \ntimeBatch\n(\n1\n \nsecond\n)\n \noutput\n \nall\n \nevents\n;\n\n\n\n\n\n\nSupported Event Window Operators\n\u00b6\n\n\nThe following operators are supported for event windows.\n\n\nInsert Into\n\u00b6\n\n\nSyntax\n\n\nfrom\n \n<\ninput\n \nstream\n \nname\n>\n \n\nselect\n \n<\nattribute\n \nname\n>\n,\n \n<\nattribute\n \nname\n>\n,\n \n...\n\n\ninsert\n \ninto\n \n<\nwindow\n \nname\n>\n\n\n\n\n\n\nTo insert only the specified output event category, use the \ncurrent events\n, \nexpired events\n or the \nall events\n keyword between \ninsert\n and \ninto\n keywords. For more information, see Output Event Categories.\n\n\nPurpose\n\n\nTo insert events from an event stream to a window.\n\n\nParameters\n\n\n\n\n\n\ninput stream name\n:  The event stream from which events are inserted into the event window.\n\n\n\n\n\n\nattribute name\n: The name of the attributes with which the events are inserted from the event stream to the event window. Multiple attributes can be specified as a comma separated list.\n\n\n\n\n\n\nwindow name\n: The event window to which events are inserted from the event stream.\n\n\n\n\n\n\nExample\n\n\nThe following query inserts both current and expired events from an event stream named \nsensorStream\n to an event window named \nsensorWindow\n.\n\n\nfrom\n \nSensorStream\n\n\ninsert\n \ninto\n \nSensorWindow\n;\n\n\n\n\n\n\nOutput\n\u00b6\n\n\nAn event window can be used as a stream in any query. However, an ordinary window cannot be applied to the output of an event window.\n\n\nSyntax\n\n\nfrom\n \n<\nwindow\n \nname\n>\n \n\nselect\n \n<\nattribute\n \nname\n>\n,\n \n<\nattribute\n \nname\n>\n,\n \n...\n\n\ninsert\n \ninto\n \n<\nevent\n \nstream\n \nname\n>\n\n\n\n\n\n\nPurpose\n\n\nTo inject the output of an event window into an event stream.\n\n\nParameters\n\n\n\n\n\n\nwindow name\n: The event window of which the output is injected into the specified stream.\n\n\n\n\n\n\nattribute name\n: The name of the attributes with which the events are inserted from the event stream to the event window. Multiple attributes can be specified as a comma separated list.\n\n\n\n\n\n\nevent stream name\n: The event stream to which the output of the specified event window is injected.\n\n\n\n\n\n\nExample\n\nThe following query selects the name and the maximum values for the \nvalue\n and \nroomNo\n attributes from an event window named \nSensorWindow\n, and inserts them into an event stream named \nMaxSensorReadingStream\n.\n\n\nfrom\n \nSensorWindow\n\n\nselect\n \nname\n,\n \nmax\n(\nvalue\n)\n \nas\n \nmaxValue\n,\n \nroomNo\n\n\ninsert\n \ninto\n \nMaxSensorReadingStream\n;\n\n\n\n\n\n\nJoin\n\u00b6\n\n\nExample\n\n\n \ndefine\n \nstream\n \nTempStream\n(\ndeviceID\n \nlong\n,\n \nroomNo\n \nint\n,\n \ntemp\n \ndouble\n);\n\n \ndefine\n \nstream\n \nRegulatorStream\n(\ndeviceID\n \nlong\n,\n \nroomNo\n \nint\n,\n \nisOn\n \nbool\n);\n\n \ndefine\n \nwindow\n \nTempWindow\n(\ndeviceID\n \nlong\n,\n \nroomNo\n \nint\n,\n \ntemp\n \ndouble\n)\n \ntime\n(\n1\n \nmin\n);\n\n\n \nfrom\n \nTempStream\n[\ntemp\n \n>\n \n30\n.\n0\n]\n\n \ninsert\n \ninto\n \nTempWindow\n;\n\n\n \nfrom\n \nTempWindow\n\n \njoin\n \nRegulatorStream\n[\nisOn\n \n==\n \nfalse\n]\n#\nwindow\n.\nlength\n(\n1\n)\n \nas\n \nR\n\n \non\n \nTempWindow\n.\nroomNo\n \n==\n \nR\n.\nroomNo\n\n \nselect\n \nTempWindow\n.\nroomNo\n,\n \nR\n.\ndeviceID\n,\n \n'start'\n \nas\n \naction\n\n \ninsert\n \ninto\n \nRegulatorActionStream\n;\n\n\n\n\n\n\nTriggers\n\u00b6\n\n\nEvent triggers allow events to be created periodically based on a specified time interval.\n\n\nSyntax\n\n\nThe following is the syntax for an event trigger definition.\n\n\ndefine\n \ntrigger\n \n<\ntrigger\n \nname\n>\n \nat\n \n{\n'start'\n|\n \nevery\n \n<\ntime\n \ninterval\n>|\n \n'<cron expression>'\n}\n;\n\n\n\n\n\n\nExamples\n\n\n\n\nTriggering events regularly at specific time intervals\n\n\n\n\nThe following query triggers events every 5 minutes.\n\n\n \ndefine\n \ntrigger\n \nFiveMinTriggerStream\n \nat\n \nevery\n \n5\n \nmin\n;\n\n\n\n\n\n\n\n\nTriggering events at a specific time on specified days\nThe following query triggers an event at 10.15 AM every Monday, Tuesday, Wednesday, Thursday and Friday.\n\n\n\n\n \ndefine\n \ntrigger\n \nFiveMinTriggerStream\n \nat\n \n'0 15 10 ? * MON-FRI'\n;\n\n\n\n\n\n\nSiddhi Logger\n\u00b6\n\n\nThe Siddhi Logger logs events that arrive in different logger priorities such as \nINFO\n, \nDEBUG\n, \nWARN\n, \nFATAL\n, \nERROR\n, \nOFF\n, and \nTRACE\n.\n\n\nSyntax\n\n\nThe following is the syntax for a query with a Siddhi logger.\n\n\n<\nvoid\n>\n \nlog\n(\n<\nstring\n>\n \npriority\n,\n \n<\nstring\n>\n \nlogMessage\n,\n \n<\nbool\n>\n \nisEventLogged\n)\n\n\n\n\n\n\nThe parameters configured are as follows.\n\n\n\n\n\n\nprioroty\n: The logging priority. Possible values are \nINFO\n, \nDEBUG\n, \nWARN\n, \nFATAL\n, \nERROR\n, \nOFF\n, and \nTRACE\n. If no value is specified for this parameter, \nINFO\n is printed as the priority by default.\n\n\n\n\n\n\nlogMessage\n: This parameter allows you to specify a message to be printed in the log.\n\n\n\n\n\n\nisEventLogged\n: This parameter specifies whether the event body should be included in the log. Possible values are \ntrue\n and \nfalse\n. If no value is specified, the event body is not printed in the log by default.\n\n\n\n\n\n\nExamples\n\n\n\n\nThe following query logs the event with the \nINFO\n logging priority. This is because the priority is not specified.\n\n\n\n\nfrom\n \nStockStream\n#\nlog\n()\n\n\nselect\n \n*\n\n\ninsert\n \ninto\n \nOutStream\n;\n\n\n\n\n\n\n\n\nThe following query logs the event with the \nINFO\n logging priority (because the priority is not specified) and the \ntest message\n text.\n\n\n\n\nfrom\n \nStockStream\n#\nlog\n(\n'test message'\n)\n\n\nselect\n \n*\n\n\ninsert\n \ninto\n \nOutStream\n;\n\n\n\n\n\n\n\n\nThe following query logs the event with the \nINFO\n logging priority because a priority is not specified. The event itself is printed in the log.\n\n\n\n\nfrom\n \nStockStream\n#\nlog\n(\ntrue\n)\n\n\nselect\n \n*\n\n\ninsert\n \ninto\n \nOutStream\n;\n\n\n\n\n\n\n\n\nThe following query logs the event with the \nINFO\n logging priority (because the priority is not specified) and the \ntest message\n text. The event itself is printed in the log.\n\n\n\n\nfrom\n \nStockStream\n#\nlog\n(\n'test message'\n,\n \ntrue\n)\n\n\nselect\n \n*\n\n\ninsert\n \ninto\n \nOutStream\n;\n\n\n\n\n\n\n\n\nThe following query logs the event with the \nWARN\n logging priority and the \ntest message\n text.\n\n\n\n\nfrom\n \nStockStream\n#\nlog\n(\n'warn'\n,\n'test message'\n)\n\n\nselect\n \n*\n\n\ninsert\n \ninto\n \nOutStream\n;\n\n\n\n\n\n\n\n\nThe following query logs the event with the \nWARN\n logging priority and the \ntest message\n text.  The event itself is printed in the log.\n\n\n\n\nfrom\n \nStockStream\n#\nlog\n(\n'warn'\n,\n'test message'\n,\ntrue\n)\n\n\nselect\n \n*\n\n\ninsert\n \ninto\n \nOutStream\n;\n\n\n\n\n\n\nScripts\n\u00b6\n\n\nEval script allows Siddhi to process events using other programming languages by including their functions in the Siddhi queries. Eval script functions can be defined like event tables or streams and referred in the queries as Inbuilt Functions of Siddhi.\n\n\nSyntax\n\n\nThe following is the syntax for a Siddhi query with an Eval Script definition.\n\n\ndefine\n \nfunction\n \n<\nfunction\n \nname\n>\n[\n<\nlanguage\n \nname\n>\n]\n \nreturn\n \n<\nreturn\n \ntype\n>\n \n{\n\n    \n<\noperation\n \nof\n \nthe\n \nfunction\n>\n\n\n}\n;\n\n\n\n\n\n\nThe following parameters are configured when defining an eval script.\n\n\n\n\n\n\nfunction name\n:  The name of the function from another programming language that should be included in the Siddhi query.\n\n\n\n\n\n\nlanguage name\n: The name of the other programming language from which the function included in the Siddhi query is taken. The languages supported are JavaScript, R and Scala.\n\n\n\n\n\n\nreturn type\n: The return type of the function defined. The return type can be \nint\n, \nlong\n, \nfloat\n, \ndouble\n, \nstring\n, \nbool\n or \nobject\n. Here the function implementer should be responsible for returning the output on the defined return type for proper functionality. \n\n\n\n\n\n\noperation of the function\n: Here, the execution logic of the defined logos should be added. This logic should be written in the language specified in the \nlanguage name\n parameter, and the return should be of the type specified in the \nreturn type\n parameter.\n\n\n\n\n\n\nExamples\n\n\n\n\nConcatenating a JavaScript function\n\n\n\n\nThe following query performs the concatenating function of the JavaScript language and returns the output as a string.\n\n\ndefine\n \nfunction\n \nconcatFn\n[\nJavaScript\n]\n \nreturn\n \nstring\n \n{\n\n    \nvar\n \nstr1\n \n=\n \ndata\n[\n0\n];\n\n    \nvar\n \nstr2\n \n=\n \ndata\n[\n1\n];\n\n    \nvar\n \nstr3\n \n=\n \ndata\n[\n2\n];\n\n    \nvar\n \nresponce\n \n=\n \nstr1\n \n+\n \nstr2\n \n+\n \nstr3\n;\n\n    \nreturn\n \nresponce\n;\n\n\n}\n;\n\n\n\ndefine\n \nstream\n \nTempStream\n(\ndeviceID\n \nlong\n,\n \nroomNo\n \nint\n,\n \ntemp\n \ndouble\n);\n\n\n\nfrom\n \nTempStream\n\n\nselect\n \nconcatFn\n(\nroomNo\n,\n'-'\n,\ndeviceID\n)\n \nas\n \nid\n,\n \ntemp\n \n\ninsert\n \ninto\n \nDeviceTempStream\n;\n\n\n\n\n\n\n\n\nConcatenating an R function\n\n\n\n\nThe following query performs the concatenating function of the R language and returns the output as a string.\n\n\ndefine\n \nfunction\n \nconcatFn\n[\nR\n]\n \nreturn\n \nstring\n \n{\n\n    \nreturn\n(\npaste\n(\ndata\n,\n \ncollapse\n=\n\"\"\n));\n\n\n}\n;\n\n\n\ndefine\n \nstream\n \nTempStream\n(\ndeviceID\n \nlong\n,\n \nroomNo\n \nint\n,\n \ntemp\n \ndouble\n);\n\n\n\nfrom\n \nTempStream\n\n\nselect\n \nconcatFn\n(\nroomNo\n,\n'-'\n,\ndeviceID\n)\n \nas\n \nid\n,\n \ntemp\n\n\ninsert\n \ninto\n \nDeviceTempStream\n;\n\n\n\n\n\n\n\n\nConcatenating a Scala function\n\n\n\n\nThe following query performs the concatenating function of the Scala language and returns the output as a string.\n\n\ndefine\n \nfunction\n \nconcatFn\n[\nScala\n]\n \nreturn\n \nstring\n \n{\n\n    \nvar\n \nconcatenatedString\n \n=\n\n     \nfor\n(\ni\n \n<-\n \n0\n \nuntil\n \ndata\n.\nlength\n)\n{\n\n         \nconcatenatedString\n \n+=\n \ndata\n(\ni\n).\ntoString\n\n     \n}\n\n     \nconcatenatedString\n\n\n}\n;\n\n\n\ndefine\n \nstream\n \nTempStream\n(\ndeviceID\n \nlong\n,\n \nroomNo\n \nint\n,\n \ntemp\n \ndouble\n);\n\n\n\nfrom\n \nTempStream\n\n\nselect\n \nconcatFn\n(\nroomNo\n,\n'-'\n,\ndeviceID\n)\n \nas\n \nid\n,\n \ntemp\n\n\ninsert\n \ninto\n \nDeviceTempStream\n;\n\n\n\n\n\n\nSiddhi extensions\n\u00b6\n\n\nSiddhi supports an extension architecture to support custom code and functions to be incorporated with Siddhi in a seamless manner. Extension will follow the following syntax;\n\n\n<\nnamespace\n>\n:\n<\nfunction\n \nname\n>\n(\n<\nparameter1\n>\n,\n \n<\nparameter2\n>\n,\n \n...\n \n)\n\n\n\n\n\n\nHere the namespace will allow Siddhi to identify the function as an extension and its extension group, the function name will denote the extension function within the given group, and the parameters will be the inputs that can be passed to the extension for evaluation and/or configuration.  \n\n\nE.g. A window extension created with namespace foo and function name unique can be referred as follows:\n\n\nfrom\n \nStockExchangeStream\n[\nprice\n \n>=\n \n20\n]\n#\nwindow\n.\nfoo\n:\nunique\n(\nsymbol\n)\n\n\nselect\n \nsymbol\n,\n \nprice\n\n\ninsert\n \ninto\n \nStockQuote\n\n\n\n\n\n\nExtension types\n\n\nSiddhi supports following five type of extensions:\n\n\n1.Function Extension\n\n\nFor each event it consumes zero or more parameters and output a single attribute as an output. This could be used to manipulate event attributes to generate new attribute like Function operator. Implemented by extending \"org.wso2.siddhi.core.executor.function.FunctionExecutor\".\n\n\nE.g. \"math:sin(x)\" here the sin function of math extension will return the sin value its parameter x.\n\n\n2.Aggregate Function Extension\n\n\nFor each event it consumes zero or more parameters and output a single attribute having an aggregated results based in the input parameters as an output. This could be used with conjunction with a window in order to find the aggregated results based on the given window like Aggregate Function operator. Implemented by extending \"org.wso2.siddhi.core.query.selector.attribute.aggregator.AttributeAggregator\".\n\n\nE.g. \"custom:std(x)\" here the std aggregate function of custom extension will return the standard deviation of value x based on the assigned window to its query. \n\n\n3.Window Extension\n\n\nAllows events to be collected and expired without altering the event format based on the given input parameters like the Window operator. Implemented by extending \"org.wso2.siddhi.core.query.processor.stream.window.WindowProcessor\".\n\n\nE.g. \"custom:unique(key)\" here the unique window of custom extension will return all events as current events upon arrival as current events and when events arrive with the same value based on the \"key\" parameter the corresponding to a previous event arrived the previously arrived event will be emitted as expired event.\n\n\n4.Stream Function Extension\n\n\nAllows events to be altered by adding one or more attributes to it. Here events could be outputted upon each event arrival. Implemented by extending \"org.wso2.siddhi.core.query.processor.stream.function.StreamFunctionProcessor\".\n\n\nE.g. \"custom:pol2cart(theta,rho)\" here the pol2cart function of custom extension will return all events by calculating the cartesian coordinates x & y and adding them as new attributes to the existing events.\n\n\n5.Stream Processor Extension\n\n\nAllows events to be collected and expired with altering the event format based on the given input parameters. Implemented by extending \"oorg.wso2.siddhi.core.query.processor.stream.StreamProcessor\".\n\n\nE.g. \"custom:perMinResults(arg1, arg2, ...)\" here the perMinResults function of custom extension will return all events by adding one or more attributes the events based on the conversion logic and emitted as current events upon arrival as current events and when at expiration expired events could be emitted appropriate expiring events attribute values for matching the current events attributes counts and types.\n\n\nAvailable Extentions\n\n\nSiddhi currently have several prewritten extensions as follows; \n\n\nExtensions released under Apache License v2 : \n\n\n\n\nmath\n:   Supporting mathematical operations \n\n\nstr\n:Supporting String operations \n\n\ngeo\n: Supporting geocode operations\n\n\nregex\n: Supporting regular expression operations\n\n\ntime\n: Supporting time expression operations\n\n\nml\n: Supporting Machine Learning expression operations\n\n\ntimeseries\n: Supporting Time Series operations\n\n\nkf\n (Kalman Filter): Supporting filtering capabilities by detecting outliers of the data.\n\n\nmap\n: Supporting to send a map object inside Siddhi stream definitions and use it inside queries.\n\n\nreorder\n: Supporting for reordering events from an unordered event stream using Kslack algorithm. \n\n\n\n\nExtensions released under GNU/GPL License v3 : \n\n\n\n\ngeo\n: Supporting geographical processing operations   \n\n\nr\n: Supporting R executions\n\n\nnlp\n: Supporting Natural Language Processing expression operations\n\n\npmml\n: Supporting Predictive Model Markup Language expression operations\n\n\n\n\nWriting Custom Extensions\n\n\nCustom extensions can be written in order to cater usecase specific logics that are not out of the box available in Siddhi or as an extension. \n\n\nTo create custom extensions two things need to be done.\n\n\n1.Implementing the extension logic by extending well defined Siddhi interfaces. E.g implementing a UniqueWindowProcessor by extending org.wso2.siddhi.core.query.processor.stream.window.WindowProcessor.\n\n\npackage\n \norg\n.\nwso2\n.\ntest\n;\n\n\n\npublic\n \nclass\n \nUniqueWindowProcessor\n \nextends\n \nWindowProcessor\n \n{\n\n   \n...\n\n\n}\n\n\n\n\n\n\n2.Add an extension mapping file to map the written extension class with the extension function name and namespace. Here extension mapping file should be named as \"\n.siddhiext\". E.g Mapping the written UniqueWindowProcessor extension with function name \"unique\" and namespace \"foo\", to do so the mapping file should be named as foo.siddhiext and the context of the file should as below; \n\n\n#\n \nfunction\n \nname\n \nto\n \nclass\n \nmapping\n \nof\n \n'foo'\n \nextension\n\n\nunique\n=\norg\n.\nwso2\n.\ntest\n.\nUniqueWindowProcessor",
            "title": "Siddhi Query Guide"
        },
        {
            "location": "/documentation/siddhi-4.0/#siddhi-streaming-sql-guide-40",
            "text": "",
            "title": "Siddhi Streaming SQL Guide 4.0"
        },
        {
            "location": "/documentation/siddhi-4.0/#introduction",
            "text": "Siddhi Streaming SQL is designed to process event streams in streaming manner, detect complex event occurrences, \nand notify them in real-time.",
            "title": "Introduction"
        },
        {
            "location": "/documentation/siddhi-4.0/#siddhi-application",
            "text": "Streaming processing and Complex Event Processing rules can be written is Siddhi Streaming SQL and they can be put \ntogether as  SiddhiApp  in one file.   Purpose  Each Siddhi Application is an isolated processing unit that let you deploy and \nexecute queries independent of other SiddhiApps in the system.  The flowing diagram depicts how  event flows  within some of the key Siddhi Streaming SQL elements \nof the Siddhi Application.   Below table provides brief description of a few key elements in the Siddhi Streaming SQL Language.     Elements  Description      Stream  A logical series of events ordered in time with a uniquely identifiable name and set of defined typed attributes defining it's schema    Event  An event is associated with only one stream, and all events of that stream have an identical set of attributes assigned specific types (or the same schema). An event contains a timestamp and set of attribute values according to the schema.    Table  A structured representation of stored data with a defined schema. Stored data can be backed by  In-Memory ,  RDBMs ,  MongoDB , etc to be accessed and manipulated at runtime.    Query  A logical construct that process events in streaming manner by combining existing streams and/or tables, and generates events to output stream or table. A query consumes one or more input streams and zero or one table, process those events in a streaming manner, publishes the output events to stream or tables for further processing or notifications.    Source  A contract that consumes data from external sources (such as  TCP ,  Kafka ,  HTTP , etc), converts it's data format (such as  XML ,  JSON ,  binary , etc) to Siddhi event, and passes that to a Stream for processing.    Sink  A contract that takes events arriving at a Stream, map them to a predefined data format (such as  XML ,  JSON ,  binary , etc), and publish them to external endpoints (such as  E-mail ,  TCP ,  Kafka ,  HTTP , etc).    Input Handler  A mechanism to programmatically inject events into Streams.    Stream/Query Callback  A mechanism to programmatically consumes output events from Streams and Queries.    Partition  A logical container that isolates processing of queries based on partition keys. Here separate instance of queries will be generated for each partition key to achieve isolation.    Inner Stream  A positionable stream that connects portioned queries within their partitions preserving isolation.     Grammar  The element of Siddhi SQL can be composed together as a script in Siddhi App, Here each construct should be separated \nby a semicolon ( ; ).   <siddhi app>  : \n        <app annotation> * \n        ( <stream definition> | <table definition> | ... ) + \n        ( <query> | <partition> ) +\n        ;",
            "title": "Siddhi Application"
        },
        {
            "location": "/documentation/siddhi-4.0/#streams",
            "text": "Streams is a logical series of events ordered in time. It's schema is defined via the  stream definition .\nA stream definition contains a unique name and a set of attributes with specific types and uniquely identifiable names within the stream.\nAll events of a particular Stream will have the same schema (i.e. have the same attributes in the same order).   Purpose  By defining a schema it unifies common types of events together. This enables them to be processed at queries using their defined attributes in a streaming manner, and let sinks and sources to map events to/from various data formats.  Syntax  The following is the syntax for defining a new stream.  define   stream   < stream   name >   ( < attribute   name >   < attribute   type > ,   < attribute   name >   < attribute   type > ,   ...   );   The following parameters are configured in a stream definition.     Parameter  Description      stream name  The name of the stream created. (as a convention  PascalCase  is used for stream name)    attribute name  The schema of an stream is defined by its attributes by uniquely identifiable attribute names (as a convention  camalCase  is used for attribute names)    attribute type  The type of each attribute defined in the schema.   This can be  STRING ,  INT ,  LONG ,  DOUBLE ,  FLOAT ,  BOOL  or  OBJECT .     Example  define   stream   TempStream   ( deviceID   long ,   roomNo   int ,   temp   double );   The above creates a stream named  TempStream  with the following attributes.   deviceID  of type  long  roomNo  of type  int    temp  of type  double",
            "title": "Streams"
        },
        {
            "location": "/documentation/siddhi-4.0/#sources",
            "text": "Sources allow you to receive events via multiple transports and with various data formats into streams for processing.  Source let you define a mapping to convert the incoming event from its native data format (such as  JSON ,  TEXT ,  XML , etc) \nto Siddhi Event, when customization to such mappings is not provided Siddhi assumes that the arriving event adhere to a \npredefined format based on the stream definition and the selected message format.  Purpose  Source provides a way to Siddhi consume events from external systems and map the events to adhere to the associated stream.   Syntax  To configure a stream to consume events via a source, add the source configuration to a stream definition by adding the  @source  annotation with the required parameter values. \nThe source syntax is as follows:  @ source ( type = 'source_type' ,   static . option . key1 = 'static_option_value1' ,   static . option . keyN = 'static_option_valueN' , \n     @ map ( type = 'map_type' ,   static . option_key1 = 'static_option_value1' ,   static . option . keyN = 'static_option_valueN' , \n         @ attributes (   attributeN = 'attribute_mapping_N' ,   attribute1 = 'attribute_mapping_1' ) \n     )  )  define   stream   stream_name   ( attribute1   Type1 ,   attributeN   TypeN );   Source  The  type  parameter of  @source  defines the source type that receives events. The other parameters to be configured \ndepends on the source selected, some of those can also be optional values. \nFor detailed information about the parameters refer the appropriate source documentation.  Some of the supports source types are:   TCP  Kafka    HTTP   (Only works in WSO2 Stream Processor)    MQTT    RabbitMQ    In-Memory  File   (Only works in WSO2 Stream Processor)    JMS   (Only works in WSO2 Stream Processor)     E-mail    (Only works in WSO2 Stream Processor)    WSO2-Event   (Only works in WSO2 Stream Processor)     Source Mapper  Each  @source  will have a mapping denoted by  @map  that converts the incoming message format to Siddhi event.  The  type  parameter of  @map  defines the map type that's responsible of mapping the data. The other parameters to be \nconfigured depends on the mapper selected, some of those can also be optional values. \nFor detailed information about the parameters refer the appropriate mapper documentation.   Tip  When  @map  is not provided  @map(type='passThrough')  will be used as default. This can be used when source consumes Siddhi events and when it does not need any mappings.   Map Attributes  @attributes  is an optional parameter of  @map  to define custom mapping. When  @attributes  is not provided each mapper\nassumes that the incoming events will be adhere to it's own expected default data format. By defining  @attributes  you \ncan configure mappers to extract data from the incoming message selectively and assign then to attributes.   There are two ways you can configure  @attributes .    Defining attributes as keys and mapping content as value in the following format:   @attributes( attributeN='mapping_N', attribute1='mapping_1')    Defining all attributes' mapping content in the same order as how the attributes are defined in stream definition:   @attributes( 'mapping_1', 'mapping_N')     Some of the supports source mappings are:   JSON  XML  Binary  Text  Key-Value   Example  The following query receives events via the  HTTP  source on  JSON  data format, and passes them in the  InputStream  stream for processing. \nHere the HTTP source is configured to receive events on all network interfaces on port  8080  on the context  foo , and \nits protected by basic authentication.  @ source ( type = 'http' ,   receiver . url = 'http://0.0.0.0:8080/foo' ,   is . basic . auth . enabled = 'true' ,  \n   @ map ( type = 'json' ))  define   stream   InputStream   ( name   string ,   age   int ,   country   string );",
            "title": "Sources"
        },
        {
            "location": "/documentation/siddhi-4.0/#sinks",
            "text": "Sinks allow you to publish events from the streams via multiple transports to external endpoints with various data formats.  Sink let you define a mapping to convert the Siddhi event to appropriate output data format (such as  JSON ,  TEXT ,  XML , etc), \nwhen customization to such mappings is not provided Siddhi converts events to its default format based on the stream definition and \nthe selected data format and publish the events.  Purpose  Sink provides a way to publish Siddhi events to external systems in their preferred data format.   Syntax  To configure a stream to publish events via a Sink, add the sink configuration to a stream definition by adding the  @sink  \nannotation with the required parameter values. The sink syntax is as follows:  @ sink ( type = 'sink_type' ,   static_option_key1 = 'static_option_value1' ,   dynamic_option_key1 = '{{dynamic_option_value1}}' , \n     @ map ( type = 'map_type' ,   static_option_key1 = 'static_option_value1' ,   dynamic_option_key1 = '{{dynamic_option_value1}}' , \n         @ payload ( 'payload_mapping' ) \n     )  )  define   stream   stream_name   ( attribute1   Type1 ,   attributeN   TypeN );    Dynamic Properties  The Sink and Sink mapper properties that are categorised as  dynamic  have the ability to absorb attributes values \nfrom their associated Streams. This can be done by using the attribute names in double curly braces as  {{...}}  when configuring the property value.   Some valid dynamic properties values are:    '{{attribute1}}'  'This is {{attribute1}}'    {{attribute1}} > {{attributeN}}      Here the attribute names in the double curly braces will be replaced with event values during execution.    Sink  The  type  parameter of  @sink  defines the sink type that publishes the events. The other parameters to be configured \ndepends on the sink selected, some of those can also be optional and some can be dynamic values. \nFor detailed information about the parameters refer the appropriate sink documentation.  Some of the supports sink types are:   TCP  Kafka    E-mail    (Only works in WSO2 Stream Processor)    MQTT    RabbitMQ    In-Memory  File   (Only works in WSO2 Stream Processor)    HTTP   (Only works in WSO2 Stream Processor)    JMS   (Only works in WSO2 Stream Processor)     WSO2-Event   (Only works in WSO2 Stream Processor)     Sink Mapper  Each  @sink  will have a mapping denoted by  @map  that converts the Siddhi event to an outgoing message format.  The  type  parameter of  @map  defines the map type that's responsible of mapping the event. The other parameters to be configured depends on the mapper selected, some of those can also be optional or dynamic values. \nFor detailed information about the parameters refer the appropriate mapper documentation.   Tip  When  @map  is not provided  @map(type='passThrough')  will be used as default. This can be used when Sink can publish Siddhi events and when it does not need any mappings.   Map Payload  @payload  is an optional parameter of  @map  to define a custom mapping. When  @payload  is not provided each mapper\nmaps the outgoing events to it's own default data format. By defining  @payload  you \ncan configure mappers to produce the output payload as of your choice using dynamic properties by selectively assigning \nthe attributes on your preferred format.   There are two ways you can configure  @payload .    Some mappers such as  XML ,  JSON , and  Test  accepts only one output payload using the following format:   @payload( 'This is a test message from {{user}}.' )    Some mappers such  key-value  accepts series of mapping values defined as:   @payload( key1='mapping_1', key2='user : {{user}}')     Some of the supports sink mappings are:   JSON  XML  Binary  Text  Key-Value   Example  The following query publishes events from  OutputStream  via the  HTTP  Sink. Here the events are mapped to default  JSON  payloads and sent to  http://localhost:8005/endpoint \n using  POST  method,  Accept  header, and basic authentication having  admin  as both the username and the password.  @ sink ( type = 'http' ,   publisher . url = 'http://localhost:8005/endpoint' ,   method = 'POST' ,   headers = 'Accept-Date:20/02/2017' ,  \n   basic . auth . username = 'admin' ,   basic . auth . password = 'admin' ,   basic . auth . enabled = 'true' , \n   @ map ( type = 'json' ))  define   stream   OutputStream   ( name   string ,   ang   int ,   country   string );",
            "title": "Sinks"
        },
        {
            "location": "/documentation/siddhi-4.0/#query",
            "text": "Each Siddhi query can consume one/more streams and zero/one table, process the events in streaming manner and generate a\n output event to a stream or performs CRUD operation to a table.  Purpose  Query enables you to perform Complex Event Processing and Stream Processing operations by processing incoming events one by one in the arrival order.   Syntax  All queries contain an input and output section, some also contain a projection section. A simple query with all three sections is as follows.  from   < input   stream >   select   < attribute   name > ,   < attribute   name > ,   ...  insert   into   < output   stream / table >   Example  Following simple query in the Siddhi App consumes events from defined  TempStream  stream and output the room temperature and room number to  RoomTempStream  stream.  define   stream   TempStream   ( deviceID   long ,   roomNo   int ,   temp   double );  from   TempStream   select   roomNo ,   temp  insert   into   RoomTempStream ;    Inferred Stream  Here the  RoomTempStream  is an inferred Stream, i.e.  RoomTempStream  can be used as any other defined stream \nwithout explicitly defining its Stream Definition and the definition of the  RoomTempStream  will be inferred from the \nfirst query that produces the Stream.",
            "title": "Query"
        },
        {
            "location": "/documentation/siddhi-4.0/#query-projection",
            "text": "Siddhi queries supports the following for query projections.  \n     \n         Action \n         Description \n     \n     \n         Selecting required objects for projection \n         This involves selecting only some of the attributes from the input stream to be inserted into an output stream.\n             \n            E.g., The following query selects only the `roomNo` and `temp` attributes from the `TempStream` stream.\n             from TempStream select roomNo, temp insert into RoomTempStream; \n         \n     \n     \n         Selecting all attributes for projection \n         Selecting all the attributes in an input stream to be inserted into an output stream. This can be done by using asterisk ( * ) or by omitting the `select` statement.\n             \n            E.g., Use one of the following queries to select all the attributes in the `NewTempStream` stream.\n             from TempStream select * insert into NewTempStream; \n            or\n             from TempStream insert into NewTempStream; \n         \n     \n     \n         Renaming attributes \n         This selects attributes from the input streams and inserting them into the output stream with different names.\n             \n            E.g., The following query renames `roomNo` to `roomNumber` and `temp` to `temperature`.\n             from TempStream  select roomNo as roomNumber, temp as temperature insert into RoomTempStream; \n         \n     \n     \n         Introducing the constant value \n         This adds constant values by assigning it to an attribute using `as`.\n             \n            E.g., Using 'C' as the constant value for `scale` attribute. \n             from TempStream select roomNo, temp, 'C' as scale insert into RoomTempStream; \n         \n     \n     \n         Using mathematical and logical expressions \n         This uses attributes with mathematical and logical expressions in the precedence order given below, and assign them to the output attribute using `as`.\n             \n             Operator precedence \n             \n                 \n                     Operator \n                     Distribution \n                     Example \n                 \n                 \n                     \n                        ()\n                     \n                     \n                        Scope\n                     \n                     \n                         (cost + tax) * 0.05 \n                     \n                 \n                 \n                     \n                         IS NULL\n                     \n                     \n                        Null check\n                     \n                     \n                         deviceID is null \n                     \n                 \n                 \n                     \n                        NOT\n                     \n                     \n                        Logical NOT\n                     \n                     \n                         not (price > 10) \n                     \n                 \n                 \n                     \n                         *   /   %  \n                     \n                     \n                        Multiplication, division, modulo\n                     \n                     \n                         temp * 9/5 + 32 \n                     \n                 \n                 \n                     \n                        +   -  \n                     \n                     \n                        Addition, substraction\n                     \n                     \n                         temp * 9/5 - 32 \n                     \n                 \n                 \n                     \n                         <     < =   >   >=\n                     \n                     \n                        Comparators: less-than, greater-than-equal, greater-than, less-than-equal\n                     \n                     \n                         totalCost >= price * quantity \n                     \n                 \n                 \n                     \n                        ==   !=  \n                     \n                     \n                        Comparisons: equal, not equal\n                     \n                     \n                         totalCost !=  price * quantity \n                     \n                 \n                 \n                     \n                        IN\n                     \n                     \n                        Contains in table\n                     \n                     \n                         roomNo in ServerRoomsTable \n                     \n                 \n                 \n                     \n                        AND\n                     \n                     \n                        Logical AND\n                     \n                     \n                         temp  <  40 and (humidity  <  40 or humidity >= 60) \n                     \n                 \n                 \n                     \n                        OR\n                     \n                     \n                        Logical OR\n                     \n                     \n                         temp  <  40 or (humidity  <  40 and humidity >= 60) \n                     \n                 \n             \n            E.g., Converting Celsius to Fahrenheit and identifying rooms with room number between 10 and 15 as server rooms.\n             from TempStream select roomNo, temp * 9/5 + 32 as temp, 'F' as scale, roomNo > 10 and roomNo  <  15 as isServerRoom insert into RoomTempStream;",
            "title": "Query Projection"
        },
        {
            "location": "/documentation/siddhi-4.0/#functions",
            "text": "A function consumes zero, one or more parameters and always produces a result value. It can be used any location where\n an attribute can be used.   Purpose  Functions encapsulates complex making the Siddhi application simple and easy to understand.   Function Parameters  Functions parameters can be attributes, constant values, results of other functions, results of mathematical or logical expressions or time parameters. \nFunction parameters depending on the function being called.  Time is a special parameter that can we defined using the integer time value followed by its unit as  <int> <unit> . \nFollowing are the supported unit types. Upon execution time returns the value in the scale of milliseconds as a long value.   \n     \n         \n            Unit  \n         \n         \n            Syntax\n         \n     \n     \n         \n            Year\n         \n         \n            year | years\n         \n     \n     \n         \n            Month\n         \n         \n            month | months\n         \n     \n     \n         \n            Week\n         \n         \n            week | weeks\n         \n     \n     \n         \n            Day\n         \n         \n            day | days\n         \n     \n     \n         \n            Hour\n         \n         \n           hour | hours\n         \n     \n     \n         \n           Minutes\n         \n         \n           minute | minutes | min\n         \n     \n     \n         \n           Seconds\n         \n         \n           second | seconds | sec\n         \n     \n     \n         \n           Milliseconds\n         \n         \n           millisecond | milliseconds\n         \n       E.g. Passing 1 hour and 25 minutes to  test()  function.  test(1 hour 25 min)   Note  Functions, mathematical expressions, and logical expressions can be used in a nested manner.   Following are some inbuilt functions shipped with Siddhi, for more functions refer execution  extensions .   eventTimestamp  log  UUID  default  cast  convert  ifThenElse  minimum  maximum  coalesce  instanceOfBoolean  instanceOfDouble  instanceOfFloat  instanceOfInteger  instanceOfLong  instanceOfString   Example  The following configuration converts the  roomNo  to  string  and adds a  messageID  to each event using the  convert  and  UUID  functions.  from   TempStream  select   convert ( roomNo ,   'string' )   as   roomNo ,   temp ,   UUID ()   as   messageID  insert   into   RoomTempStream ;",
            "title": "Functions"
        },
        {
            "location": "/documentation/siddhi-4.0/#filters",
            "text": "Filters are included in queries to filter information from input streams based on a specified condition.  Purpose  A filter allows you to separate events that match a specific condition as the output, or for further processing.  Syntax  Filter conditions should be defined in square brackets next to the input stream name as shown below.  from   < input   stream > [ < filter   condition > ]  select   < attribute   name > ,   < attribute   name > ,   ...  insert   into   < output   stream >   Example  The following query filters all server rooms within the range of 100 and 210, and having temperature greater than 40 degrees \nfrom the  TempStream  stream, and inserts the results into the  HighTempStream  stream.  from   TempStream [( roomNo   >=   100   and   roomNo   <   210 )   and   temp   >   40 ]  select   roomNo ,   temp  insert   into   HighTempStream ;",
            "title": "Filters"
        },
        {
            "location": "/documentation/siddhi-4.0/#windows",
            "text": "Windows allow you to capture a subset of events based on a specific criterion from an input stream for calculation. \nEach input stream can only have maximum of one window.  Purpose  To create subsets of events within a stream based on time duration, number of events, etc for processing. \nWindow can operate on sliding or tumbling (batch) manner.  Syntax  The  #window  prefix should be inserted next to the relevant stream in order to use a window.  from   < input   stream ># window . < window   name > ( < parameter > ,   < parameter > ,   ...   )  select   < attribute   name > ,   < attribute   name > ,   ...  insert   < event   type >   into   < output   stream >    Note  Filter condition can be applied both before and/or after the window   Example  If you want to identify the maximum temperature out of last 10 events, you need to define a  length  window of 10 events.\n This window operates as a sliding mode where the following 3 subsets will be calculated when a list of 12 events are received in a sequential order.     Subset  Event Range      1  1-10    2  2-11    3  3-12     The following query finds the maximum temperature out of  last 10 events  from the  TempStream  stream, \nand inserts the results into the  MaxTempStream  stream.  from   TempStream # window . length ( 10 )  select   max ( temp )   as   maxTemp  insert   into   MaxTempStream ;   If you define the maximum temperature reading out of every 10 events, you need to define a  lengthBatch  window of 10 events.\n Where this window operates as a batch/tumbling mode where the following 3 subsets will be calculated when a list of 30 events are received in a sequential order.     Subset  Event Range      1  1-10    2  11-20    3  21-30     The following query finds the maximum temperature out of  every 10 events  from the  TempStream  stream, \nand inserts the results into the  MaxTempStream  stream.  from   TempStream # window . lengthBatch ( 10 )  select   max ( temp )   as   maxTemp  insert   into   MaxTempStream ;    Note  Similar operations can also be done time with  time  window and  timeBatch  window and for others. \nCode segments such as  #window.time(10 min)  will consider events in last 10 minutes in a sliding manner and  #window.timeBatch(2 min)  will consider events every 2 minutes in a tumbling manner.    Following are some inbuilt windows shipped with Siddhi, for more window types refer execution  extensions .    time  timeBatch  length  lengthBatch  sort  frequent  lossyFrequent  cron  externalTime  externalTimeBatch   Output event type  Projection of the query depends on the output event types such as,  current  and  expired  event types.\n By default all queries produce  current  events and only queries with windows produce  expired  events \n when events expire from the window.\n By controlling the event types outputted you will be able to manipulate the output of the query.   Note!  Controlling the output event types will not alter the execution within the query and will not affect the correctness of the query execution.    The following keywords can be used with the output stream to manipulate output.      Output event types  Description      current events  Output events when incoming events arrives to the query.   This is the default functionality of no output event types is specified.    expired events  Output events when events expires from the window.    all events  Output events when incoming events arrives to the query and   when events expires from the window.     The output event type keyword can be used between  insert  and  into  as given in the following example.  Example  Delay all events in a stream by 1 minute.    from   TempStream # window . time ( 1   min )  select   *  insert   expired   events   into   DelayedTempStream",
            "title": "Windows"
        },
        {
            "location": "/documentation/siddhi-4.0/#aggregate-functions",
            "text": "Aggregate functions perform aggregate calculations in the query. \nWhen a window is defined the aggregation will get restricted within that window and if no window is provided they will aggregate from the start of the Siddhi application.  Syntax  from   < input   stream ># window . < window   name > ( < parameter > ,   < parameter > ,   ...   )  select   < aggregate   function > ( < parameter > ,   < parameter > ,   ...   )   as   < attribute   name > ,   < attribute2   name > ,   ...  insert   into   < output   stream > ;   Aggregate Parameters  Aggregate parameters can be attributes, constant values, results of other functions or aggregates, results of mathematical or logical expressions or time parameters. \nAggregate parameters depending on the Aggregation being called.  Example  The following query calculates the average of  temp  attribute of  TempStream  stream for the last \n10 minutes and emit it as `avgTemp``.  from   TempStream # window . time ( 10   min )  select   avg ( temp )   as   avgTemp ,   roomNo ,   deviceID  insert   into   AvgTempStream ;   Following are some inbuilt aggregation functions shipped with Siddhi, for more aggregation functions refer execution  extensions .    avg  sum  max  min  count  distinctCount  maxForever  minForever  stdDev",
            "title": "Aggregate functions"
        },
        {
            "location": "/documentation/siddhi-4.0/#group-by",
            "text": "Group By allows you to group the aggregate based on specified attributes.  Syntax  from   < input   stream ># window . < window   name > (...)  select   < aggregate   function > (   < parameter > ,   < parameter > ,   ...)   as   < attribute1   name > ,   < attribute2   name > ,   ...  group   by   < attribute1   name > ,   < attribute2   name >   ...  insert   into   < output   stream > ;   Example \nThe following query calculates the average temperature per  roomNo  and  deviceID  combination \nfor sliding 10 minutes time from the  TempStream  stream.  from   TempStream # window . time ( 10   min )  select   avg ( temp )   as   avgTemp ,   roomNo ,   deviceID  group   by   roomNo ,   deviceID  insert   into   AvgTempStream ;",
            "title": "Group By"
        },
        {
            "location": "/documentation/siddhi-4.0/#having",
            "text": "Having allows you to filter events after processing the  select  statement,\n this will be helpful to filter the aggregation output.  Syntax  from   < input   stream ># window . < window   name > (   ...   )  select   < aggregate   function > (   < parameter > ,   < parameter > ,   ...)   as   < attribute1   name > ,   < attribute2   name > ,   ...  group   by   < attribute1   name > ,   < attribute2   name >   ...  having   < condition >  insert   into   < output   stream > ;   Example  The following query calculates the average temperature per room for the last 10 minutes, and alerts if it exceeds 30 degrees.  from   TempStream # window . time ( 10   min )  select   avg ( temp )   as   avgTemp ,   roomNo  group   by   roomNo  having   avgTemp   >   30  insert   into   AlertStream ;",
            "title": "Having"
        },
        {
            "location": "/documentation/siddhi-4.0/#output-rate-limiting",
            "text": "Output rate limiting allows queries to emit events periodically based on the condition specified.  Purpose  This allows you to limit the output to avoid overloading following executions and to remove unnecessary information.  Syntax  The following is the syntax of an output rate limiting configuration.  from   < input   stream >   ...  select   < attribute   name > ,   < attribute   name > ,   ...  output   < rate   limiting   configuration >  insert   into   < output   stream >   Three type of output rate limiting configuration are available, such as      Rate limiting configuration  Syntax  Description      Based on time  <output event> every <time interval>  Output  <output event>  for every given  <time interval>  time interval.    Based on number of events  <output event> every <event interval> events  Output  <output event>  for every  <event interval>  number of events.    Snapshot based output  snapshot every <time interval>  Output all events in the window (or the last event if no window is defined in the query) for every given  <time interval>  time interval.     Here the  <output event>  specifies which event(s) should be emitted as the output of the query. \nThe possible values are as follows:   first  : Only the first event processed by the query in the specified time interval/sliding window is emitted.   last  : Only the last event processed by the query in the specified time interval/sliding window is emitted.\n*  all  : All the events processed by the query in the specified time interval/sliding window are emitted.  When no  <output event>  is defined  all  will be used as default.  Examples    Emitting events based on number of events  Here the events are emitted every time the specified number of events arrive. You can also specify whether to emit only the first event, last event, or all events out of the events that arrived.  In this example, the last temperature per sensor is emitted for every 10 events.    from   TempStreamselect   select   temp ,   deviceID  group   by   deviceID  output   last   every   10   events  insert   into   LowRateTempStream ;     Emitting events based on time  Here events are emitted for every predefined time interval. You can also specify whether to to emit only the first event, last event, or all events out of the events that arrived during the specified time interval.  In this example, emits all temperature events every 10 seconds        from   TempStreamoutput   output   every   10   sec  insert   into   LowRateTempStream ;     Emitting a periodic snapshot of events  This method works best with windows. When an input stream is connected to a window, snapshot rate limiting emits all the current events that have arrived and do not have corresponding expired events for every predefined time interval. \nIf the input stream is not connected to a window, only the last current event for each predefined time interval is emitted.  The following query emits snapshot of the events in a time window of 5 seconds every 1 second.     from   TempStream # window . time ( 5   sec )  output   snapshot   every   1   sec  insert   into   SnapshotTempStream ;",
            "title": "Output rate limiting"
        },
        {
            "location": "/documentation/siddhi-4.0/#tables",
            "text": "A table is a stored version of an stream or a table of events. It's schema is defined via the  table definition  thats\nquite similar to a stream definition. These events are by default stored  in-memory  but Siddhi also provides store extension to work with data/events stored in various data stores through the \ntable abstraction.  Purpose  Tables allow Siddhi to work with stored events. By defining a schema to table Siddhi enables them to be processed at queries using their defined attributes with the streaming data, and also interactively query the state of the stored events in the table.  Syntax  The following is the syntax for defining a new table.  define   stream   < stream   name >   ( < attribute   name >   < attribute   type > ,   < attribute   name >   < attribute   type > ,   ...   );   Example  The following creates a table named  RoomTypeTable  with the attributes  roomNo  with  int  type,  type  with  string  type.  define   table   RoomTypeTable   (   roomNo   int ,   type   string   );   Primary Keys and Indexes  Event tables can be configured with primary keys to avoid the duplication of data, and indexes for fast event access.  Primary keys are configured by including the  @PrimaryKey  annotation to the table configuration. The combined value of the primary key attribute should be unique for each entry saved in the table. This ensures that entries in the table are not duplicated.  Indexes are configured by including the  @Index  annotation within the event table configuration. Each event table configuration can have only one  @Index  annotation. However, multiple attributes can be specified as index attributes via a single annotation. When the  @Index  annotation is defined, multiple entries can be stored for a given key in the table. Indexes can be configured together with primary keys.   Examples   Configuring primary keys\nThe following query creates an event table with the  symbol  attribute defined as the primary key. Therefore, each entry in this table should have a unique value for the  symbol  attribute.   @ PrimaryKey ( 'symbol' )  define   table   StockTable   ( symbol   string ,   price   float ,   volume   long );    Configuring indexes   The following query creates an indexed event table named  RoomTypeTable  with the attributes  roomNo  (as an  INT  attribute) and  type  (as a  STRIN G attribute). All entries in the table are to be indexed by the  roomNo  attribute.  @ Index ( 'roomNo' )  define   table   RoomTypeTable   ( roomNo   int ,   type   string );",
            "title": "Tables"
        },
        {
            "location": "/documentation/siddhi-4.0/#join",
            "text": "Syntax  from   < input   stream   name ># window . length ( 1 )   join   < table_name > \n     on   < input   stream   name > . < attribute   name >   < condition >   < table_name > . < table   attribute   name >  select   < input   stream   name > . < attribute   name > ,   < table_name > . < table   attribute   name > ,   ...  insert   into   < output   stream   name >   At the time of joining, the event table should not be associated with window operations because an event table is not an active construct. Two event tables cannot be joined with each other due to the same reason.  Purpose  To allow a stream to retrieve information from an event table.  Parameters  Example  The following query performs a join to update the room number of the events in the  TempStream  stream with that of the corresponding events in the  RoomTypeTable  event table, and then inserts the updated events into the  EnhancedTempStream  stream.  define   table   RoomTypeTable   ( roomNo   int ,   type   string );  define   stream   TempStream   ( deviceID   long ,   roomNo   int ,   temp   double );  from   TempStream   join   RoomTypeTable \n     on   RoomTypeTable . roomNo   ==   TempStream . roomNo  select   deviceID ,   RoomTypeTable . roomNo   as   roomNo ,   type ,   temp  insert   into   EnhancedTempStream ;",
            "title": "Join"
        },
        {
            "location": "/documentation/siddhi-4.0/#supported-event-table-operators",
            "text": "The following event table operators are supported for Siddhi.",
            "title": "Supported Event Table Operators"
        },
        {
            "location": "/documentation/siddhi-4.0/#insert-into",
            "text": "Syntax  from   < input   stream   name >   select   < attribute   name > ,   < attribute   name > ,   ...  insert   into   < table   name >   To insert only the specified output event category, use the  current events ,  expired events  or the  all events  keyword between  insert  and  into  keywords. For more information, see Output Event Categories.  Purpose  To store filtered events in a specific event table.  Parameters    input stream name : The input stream from which the events are taken to be stored in the event table.    attribute name : Attributes of the chosen events that are selected to be saved in the event table.    table name : The name of the event table in which the events should be saved.    Example  The following query inserts all the temperature events from the  TempStream  event stream to the  TempTable  event table.  from   TempStream  select   *  insert   into   TempTable ;",
            "title": "Insert into"
        },
        {
            "location": "/documentation/siddhi-4.0/#delete",
            "text": "Syntax  from   < input   stream   name >   select   < attribute   name > ,   < attribute   name > ,   ...  delete   < table   name > \n     on   < condition >   The  condition  element specifies the basis on which events are selected to be deleted. When specifying this condition, the attribute names should be referred to with the table name.\nTo delete only the specified output category, use the  current events ,  expired events  or the  all events  keyword. For more information, see Output Event Categories.  Purpose  To delete selected events that are stored in a specific event table.  Parameters    input stream name : The input stream that is the source of the events stored in the event table.    attribute name : Attributes to which the given condition is applied in order to filter the events to be deleted.    table name : The name of the event table from which the filtered events are deleted.    condition : The condition based on which the events to be deleted are selected.    Example  The following query deletes all the entries in the  RoomTypeTable  event table that have a room number that matches the room number in any event in the  DeleteStream  event stream.  define   table   RoomTypeTable   ( roomNo   int ,   type   string );  define   stream   DeleteStream   ( roomNumber   int );  from   DeleteStream  delete   RoomTypeTable \n     on   RoomTypeTable . roomNo   ==   roomNumber ;",
            "title": "Delete"
        },
        {
            "location": "/documentation/siddhi-4.0/#update",
            "text": "Syntax  from   < input   stream   name >   select   < attribute   name >   as   < table   attribute   name > ,   < attribute   name >   as   < table   attribute   name > ,   ...  update   < table   name > \n     on   < condition >   The  condition  element specifies the basis on which events are selected to be updated. When specifying this condition, the attribute names should be referred to with the table name.\nTo update only the specified output category, use the  current events ,  expired events  or the  all events  keyword. For more information, see Output Event Categories.  Purpose  To update selected events in an event table.  Parameters    input stream name : The input stream that is the source of the events stored in the event table.    attribute name : Attributes to which the given  condition  is applied in order to filter the events to be updated.    table name : The name of the event table in which the filtered events should be updated.    condition : The condition based on which the events to be updated are selected.    Example  The following query updates room type of all the events in the  RoomTypeTable  event table that have a room number that matches the room number in any event in the  UpdateStream  event stream.  define   table   RoomTypeTable   ( roomNo   int ,   type   string );  define   stream   UpdateStream   ( roomNumber   int ,   roomType   string );  from   UpdateStream  select   roomType   as   type  update   RoomTypeTable \n     on   RoomTypeTable . roomNo   ==   roomNumber ;",
            "title": "Update"
        },
        {
            "location": "/documentation/siddhi-4.0/#insert-overwrite",
            "text": "Syntax  from   < input   stream   name >   select   < attribute   name >   as   < table   attribute   name > ,   < attribute   name >   as   < table   attribute   name > ,   ...  insert   overwrite   < table   name > \n     on   < condition >   The  condition  element specifies the basis on which events are selected to be inserted or overwritten. When specifying this condition, the attribute names should be referred to with the table name.\nWhen specifying the  table attribute  name, the attributes should be specified with the same name specified in the event table, allowing Siddhi to identify the attributes that need to be updated/inserted in the event table.  Purpose  Parameters    input stream name : The input stream that is the source of the events stored in the event table.    attribute name : Attributes to which the given  condition  is applied in order to filter the events to be inserted or over-written.    table name : The name of the event table in which the filtered events should be inserted or over-written.    condition  : The condition based on which the events to be inserted or over-written are selected.    Example  The following query searches for events in the  UpdateTable  event table that have room numbers that match the same in the  UpdateStream  stream. When such events are founding the event table, they are updated. When a room number available in the stream is not found in the event table, it is inserted from the stream.  ```sql\n define table RoomTypeTable (roomNo int, type string);\n define stream UpdateStream (roomNumber int, roomType string);  from UpdateStream\n select roomNumber as roomNo, roomType as type\n insert overwrite RoomTypeTable\n     on RoomTypeTable.roomNo == roomNo;\n ```",
            "title": "Insert Overwrite"
        },
        {
            "location": "/documentation/siddhi-4.0/#in",
            "text": "Syntax  < condition >   in   < table   name >   The  condition  element specifies the basis on which events are selected to be inserted or overwritten. When specifying this condition, the attribute names should be referred to with the table name.  Purpose  Parameters  Example  define   table   ServerRoomTable   ( roomNo   int );  define   stream   TempStream   ( deviceID   long ,   roomNo   int ,   temp   double );  from   TempStream [ ServerRoomTable . roomNo   ==   roomNo   in   ServerRoomTable ]  insert   into   ServerTempStream ;",
            "title": "In"
        },
        {
            "location": "/documentation/siddhi-4.0/#time-based-aggregation",
            "text": "Time-based aggregation involves obtaining aggregate attribute values (i.e., sum, average, min, max etc.) for a specified time period.",
            "title": "Time based aggregation"
        },
        {
            "location": "/documentation/siddhi-4.0/#calculating-and-storing-time-based-aggregated-values",
            "text": "This section explains how to write Siddhi queries to calculate aggregate values for specific time periods as required.  Syntax  @ store ( type = \"<DATABASE_TYPE>\" )  define   aggregation   < aggregatorName >  from   < InputStreamName >  select   < attributeName > ,   < aggregate_function > ( attributeName )   as   < attributeName > ,   < aggregate_function > ( attributeName )   as   < attributeName >   ... \n     group   by   < attributeName > \n     aggregate   by   timestamp   every   < time_period > ;   The above syntax includes the following:\nItem|Description\n---------|--------- @store |This annotation is used to refer to the data source where the events for which aggregate values are to be calculated are stored. define aggregation |This specifies a unique name for the aggregation group by |The attribute by which the calculated aggregate values are grouped. Specifying an attribute to group by is optional. When an attribute is specified, the aggregate values are calculated for the required time periods per value for the specified attribute. If no attribute is specified, all the events are aggregated together. aggregate by timestamp |The time period for which the aggregate values are calculated. This is an optional parameter. If the time period is determined by an external timestamp (i.e., the timestamp specified as the value for the  _timestamp  attribute in the event), specific timestamps must be specified in the query with the  within  operator using supported formats (i.e.,  <yyyy>-<MM>-<dd> ,  <HH>:<mm>:<ss> ,  <Z>  (if time is not in GMT), and  <yyyy>-<MM>-<dd> <HH>:<mm>:<ss>  (if time is in GMT). If the time period is to be determined based on the system time, you can specify the time duration for which the aggregate values should be calculated (e.g.,  aggregate every sec...year  calculates aggregate values for the last second, minute, hour, day, month and year in a sliding manner.).  Example  @ store ( type = \"rdbms\" )  define   aggregation   testAggregator  from   tradesStream  select   symbol ,   avg ( price )   as   avgPrice ,   sum ( price )   as   total \n     group   by   symbol \n     aggregate   by   timestamp   every   sec ... year ;   In this query, an aggregator named  testAggregator calculates the average price and the sum of prices of the events that arrive at the  tradesStream  stream every second. These average and total are calculated per symbol, and in each second, the average and sum relevant for the last second, minute, hour, day, month, and year are output, and stored in the RDBMS database.",
            "title": "Calculating and storing time-based aggregated values"
        },
        {
            "location": "/documentation/siddhi-4.0/#retrieving-aggregate-values",
            "text": "This section explain how to retrieve aggregate values that are already calculated and persisted in the system. Syntax  define   stream   ` InputStreamName `   ( < attributeName >   < ATTRIBUTE_TYPE > ,   < attributeName >   < ATTRIBUTE_TYPE >   ...);  from   InputStreamName   as   b   join   < AGGREGATION_NAME >   as   a  on   a . symbol   ==   b . symbol   within   \"<START_TIME>\" ,   \"<END_TIME>\"   per   \"<TIME_PERIOD>\"   select   a . < attributeName > ,   a . < attributeName > ,   a . < attributeName >   insert   into   fooBar ;   The above syntax includes the following:\nItem|Description\n---------|--------- within \"<START_TIME>\", \"<END_TIME>\" |This allows you to specify the time interval for which the aggregate values need to be retrieved by specifying the timestamps for the start time and the end time. per \"<TIME_PERIOD>\" |This specifies the time period by which the aggregate values must be grouped. e.g., If you specify  days , the retrieved aggregate vlaues are displayed for each day within the selected time interval.  Example  define   stream   barStream   ( symbol   string ,   value   int );  from   barStream   as   b   join   testAggregator   as   a  on   a . symbol   ==   b . symbol   within   \"2014-02-15 00:00:00 +05:30\" ,   \"2014-03-16 00:00:00 +05:30\"   per   \"days\"   select   a . symbol ,   a . total ,   a . avgPrice   insert   into   fooBar ;   This query performs a join to match events arriving at the  barStream  stream with the events calculated and persisted by the  testAggregator  aggregator. If the value for the  symbol  attribute of an event that arrives in an input stream is the same as that of an event persisted by the aggregator, the aggregated values already calculated for it for the time period between  2014-02-15 00:00:00 +05:30  and  2014-03-16 00:00:00 +05:30  are retrieved. The aggregate values (i.e., average and the total in this scenario) for the last day is retrieved. The output events are inserted into the  FooBar  output stream.",
            "title": "Retrieving aggregate values"
        },
        {
            "location": "/documentation/siddhi-4.0/#joins",
            "text": "Join allows two event streams to be merged based on a condition. In order to carry out a join, each stream should be connected to a window. If no window is specified, a window of zero length ( #window.length(0) ) is assigned to the input event stream by default. During the joining process each incoming event on each stream is matched against all the events in the other input event stream window based on the given condition. An output event is generated for all the matching event pairs.  Syntax \nThe syntax for a join is as follows:  from   < input   stream   name > [ < filter   condition > ] # window . < window   name > ( < parameter > ,   ...   )   { unidirectional }   { as   < reference > } \n          join   < input   stream   name ># window . < window   name > ( < parameter > ,    ...   )   { unidirectional }   { as   < reference > } \n     on   < join   condition > \n     within   < time   gap >  select   < attribute   name > ,   < attribute   name > ,   ...  insert   into   < output   stream   name >   Example  define   stream   TempStream ( deviceID   long ,   roomNo   int ,   temp   double );  define   stream   RegulatorStream ( deviceID   long ,   roomNo   int ,   isOn   bool );  from   TempStream [ temp   >   30 . 0 ] # window . time ( 1   min )   as   T \n   join   RegulatorStream [ isOn   ==   false ] # window . length ( 1 )   as   R \n   on   T . roomNo   ==   R . roomNo  select   T . roomNo ,   R . deviceID ,   'start'   as   action  insert   into   RegulatorActionStream ;   WSO2 Siddhi currently supports the following types of joins.",
            "title": "Joins"
        },
        {
            "location": "/documentation/siddhi-4.0/#left-outer-join",
            "text": "Outer join allows two event streams to be merged based on a condition. However, it returns all the events of left stream even if there are no matching events in the right stream. Here each stream should be associated with a window. During the joining process, each incoming event of each stream is matched against all the events in the other input event stream window based on the given condition. Incoming events of the right stream are matched against all events in the left event stream window based on the given condition. An output event is generated for all the matching event pairs. An output event is generated for incoming events of the left stream even if there are no matching events in right stream.  Example \nThe following query generates output events for all the events in the  stockStream  stream whether there is a match for the symbol in the  twitterStream  stream or not.  from   stockStream # window . length ( 2 )   left   outer   join   twitterStream # window . length ( 1 )  on   stockStream . symbol ==   twitterStream . symbol  select   stockStream . symbol   as   symbol ,   twitterStream . tweet ,   stockStream . price  insert   all   events   into   outputStream   ;",
            "title": "Left Outer Join"
        },
        {
            "location": "/documentation/siddhi-4.0/#right-outer-join",
            "text": "This is similar to left outer join. It returns all the events of the right stream even if there are no matching events in the left stream. Incoming events of the left stream are matched against all events in the right event stream window based on the given condition. An output event is generated for all the matching event pairs. An output event is generated for incoming events of the right stream even if there are no matching events in left stream.  e.g., The following generates output events for all the incoming events of each stream whether there is a match for the symbol in the other stream or not.",
            "title": "Right Outer Join"
        },
        {
            "location": "/documentation/siddhi-4.0/#full-outer-join",
            "text": "The full outer join combines the results of left outer join and right outer join. An output event is generated for each incoming event even if there are no matching events in the other stream. \ne.g., The following generates output events for all the incoming events of each stream whether there is a match for the symbol in the other stream or not.  from   stockStream # window . length ( 2 )  full   outer   join   twitterStream # window . length ( 1 )  on   stockStream . symbol ==   twitterStream . symbol  select   stockStream . symbol   as   symbol ,   twitterStream . tweet ,   stockStream . price  insert   all   events   into   outputStream   ;",
            "title": "Full Outer Join"
        },
        {
            "location": "/documentation/siddhi-4.0/#full-outer-join_1",
            "text": "The full outer join combines the results of left outer join and right outer join. An output event is generated for each incoming event even if there are no matching events in the other stream.  e.g., The following generates output events for all the incoming events of each stream whether there is a match for the symbol in the other stream or not.  from stockStream#window.length(2) full outer join twitterStream#window.length(1) on stockStream.symbol== twitterStream.symbol select stockStream.symbol as symbol, twitterStream.tweet, stockStream.price insert all events into outputStream ;",
            "title": "Full Outer Join"
        },
        {
            "location": "/documentation/siddhi-4.0/#patterns-and-sequences",
            "text": "Patterns and sequences allow event streams to be correlated over time and detect event patterns based on the order of event arrival.",
            "title": "Patterns and Sequences"
        },
        {
            "location": "/documentation/siddhi-4.0/#patterns",
            "text": "Pattern allows event streams to be correlated over time and detect event patterns based on the order of event arrival. With pattern there can be other events in between the events that match the pattern condition. It creates state machines to track the states of the matching process internally. Pattern can correlate events over multiple input streams or over the same input stream. Therefore, each matched input event need to be referenced so that that it can be accessed for future processing and output generation.  Syntax \nThe following is the syntax for a pattern configuration:  from   { every }   < input   event   reference >=< input   stream   name > [ < filter   condition > ]   ->   { every }   < input   event   reference >=< input   stream   name > [ < filter   condition > ]   ->   ...          within   < time   gap >  select   < input   event   reference > . < attribute   name > ,   < input   event   reference > . < attribute   name > ,   ...  insert   into   < output   stream   name >   Example  The following query sends an alert if the temperature of a room increases by 5 degrees within 10 min.  from   every (   e1 = TempStream   )   ->   e2 = TempStream [ e1 . roomNo == roomNo   and   ( e1 . temp   +   5 )   <=   temp   ] \n     within   10   min  select   e1 . roomNo ,   e1 . temp   as   initialTemp ,   e2 . temp   as   finalTemp  insert   into   AlertStream ;   WSO2 Siddhi supports the following types of patterns:   Counting patterns  Logical patterns",
            "title": "Patterns"
        },
        {
            "location": "/documentation/siddhi-4.0/#counting-patterns",
            "text": "Counting patterns allow multiple events that may or may not have been received in a sequential order based on the same matching condition.  Syntax  The number of events matched can be limited via postfixes as explained below.     Postfix  Description  Example       n1:n2  This matches  n1  to  n2  events.  1:4  matches 1 to 4 events.     <n:>  This matches  n  or more events.  <2:>  matches 2 or more events.     <:n>  This matches up to  n  events.  <:5>  matches up to 5 events.     <n>  This matches exactly  n  events.  <5>  matches exactly 5 events.      Specific occurrences of the events that should be matched based on count limits are specified via key words and numeric values within square brackets as explained with the examples given below.   e1[3]  refers to the 3rd event.  e1[last]  refers to the last event.  e1[last - 1]  refers to the event before the last event.   Example \nThe following query calculates the temperature difference between two regulator events.  define   stream   TempStream ( deviceID   long ,   roomNo   int ,   temp   double );  define   stream   RegulatorStream ( deviceID   long ,   roomNo   int ,   tempSet   double ,   isOn   bool );  from   every (   e1 = RegulatorStream )   ->   e2 = TempStream [ e1 . roomNo == roomNo ] < 1 : >   ->   e3 = RegulatorStream [ e1 . roomNo == roomNo ]  select   e1 . roomNo ,   e2 [ 0 ]. temp   -   e2 [ last ]. temp   as   tempDiff  insert   into   TempDiffStream ;",
            "title": "Counting Patterns"
        },
        {
            "location": "/documentation/siddhi-4.0/#logical-patterns",
            "text": "Logical pattern matches events that arrive in temporal order and correlates events with logical relationships.  Syntax  Keywords such as and and or can be used instead of -> to illustrate the logical relationship.     Key Word  Description      and  This allows two events received in any order to be matched.    or  One event from either event stream can be matched regardless of the order in which the events were received.     Example: Identifying the occurence of an expected event  define   stream   TempStream ( deviceID   long ,   roomNo   int ,   temp   double );  define   stream   RegulatorStream ( deviceID   long ,   roomNo   int ,   tempSet   double );  from   every (   e1 = RegulatorStream   )   ->   e2 = TempStream [ e1 . roomNo == roomNo   and   e1 . tempSet   <=   temp   ]   or   e3 = RegulatorStream [ e1 . roomNo == roomNo ]  select   e1 . roomNo ,   e2 . temp   as   roomTemp  having   e3   is   null  insert   into   AlertStream ;   This query sends an alert when the room temperature reaches the temperature set on the regulator. The pattern matching is reset every time the temperature set on the regulator changes.",
            "title": "Logical Patterns"
        },
        {
            "location": "/documentation/siddhi-4.0/#sequences",
            "text": "Sequence allows event streams to be correlated over time and detect event sequences based on the order of event arrival. With sequence there cannot be other events in between the events that match the sequence condition. It creates state machines to track the states of the matching process internally. Sequence can correlate events over multiple input streams or over the same input stream. Therefore, each matched input event needs to be referenced so that it can be accessed for future processing and output generation. Syntax  The following is the syntax for a sequence configuration.  from   { every }   < input   event   reference >=< input   stream   name > [ < filter   condition > ],   < input   event   reference >=< input   stream   name > [ < filter   condition > ] { +|*|? } ,   ...         within   < time   gap >  select   < input   event   reference > . < attribute   name > ,   < input   event   reference > . < attribute   name > ,   ...  insert   into   < output   stream   name >   Example  The following query sends an alert if there is more than 1 degree increase in the temperature between two consecutive temperature events.  from   every   e1 = TempStream ,   e2 = TempStream [ e1 . temp   +   1   <   temp   ]  select   e1 . temp   as   initialTemp ,   e2 . temp   as   finalTemp  insert   into   AlertStream ;   WSO2 Siddhi supports the following types of sequences:   Counting sequences  Logical sequences",
            "title": "Sequences"
        },
        {
            "location": "/documentation/siddhi-4.0/#counting-sequences",
            "text": "Counting sequence allows us to match multiple consecutive events based on the same matching condition.  Syntax  The number of events matched can be limited via postfixes as explained below.     Postfix  Description      *  This matches zero or more events.    +  This matches 1 or more events.    ?  This matches zero events or one event.     Example  The following query identifies peak temperatures.  define   stream   TempStream ( deviceID   long ,   roomNo   int ,   temp   double );  define   stream   RegulatorStream ( deviceID   long ,   roomNo   int ,   tempSet   double ,   isOn   bool );  from   every   e1 = TempStream ,   e2 = TempStream [ e1 . temp   <=   temp ] + ,   e3 = TempStream [ e2 [ last ]. temp   >   temp ]  select   e1 . temp   as   initialTemp ,   e2 [ last ]. temp   as   peakTemp  insert   into   TempDiffStream ;",
            "title": "Counting sequences"
        },
        {
            "location": "/documentation/siddhi-4.0/#logical-sequences",
            "text": "Logical sequence matches events that arrive in temporal order and correlates events with logical relationships.  Syntax  Keywords such as and and or can be used instead of -> to illustrate the logical relationship.     Keyword  Description      and  This allows two events received in any order to be matched.    or  One event from either event stream can be matched regardless of the order in which the events were received.    not  When this precedes a condition in a Siddhi query, it indicates that the condition is not met.    for  This is used to define a time period within which an event should arrive. e.g.,  from not TemperatureStream[temp > 60] for 5 sec -> e1=FireAlarmStream  defines a condition for an event to arrive at the  FireAlarmStream  stream within 5 seconds after an event with a value greater than 60 for temperature arrives in the  TemperatureStream  stream.     Example 1: Identifying the occurence of an event  define   stream   TempStream ( deviceID   long ,   temp   double ); define   stream   HumidStream ( deviceID   long ,   humid   double );  define   stream   RegulatorStream ( deviceID   long ,   isOn   bool );  from   every   e1 = RegulatorStream ,   e2 = TempStream   and   e3 = HumidStream  select   e2 . temp ,   e3 . humid  insert   into   StateNotificationStream ;   This query creates a notification when a regulator event is followed by both temperature and humidity events.  Example 2: Identifying the non-occurence of an expected event \n ```sql\n define stream CustomerStream (customerId string, timestamp long);  from every not CustomerStream for 7 days\n select *\n insert into OutputStream;\n  ``\nThis query receives information about existing customers of the store from the CustomerStream stream. It identifies customers that have not visited the store for the last seven days, and outputs that information to the OutputStream stream. A message is generated from the OutputStream` stream with information for those customers about the discounts that are currently offered at the store.  Example 3: Detecting the non-occurence of an expected event following another event  define   stream   LocationStream   ( username   string ,   latitude   double ,   longitude   double );  define   stream   SpeedStream   ( username   string ,   speed   double );  from   not   LocationStream [ latitude   ==   43 . 0096   and   longitude   ==   81 . 2737 ]   for   15   minutes   and   e1 = SpeedStream [ speed   >=   60 . 0 ]  select   e1 . username   as   username  insert   into   AlertStream ;   This query receives information about the location of taxis from the  LocationStream  stream, and information about the average speed of taxis from the  SpeedStream  stream. If a taxi (i.e., a username) with an average speed greater than 60 that has not reached location at  latitude == 43.0096 and longitude == 81.2737  in 15 minutes is identified, an event is output to the  AlertStream  in order send an alert that indicates that the taxi has taken the wrong route.  Example 4: Detecting the non-occurence of multiple events  define   stream   LocationStream   ( username   string ,   latitude   double ,   longitude   double );  define   stream   StateStream   ( username   string ,   state   string );  from   not   LocationStream [ latitude   ==   43 . 0096   and   longitude   ==   81 . 2737 ]   for   30   minutes   and   not   StateStream [ state   ==   \u2018 finished \u2019 ]   for   30   minutes  select   \u2018 Danger \u2019   as   message  insert   into   AlertStream ;   This query receives information about the location of taxis from the  LocationStream  stream, and information about the status of the passenger from the  StateStream  stream. If the passenger (i.e., username) does not arrive at the location at  latitude == 43.0096 and longitude == 81.2737  in 30 minutes, and at the same time, if he/she has not marked the journey as  finished , an event is output to the  AlertStream  stream to generate an alert with  Danger  as the message.  Example 5: Detecting the non-occurence of either of two mutually exclusive events  define   stream   LocationStream   ( username   string ,   latitude   double ,   longitude   double );  from   not   LocationStream [ latitude   ==   43 . 0096   and   longitude   ==   81 . 2737 ]   for   15   minutes   or   not   LocationStream [ latitude   ==   44 . 0096   and   longitude   ==   81 . 2735 ]   for   15   minutes  select   \u2018 Unexpected   Delay \u2019   as   message  insert   into   AlertStream ;   This query receives information about the location of taxis from the  LocationStream  stream. If a taxi has not reached either the location at  latitude == 43.0096 and longitude == 81.2737 , or the one at  latitude == 44.0096 and longitude == 81.2735  in 15 minutes, an event is output to the  AlertStream  stream to generate an alert with  Unexpected Delay  as the message.  Example 6: Detecting the non-occurence of one event or the occurence of another  define   stream   LocationStream   ( username   string ,   latitude   double ,   longitude   double );  define   stream   DangerStream   ( username   string );  from   not   LocationStream [ latitude   ==   43 . 0096   and   longitude   ==   81 . 2737 ]   for   30   minutes   or   e1 = DangerStream  select   e1 . username   as   username  insert   into   AlertStream ;   This query receives information about the location of taxis from the  LocationStream  stream, and information about whether the passenger is in danger from the  DangerStream  stream. After 30 minutes, it checkes whether the passenger has reached the location at  latitude == 43.0096 and longitude == 81.2737 , or marked to indicate that he/she is in danger. If the passenger has not reached the location, or if he/she has indicated that he/she is in danger, an event is output to the  AlertStream  stream in order to generate an alert to indicate that the passenger is in danger.  Example 7: Identifying the occurence of an unexpected event within a specified time interval  define   stream   TemperatureStream   ( temp   float ,   timestamp   long );  define   stream   FireAlarmStream   ( active   boolean );  from   not   TemperatureStream [ temp   >   60 ]   for   5   sec   ->   e1 = FireAlarmStream  select   e1 . id   as   alarmId  insert   into   AlertStream ;   This query receives information about the temperature from the  TemperatureStream  stream, and information about the state of the fire alarm from the  FireAlarmStream  stream. If the state of the fire alarm is  active  within a period of 5 seconds during which the temperature is less than 60 degrees, an event is output to the  AlertStream  stream in order to indicate that the fire alarm generates false alerts.  Example 8: Identifying the non-occurence of an expected event within a specified time period  define   stream   TemperatureStream   ( temp   float ,   timestamp   long );  define   stream   FireAlarmStream   ( active   boolean );  from   TemperatureStream [ temp   >   60 ]   ->   not   FireAlarmStream [ active   ==   true ]   for   5   sec  select   'Fire alarm not working'   as   message  insert   into   AlertStream ;   This query receives information about the temperature from the  TemperatureStream  stream, and information about the state of the fire alarm from the  FireAlarmStream  stream. If an event where the state of the fire alarm is  active  does not arrive within five seconds after an event that indicates that the temperature has risen above 60 degrees, an event is output to the  AlertStream  stream with  Fire alarm not working  as the message.  Example 9: Identifying the occurence of an even that is not preceded by another expected event  define   stream   LocationStream   ( locationId   string ,   customerId   string );  from   not   LocationStream [ locationId   ==   'zoneA' ]   and   e1 = LocationStream [ locationId   ==    'billingCounter' ]  select   e1 . customerId   as   customerId ,   'Great deals are waiting for you at zone A'   as   message  insert   into   NotificationStream ;   This query receives information about the location of customers from the  LocationStream  stream. If an event indicates that a customer has reached the  bilingCounter  location, and it is not preceded by an event that indicates that the same customer has been to the  zoneA  location, an event is output to the  NotificationStream  stream in order to generate a notification with  Great deals are waiting for you at zone A  as the message.",
            "title": "Logical Sequences"
        },
        {
            "location": "/documentation/siddhi-4.0/#partitions",
            "text": "Partitions allow events and queries to be divided in order to process them in parallel and in isolation. Each partition is tagged with a partition key. Only events corresponding to this key are processed for each partition. A partition can contain one or more Siddhi queries.\nSiddhi supports both variable partitions and well as range partitions.",
            "title": "Partitions"
        },
        {
            "location": "/documentation/siddhi-4.0/#variable-partitions",
            "text": "A variable partition is created by defining the partition key using the categorical (string) attribute of the input event stream.  Syntax  partition   with   (   < attribute   name >   of   < stream   name > ,   < attribute   name >   of   < stream   name > ,   ...   ) begin \n     < query > \n     < query > \n     ...  end ;   Example  The following query calculates the maximum temperature recorded for the last 10 events emitted per sensor.  partition   with   (   deviceID   of   TempStream   ) begin \n     from   TempStream # window . length ( 10 ) \n     select   roomNo ,   deviceID ,   max ( temp )   as   maxTemp \n     insert   into   DeviceTempStream  end ;",
            "title": "Variable Partitions"
        },
        {
            "location": "/documentation/siddhi-4.0/#range-partitions",
            "text": "A range partition is created by defining the partition key using the numerical attribute of the input event stream.  Syntax  partition   with   (   < condition >   as   < partition   key >   or   < condition >   as   < partition   key >   or   ...   of   < stream   name > ,   ...   ) begin \n     < query > \n     < query > \n     ...  end ;   Example  The following query calculates the average temperature for the last 10 minutes per office area.  partition   with   (   roomNo >= 1030   as   'serverRoom'   or   roomNo < 1030   and   roomNo >= 330   as   'officeRoom'   or   roomNo < 330   as   'lobby'   of   TempStream )   ) begin \n     from   TempStream # window . time ( 10   min ) \n     select   roomNo ,   deviceID ,   avg ( temp )   as   avgTemp \n     insert   into   AreaTempStream  end ;",
            "title": "Range Partitions"
        },
        {
            "location": "/documentation/siddhi-4.0/#inner-streams",
            "text": "Inner streams can be used for query instances of a partition to communicate between other query instances of the same partition. Inner Streams are denoted by a \"#\" in front of them, and these streams cannot be accessed outside of the partition block.   Example  Per sensor, calculate the maximum temperature over last 10 temperature events when the sensor is having an average temperature greater than 20 over the last minute.  \npartition with ( deviceID of TempStream )\nbegin\n    from TempStream#window.time(1 min)\n    select roomNo, deviceID, temp, avg(temp) as avgTemp\n    insert into #AvgTempStream\n\n    from #AvgTempStream[avgTemp > 20]#window.length(10)\n    select roomNo, deviceID, max(temp) as maxTemp\n    insert into deviceTempStream\nend;",
            "title": "Inner Streams"
        },
        {
            "location": "/documentation/siddhi-4.0/#inner-streams_1",
            "text": "Inner streams can be used for query instances of a partition to communicate between other query instances of the same partition. Inner Streams are denoted by a \"#\" in front of them, and these streams cannot be accessed outside of the partition block. \nInner streams can be used for query instances of a partition to communicate between other query instances of the same partition. Inner Streams are denoted by a \"#\" in front of them, and these streams cannot be accessed outside of the partition block.  \nE.g. Per sensor, calculate the maximum temperature over last 10 temperature events when the sensor is having an average temperature greater than 20 over the last minute.  define   table   RoomTypeTable   ( roomNo   int ,   type   string );",
            "title": "Inner streams"
        },
        {
            "location": "/documentation/siddhi-4.0/#defined-windows",
            "text": "An event window is a window that can be shared across multiple queries. Events are inserted from one or more streams. The event window publishes current and/or expired events as the output. The time at which these events are published depends on the window type.  Syntax  The following is the syntax for an event window.  define   window   < event   window   name >   ( < attribute   name >   < attribute   type > ,   < attribute   name >   < attribute   type > ,   ...   )   < window   type > ( < parameter > ,   < parameter > ,   \u2026 )   < output   event   type > ;   Examples   Returning all output categories   In the following query, the window type is not specified in the window definition. Therefore, it emits both current and expired events as the output.  define   window   SensorWindow   ( name   string ,   value   float ,   roomNo   int ,   deviceID   string )   timeBatch ( 1   second );    Returning a specified output category   In the following query, the window type is  output all events . Therefore, it emits both current and expired events as the output.  define   window   SensorWindow   ( name   string ,   value   float ,   roomNo   int ,   deviceID   string )   timeBatch ( 1   second )   output   all   events ;",
            "title": "(Defined) Windows"
        },
        {
            "location": "/documentation/siddhi-4.0/#supported-event-window-operators",
            "text": "The following operators are supported for event windows.",
            "title": "Supported Event Window Operators"
        },
        {
            "location": "/documentation/siddhi-4.0/#insert-into_1",
            "text": "Syntax  from   < input   stream   name >   select   < attribute   name > ,   < attribute   name > ,   ...  insert   into   < window   name >   To insert only the specified output event category, use the  current events ,  expired events  or the  all events  keyword between  insert  and  into  keywords. For more information, see Output Event Categories.  Purpose  To insert events from an event stream to a window.  Parameters    input stream name :  The event stream from which events are inserted into the event window.    attribute name : The name of the attributes with which the events are inserted from the event stream to the event window. Multiple attributes can be specified as a comma separated list.    window name : The event window to which events are inserted from the event stream.    Example  The following query inserts both current and expired events from an event stream named  sensorStream  to an event window named  sensorWindow .  from   SensorStream  insert   into   SensorWindow ;",
            "title": "Insert Into"
        },
        {
            "location": "/documentation/siddhi-4.0/#output",
            "text": "An event window can be used as a stream in any query. However, an ordinary window cannot be applied to the output of an event window.  Syntax  from   < window   name >   select   < attribute   name > ,   < attribute   name > ,   ...  insert   into   < event   stream   name >   Purpose  To inject the output of an event window into an event stream.  Parameters    window name : The event window of which the output is injected into the specified stream.    attribute name : The name of the attributes with which the events are inserted from the event stream to the event window. Multiple attributes can be specified as a comma separated list.    event stream name : The event stream to which the output of the specified event window is injected.    Example \nThe following query selects the name and the maximum values for the  value  and  roomNo  attributes from an event window named  SensorWindow , and inserts them into an event stream named  MaxSensorReadingStream .  from   SensorWindow  select   name ,   max ( value )   as   maxValue ,   roomNo  insert   into   MaxSensorReadingStream ;",
            "title": "Output"
        },
        {
            "location": "/documentation/siddhi-4.0/#join_1",
            "text": "Example    define   stream   TempStream ( deviceID   long ,   roomNo   int ,   temp   double ); \n  define   stream   RegulatorStream ( deviceID   long ,   roomNo   int ,   isOn   bool ); \n  define   window   TempWindow ( deviceID   long ,   roomNo   int ,   temp   double )   time ( 1   min ); \n\n  from   TempStream [ temp   >   30 . 0 ] \n  insert   into   TempWindow ; \n\n  from   TempWindow \n  join   RegulatorStream [ isOn   ==   false ] # window . length ( 1 )   as   R \n  on   TempWindow . roomNo   ==   R . roomNo \n  select   TempWindow . roomNo ,   R . deviceID ,   'start'   as   action \n  insert   into   RegulatorActionStream ;",
            "title": "Join"
        },
        {
            "location": "/documentation/siddhi-4.0/#triggers",
            "text": "Event triggers allow events to be created periodically based on a specified time interval.  Syntax  The following is the syntax for an event trigger definition.  define   trigger   < trigger   name >   at   { 'start' |   every   < time   interval >|   '<cron expression>' } ;   Examples   Triggering events regularly at specific time intervals   The following query triggers events every 5 minutes.    define   trigger   FiveMinTriggerStream   at   every   5   min ;    Triggering events at a specific time on specified days\nThe following query triggers an event at 10.15 AM every Monday, Tuesday, Wednesday, Thursday and Friday.     define   trigger   FiveMinTriggerStream   at   '0 15 10 ? * MON-FRI' ;",
            "title": "Triggers"
        },
        {
            "location": "/documentation/siddhi-4.0/#siddhi-logger",
            "text": "The Siddhi Logger logs events that arrive in different logger priorities such as  INFO ,  DEBUG ,  WARN ,  FATAL ,  ERROR ,  OFF , and  TRACE .  Syntax  The following is the syntax for a query with a Siddhi logger.  < void >   log ( < string >   priority ,   < string >   logMessage ,   < bool >   isEventLogged )   The parameters configured are as follows.    prioroty : The logging priority. Possible values are  INFO ,  DEBUG ,  WARN ,  FATAL ,  ERROR ,  OFF , and  TRACE . If no value is specified for this parameter,  INFO  is printed as the priority by default.    logMessage : This parameter allows you to specify a message to be printed in the log.    isEventLogged : This parameter specifies whether the event body should be included in the log. Possible values are  true  and  false . If no value is specified, the event body is not printed in the log by default.    Examples   The following query logs the event with the  INFO  logging priority. This is because the priority is not specified.   from   StockStream # log ()  select   *  insert   into   OutStream ;    The following query logs the event with the  INFO  logging priority (because the priority is not specified) and the  test message  text.   from   StockStream # log ( 'test message' )  select   *  insert   into   OutStream ;    The following query logs the event with the  INFO  logging priority because a priority is not specified. The event itself is printed in the log.   from   StockStream # log ( true )  select   *  insert   into   OutStream ;    The following query logs the event with the  INFO  logging priority (because the priority is not specified) and the  test message  text. The event itself is printed in the log.   from   StockStream # log ( 'test message' ,   true )  select   *  insert   into   OutStream ;    The following query logs the event with the  WARN  logging priority and the  test message  text.   from   StockStream # log ( 'warn' , 'test message' )  select   *  insert   into   OutStream ;    The following query logs the event with the  WARN  logging priority and the  test message  text.  The event itself is printed in the log.   from   StockStream # log ( 'warn' , 'test message' , true )  select   *  insert   into   OutStream ;",
            "title": "Siddhi Logger"
        },
        {
            "location": "/documentation/siddhi-4.0/#scripts",
            "text": "Eval script allows Siddhi to process events using other programming languages by including their functions in the Siddhi queries. Eval script functions can be defined like event tables or streams and referred in the queries as Inbuilt Functions of Siddhi.  Syntax  The following is the syntax for a Siddhi query with an Eval Script definition.  define   function   < function   name > [ < language   name > ]   return   < return   type >   { \n     < operation   of   the   function >  } ;   The following parameters are configured when defining an eval script.    function name :  The name of the function from another programming language that should be included in the Siddhi query.    language name : The name of the other programming language from which the function included in the Siddhi query is taken. The languages supported are JavaScript, R and Scala.    return type : The return type of the function defined. The return type can be  int ,  long ,  float ,  double ,  string ,  bool  or  object . Here the function implementer should be responsible for returning the output on the defined return type for proper functionality.     operation of the function : Here, the execution logic of the defined logos should be added. This logic should be written in the language specified in the  language name  parameter, and the return should be of the type specified in the  return type  parameter.    Examples   Concatenating a JavaScript function   The following query performs the concatenating function of the JavaScript language and returns the output as a string.  define   function   concatFn [ JavaScript ]   return   string   { \n     var   str1   =   data [ 0 ]; \n     var   str2   =   data [ 1 ]; \n     var   str3   =   data [ 2 ]; \n     var   responce   =   str1   +   str2   +   str3 ; \n     return   responce ;  } ;  define   stream   TempStream ( deviceID   long ,   roomNo   int ,   temp   double );  from   TempStream  select   concatFn ( roomNo , '-' , deviceID )   as   id ,   temp   insert   into   DeviceTempStream ;    Concatenating an R function   The following query performs the concatenating function of the R language and returns the output as a string.  define   function   concatFn [ R ]   return   string   { \n     return ( paste ( data ,   collapse = \"\" ));  } ;  define   stream   TempStream ( deviceID   long ,   roomNo   int ,   temp   double );  from   TempStream  select   concatFn ( roomNo , '-' , deviceID )   as   id ,   temp  insert   into   DeviceTempStream ;    Concatenating a Scala function   The following query performs the concatenating function of the Scala language and returns the output as a string.  define   function   concatFn [ Scala ]   return   string   { \n     var   concatenatedString   = \n      for ( i   <-   0   until   data . length ) { \n          concatenatedString   +=   data ( i ). toString \n      } \n      concatenatedString  } ;  define   stream   TempStream ( deviceID   long ,   roomNo   int ,   temp   double );  from   TempStream  select   concatFn ( roomNo , '-' , deviceID )   as   id ,   temp  insert   into   DeviceTempStream ;",
            "title": "Scripts"
        },
        {
            "location": "/documentation/siddhi-4.0/#siddhi-extensions",
            "text": "Siddhi supports an extension architecture to support custom code and functions to be incorporated with Siddhi in a seamless manner. Extension will follow the following syntax;  < namespace > : < function   name > ( < parameter1 > ,   < parameter2 > ,   ...   )   Here the namespace will allow Siddhi to identify the function as an extension and its extension group, the function name will denote the extension function within the given group, and the parameters will be the inputs that can be passed to the extension for evaluation and/or configuration.    E.g. A window extension created with namespace foo and function name unique can be referred as follows:  from   StockExchangeStream [ price   >=   20 ] # window . foo : unique ( symbol )  select   symbol ,   price  insert   into   StockQuote   Extension types  Siddhi supports following five type of extensions:  1.Function Extension  For each event it consumes zero or more parameters and output a single attribute as an output. This could be used to manipulate event attributes to generate new attribute like Function operator. Implemented by extending \"org.wso2.siddhi.core.executor.function.FunctionExecutor\".  E.g. \"math:sin(x)\" here the sin function of math extension will return the sin value its parameter x.  2.Aggregate Function Extension  For each event it consumes zero or more parameters and output a single attribute having an aggregated results based in the input parameters as an output. This could be used with conjunction with a window in order to find the aggregated results based on the given window like Aggregate Function operator. Implemented by extending \"org.wso2.siddhi.core.query.selector.attribute.aggregator.AttributeAggregator\".  E.g. \"custom:std(x)\" here the std aggregate function of custom extension will return the standard deviation of value x based on the assigned window to its query.   3.Window Extension  Allows events to be collected and expired without altering the event format based on the given input parameters like the Window operator. Implemented by extending \"org.wso2.siddhi.core.query.processor.stream.window.WindowProcessor\".  E.g. \"custom:unique(key)\" here the unique window of custom extension will return all events as current events upon arrival as current events and when events arrive with the same value based on the \"key\" parameter the corresponding to a previous event arrived the previously arrived event will be emitted as expired event.  4.Stream Function Extension  Allows events to be altered by adding one or more attributes to it. Here events could be outputted upon each event arrival. Implemented by extending \"org.wso2.siddhi.core.query.processor.stream.function.StreamFunctionProcessor\".  E.g. \"custom:pol2cart(theta,rho)\" here the pol2cart function of custom extension will return all events by calculating the cartesian coordinates x & y and adding them as new attributes to the existing events.  5.Stream Processor Extension  Allows events to be collected and expired with altering the event format based on the given input parameters. Implemented by extending \"oorg.wso2.siddhi.core.query.processor.stream.StreamProcessor\".  E.g. \"custom:perMinResults(arg1, arg2, ...)\" here the perMinResults function of custom extension will return all events by adding one or more attributes the events based on the conversion logic and emitted as current events upon arrival as current events and when at expiration expired events could be emitted appropriate expiring events attribute values for matching the current events attributes counts and types.  Available Extentions  Siddhi currently have several prewritten extensions as follows;   Extensions released under Apache License v2 :    math :   Supporting mathematical operations   str :Supporting String operations   geo : Supporting geocode operations  regex : Supporting regular expression operations  time : Supporting time expression operations  ml : Supporting Machine Learning expression operations  timeseries : Supporting Time Series operations  kf  (Kalman Filter): Supporting filtering capabilities by detecting outliers of the data.  map : Supporting to send a map object inside Siddhi stream definitions and use it inside queries.  reorder : Supporting for reordering events from an unordered event stream using Kslack algorithm.    Extensions released under GNU/GPL License v3 :    geo : Supporting geographical processing operations     r : Supporting R executions  nlp : Supporting Natural Language Processing expression operations  pmml : Supporting Predictive Model Markup Language expression operations   Writing Custom Extensions  Custom extensions can be written in order to cater usecase specific logics that are not out of the box available in Siddhi or as an extension.   To create custom extensions two things need to be done.  1.Implementing the extension logic by extending well defined Siddhi interfaces. E.g implementing a UniqueWindowProcessor by extending org.wso2.siddhi.core.query.processor.stream.window.WindowProcessor.  package   org . wso2 . test ;  public   class   UniqueWindowProcessor   extends   WindowProcessor   { \n    ...  }   2.Add an extension mapping file to map the written extension class with the extension function name and namespace. Here extension mapping file should be named as \" .siddhiext\". E.g Mapping the written UniqueWindowProcessor extension with function name \"unique\" and namespace \"foo\", to do so the mapping file should be named as foo.siddhiext and the context of the file should as below;   #   function   name   to   class   mapping   of   'foo'   extension  unique = org . wso2 . test . UniqueWindowProcessor",
            "title": "Siddhi extensions"
        },
        {
            "location": "/extensions/",
            "text": "Siddhi Extensions\n\u00b6\n\n\nAvailable Extensions\n\u00b6\n\n\nFollowing are some prewritten extensions that are supported with Siddhi;\n\n\nExtensions released under Apache 2.0 License\n\u00b6\n\n\n\n\nexecution string\n\n\nexecution math\n\n\nexecution time\n\n\nexecution streamingml\n\n\nexecution regex\n\n\nexecution markov\n\n\nexecution unique\n\n\nexecution map\n\n\nexecution unitconversion\n\n\nexecution extrema\n\n\nexecution timeseries\n\n\nexecution var\n\n\nexecution priority\n\n\nexecution reorder\n\n\nexecution sentiment\n\n\nexecution stats\n\n\nexecution geo\n\n\nexecution kalmanfilter\n\n\nio http\n\n\nio kafka\n\n\nio tcp\n\n\nio wso2event\n\n\nio email\n\n\nio jms\n\n\nio file\n\n\nio rabbitmq\n\n\nio mqtt\n\n\nmap json\n\n\nmap xml\n\n\nmap binary\n\n\nmap text\n\n\nmap wso2event\n\n\nmap keyvalue\n\n\nstore rdbms\n\n\nstore solr\n\n\nstore mongodb\n\n\nscript js\n\n\nscript scala\n\n\n\n\nExtensions released under GPL License\n\u00b6\n\n\n\n\nexecution pmml\n\n\nexecution geo\n\n\nexecution nlp\n\n\nexecution r\n\n\nexecution streamingml\n\n\nscript r\n\n\n\n\nExtension Repositories\n\u00b6\n\n\nAll the extension repositories maintained by WSO2 can be found \nhere",
            "title": "Extensions"
        },
        {
            "location": "/extensions/#siddhi-extensions",
            "text": "",
            "title": "Siddhi Extensions"
        },
        {
            "location": "/extensions/#available-extensions",
            "text": "Following are some prewritten extensions that are supported with Siddhi;",
            "title": "Available Extensions"
        },
        {
            "location": "/extensions/#extensions-released-under-apache-20-license",
            "text": "execution string  execution math  execution time  execution streamingml  execution regex  execution markov  execution unique  execution map  execution unitconversion  execution extrema  execution timeseries  execution var  execution priority  execution reorder  execution sentiment  execution stats  execution geo  execution kalmanfilter  io http  io kafka  io tcp  io wso2event  io email  io jms  io file  io rabbitmq  io mqtt  map json  map xml  map binary  map text  map wso2event  map keyvalue  store rdbms  store solr  store mongodb  script js  script scala",
            "title": "Extensions released under Apache 2.0 License"
        },
        {
            "location": "/extensions/#extensions-released-under-gpl-license",
            "text": "execution pmml  execution geo  execution nlp  execution r  execution streamingml  script r",
            "title": "Extensions released under GPL License"
        },
        {
            "location": "/extensions/#extension-repositories",
            "text": "All the extension repositories maintained by WSO2 can be found  here",
            "title": "Extension Repositories"
        },
        {
            "location": "/api/4.0.0-M60/",
            "text": "API Docs\n\u00b6\n\n\nSource\n\u00b6\n\n\ninMemory \n(\nSource\n)\n\u00b6\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nSourcemapper\n\u00b6\n\n\npassThrough \n(\nSource Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSink\n\u00b6\n\n\ninMemory \n(\nSink\n)\n\u00b6\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\u00b6\n\n\npassThrough \n(\nSink Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nCore\n\u00b6\n\n\ncron \n(\nWindow\n)\n\u00b6\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(<STRING> cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\ntimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(<INT|LONG|TIME> window.time, <INT> start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(\nWindow\n)\n\u00b6\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\nsort \n(\nWindow\n)\n\u00b6\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(<INT> window.length, <STRING> attribute, <STRING> order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nexternalTime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nfrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(<INT> event.count, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\nlossyFrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\nexternalTimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nlengthBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\ntime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\ntimeLength \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(<INT|LONG|TIME> window.time, <INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncoalesce \n(\nFunction\n)\n\u00b6\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ninstanceOfFloat \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\ninstanceOfBoolean \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\nminimum \n(\nFunction\n)\n\u00b6\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\nconvert \n(\nFunction\n)\n\u00b6\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\nUUID \n(\nFunction\n)\n\u00b6\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\n<STRING> UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\ninstanceOfLong \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\neventTimestamp \n(\nFunction\n)\n\u00b6\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\n<LONG> eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\nifThenElse \n(\nFunction\n)\n\u00b6\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\ndefault \n(\nFunction\n)\n\u00b6\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\ninstanceOfInteger \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfString \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\ncast \n(\nFunction\n)\n\u00b6\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\nmaximum \n(\nFunction\n)\n\u00b6\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\ncurrentTimeMillis \n(\nFunction\n)\n\u00b6\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\n<LONG> currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfDouble \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\nlog \n(\nStream Processor\n)\n\u00b6\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nminForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\nmaxForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nmax \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\ncount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\n<LONG> count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nsum \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\n<LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nstdDev \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\navg \n(\nAggregate Function\n)\n\u00b6\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\n<LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\u00a0\"WEB_PAGE_3\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\n\n\nmin \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\npol2Cart \n(\nStream Function\n)\n\u00b6\n\n\nThe pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "4.0.0-M60"
        },
        {
            "location": "/api/4.0.0-M60/#api-docs",
            "text": "",
            "title": "API Docs"
        },
        {
            "location": "/api/4.0.0-M60/#source",
            "text": "",
            "title": "Source"
        },
        {
            "location": "/api/4.0.0-M60/#inmemory-source",
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.",
            "title": "inMemory (Source"
        },
        {
            "location": "/api/4.0.0-M60/#sourcemapper",
            "text": "",
            "title": "Sourcemapper"
        },
        {
            "location": "/api/4.0.0-M60/#passthrough-source-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.",
            "title": "passThrough (Source Mapper"
        },
        {
            "location": "/api/4.0.0-M60/#sink",
            "text": "",
            "title": "Sink"
        },
        {
            "location": "/api/4.0.0-M60/#inmemory-sink",
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.",
            "title": "inMemory (Sink"
        },
        {
            "location": "/api/4.0.0-M60/#sinkmapper",
            "text": "",
            "title": "Sinkmapper"
        },
        {
            "location": "/api/4.0.0-M60/#passthrough-sink-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.",
            "title": "passThrough (Sink Mapper"
        },
        {
            "location": "/api/4.0.0-M60/#core",
            "text": "",
            "title": "Core"
        },
        {
            "location": "/api/4.0.0-M60/#cron-window",
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron(<STRING> cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.",
            "title": "cron (Window"
        },
        {
            "location": "/api/4.0.0-M60/#timebatch-window",
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch(<INT|LONG|TIME> window.time, <INT> start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.",
            "title": "timeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M60/#length-window",
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.",
            "title": "length (Window"
        },
        {
            "location": "/api/4.0.0-M60/#sort-window",
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort(<INT> window.length, <STRING> attribute, <STRING> order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.",
            "title": "sort (Window"
        },
        {
            "location": "/api/4.0.0-M60/#externaltime-window",
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.",
            "title": "externalTime (Window"
        },
        {
            "location": "/api/4.0.0-M60/#frequent-window",
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent(<INT> event.count, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.",
            "title": "frequent (Window"
        },
        {
            "location": "/api/4.0.0-M60/#lossyfrequent-window",
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.",
            "title": "lossyFrequent (Window"
        },
        {
            "location": "/api/4.0.0-M60/#externaltimebatch-window",
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.",
            "title": "externalTimeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M60/#lengthbatch-window",
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.",
            "title": "lengthBatch (Window"
        },
        {
            "location": "/api/4.0.0-M60/#time-window",
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.",
            "title": "time (Window"
        },
        {
            "location": "/api/4.0.0-M60/#timelength-window",
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength(<INT|LONG|TIME> window.time, <INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.",
            "title": "timeLength (Window"
        },
        {
            "location": "/api/4.0.0-M60/#coalesce-function",
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.",
            "title": "coalesce (Function"
        },
        {
            "location": "/api/4.0.0-M60/#instanceoffloat-function",
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  <BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.",
            "title": "instanceOfFloat (Function"
        },
        {
            "location": "/api/4.0.0-M60/#instanceofboolean-function",
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  <BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.",
            "title": "instanceOfBoolean (Function"
        },
        {
            "location": "/api/4.0.0-M60/#minimum-function",
            "text": "Returns the minimum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.",
            "title": "minimum (Function"
        },
        {
            "location": "/api/4.0.0-M60/#convert-function",
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").",
            "title": "convert (Function"
        },
        {
            "location": "/api/4.0.0-M60/#uuid-function",
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  <STRING> UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;",
            "title": "UUID (Function"
        },
        {
            "location": "/api/4.0.0-M60/#instanceoflong-function",
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  <BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfLong (Function"
        },
        {
            "location": "/api/4.0.0-M60/#eventtimestamp-function",
            "text": "Returns the timestamp of the processed event.  Syntax  <LONG> eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.",
            "title": "eventTimestamp (Function"
        },
        {
            "location": "/api/4.0.0-M60/#ifthenelse-function",
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.",
            "title": "ifThenElse (Function"
        },
        {
            "location": "/api/4.0.0-M60/#default-function",
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.",
            "title": "default (Function"
        },
        {
            "location": "/api/4.0.0-M60/#instanceofinteger-function",
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  <BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfInteger (Function"
        },
        {
            "location": "/api/4.0.0-M60/#instanceofstring-function",
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  <BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.",
            "title": "instanceOfString (Function"
        },
        {
            "location": "/api/4.0.0-M60/#cast-function",
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.",
            "title": "cast (Function"
        },
        {
            "location": "/api/4.0.0-M60/#maximum-function",
            "text": "Returns the maximum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.",
            "title": "maximum (Function"
        },
        {
            "location": "/api/4.0.0-M60/#currenttimemillis-function",
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  <LONG> currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.",
            "title": "currentTimeMillis (Function"
        },
        {
            "location": "/api/4.0.0-M60/#instanceofdouble-function",
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  <BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.",
            "title": "instanceOfDouble (Function"
        },
        {
            "location": "/api/4.0.0-M60/#log-stream-processor",
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;  This will log message and fooStream:events.",
            "title": "log (Stream Processor"
        },
        {
            "location": "/api/4.0.0-M60/#minforever-aggregate-function",
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.",
            "title": "minForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M60/#maxforever-aggregate-function",
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.",
            "title": "maxForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M60/#max-aggregate-function",
            "text": "Returns the maximum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.",
            "title": "max (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M60/#count-aggregate-function",
            "text": "Returns the count of all the events.  Syntax  <LONG> count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.",
            "title": "count (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M60/#sum-aggregate-function",
            "text": "Returns the sum for all the events.  Syntax  <LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.",
            "title": "sum (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M60/#stddev-aggregate-function",
            "text": "Returns the calculated standard deviation for all the events.  Syntax  <DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.",
            "title": "stdDev (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M60/#avg-aggregate-function",
            "text": "Calculates the average for all the events.  Syntax  <DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.",
            "title": "avg (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M60/#distinctcount-aggregate-function",
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  <LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\" \u00a0\"WEB_PAGE_3\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\"",
            "title": "distinctCount (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M60/#min-aggregate-function",
            "text": "Returns the minimum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.",
            "title": "min (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M60/#pol2cart-stream-function",
            "text": "The pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "pol2Cart (Stream Function"
        },
        {
            "location": "/api/4.0.0-M61/",
            "text": "API Docs\n\u00b6\n\n\nSource\n\u00b6\n\n\ninMemory \n(\nSource\n)\n\u00b6\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nSourcemapper\n\u00b6\n\n\npassThrough \n(\nSource Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSink\n\u00b6\n\n\ninMemory \n(\nSink\n)\n\u00b6\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\u00b6\n\n\npassThrough \n(\nSink Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nCore\n\u00b6\n\n\ntime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\ntimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(<INT|LONG|TIME> window.time, <INT> start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlossyFrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\nlength \n(\nWindow\n)\n\u00b6\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntimeLength \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(<INT|LONG|TIME> window.time, <INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\nexternalTimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nexternalTime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nfrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(<INT> event.count, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ncron \n(\nWindow\n)\n\u00b6\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(<STRING> cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nsort \n(\nWindow\n)\n\u00b6\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(<INT> window.length, <STRING> attribute, <STRING> order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\ninstanceOfFloat \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\neventTimestamp \n(\nFunction\n)\n\u00b6\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\n<LONG> eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ncoalesce \n(\nFunction\n)\n\u00b6\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ninstanceOfInteger \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\nconvert \n(\nFunction\n)\n\u00b6\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\nUUID \n(\nFunction\n)\n\u00b6\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\n<STRING> UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\ninstanceOfDouble \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ncast \n(\nFunction\n)\n\u00b6\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\nminimum \n(\nFunction\n)\n\u00b6\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\nifThenElse \n(\nFunction\n)\n\u00b6\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\ndefault \n(\nFunction\n)\n\u00b6\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\ninstanceOfLong \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfBoolean \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncurrentTimeMillis \n(\nFunction\n)\n\u00b6\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\n<LONG> currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\nmaximum \n(\nFunction\n)\n\u00b6\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\ninstanceOfString \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(\nStream Processor\n)\n\u00b6\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nstdDev \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\nmax \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nminForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\navg \n(\nAggregate Function\n)\n\u00b6\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\nmin \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\n<LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\ncount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\n<LONG> count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmaxForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\ndistinctCount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\n<LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\u00a0\"WEB_PAGE_3\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\n\n\npol2Cart \n(\nStream Function\n)\n\u00b6\n\n\nThe pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "4.0.0-M61"
        },
        {
            "location": "/api/4.0.0-M61/#api-docs",
            "text": "",
            "title": "API Docs"
        },
        {
            "location": "/api/4.0.0-M61/#source",
            "text": "",
            "title": "Source"
        },
        {
            "location": "/api/4.0.0-M61/#inmemory-source",
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.",
            "title": "inMemory (Source"
        },
        {
            "location": "/api/4.0.0-M61/#sourcemapper",
            "text": "",
            "title": "Sourcemapper"
        },
        {
            "location": "/api/4.0.0-M61/#passthrough-source-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.",
            "title": "passThrough (Source Mapper"
        },
        {
            "location": "/api/4.0.0-M61/#sink",
            "text": "",
            "title": "Sink"
        },
        {
            "location": "/api/4.0.0-M61/#inmemory-sink",
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.",
            "title": "inMemory (Sink"
        },
        {
            "location": "/api/4.0.0-M61/#sinkmapper",
            "text": "",
            "title": "Sinkmapper"
        },
        {
            "location": "/api/4.0.0-M61/#passthrough-sink-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.",
            "title": "passThrough (Sink Mapper"
        },
        {
            "location": "/api/4.0.0-M61/#core",
            "text": "",
            "title": "Core"
        },
        {
            "location": "/api/4.0.0-M61/#time-window",
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.",
            "title": "time (Window"
        },
        {
            "location": "/api/4.0.0-M61/#timebatch-window",
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch(<INT|LONG|TIME> window.time, <INT> start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.",
            "title": "timeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M61/#lossyfrequent-window",
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.",
            "title": "lossyFrequent (Window"
        },
        {
            "location": "/api/4.0.0-M61/#length-window",
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.",
            "title": "length (Window"
        },
        {
            "location": "/api/4.0.0-M61/#timelength-window",
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength(<INT|LONG|TIME> window.time, <INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.",
            "title": "timeLength (Window"
        },
        {
            "location": "/api/4.0.0-M61/#externaltimebatch-window",
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.",
            "title": "externalTimeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M61/#externaltime-window",
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.",
            "title": "externalTime (Window"
        },
        {
            "location": "/api/4.0.0-M61/#lengthbatch-window",
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.",
            "title": "lengthBatch (Window"
        },
        {
            "location": "/api/4.0.0-M61/#frequent-window",
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent(<INT> event.count, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.",
            "title": "frequent (Window"
        },
        {
            "location": "/api/4.0.0-M61/#cron-window",
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron(<STRING> cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.",
            "title": "cron (Window"
        },
        {
            "location": "/api/4.0.0-M61/#sort-window",
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort(<INT> window.length, <STRING> attribute, <STRING> order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.",
            "title": "sort (Window"
        },
        {
            "location": "/api/4.0.0-M61/#instanceoffloat-function",
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  <BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.",
            "title": "instanceOfFloat (Function"
        },
        {
            "location": "/api/4.0.0-M61/#eventtimestamp-function",
            "text": "Returns the timestamp of the processed event.  Syntax  <LONG> eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.",
            "title": "eventTimestamp (Function"
        },
        {
            "location": "/api/4.0.0-M61/#coalesce-function",
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.",
            "title": "coalesce (Function"
        },
        {
            "location": "/api/4.0.0-M61/#instanceofinteger-function",
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  <BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfInteger (Function"
        },
        {
            "location": "/api/4.0.0-M61/#convert-function",
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").",
            "title": "convert (Function"
        },
        {
            "location": "/api/4.0.0-M61/#uuid-function",
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  <STRING> UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;",
            "title": "UUID (Function"
        },
        {
            "location": "/api/4.0.0-M61/#instanceofdouble-function",
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  <BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.",
            "title": "instanceOfDouble (Function"
        },
        {
            "location": "/api/4.0.0-M61/#cast-function",
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.",
            "title": "cast (Function"
        },
        {
            "location": "/api/4.0.0-M61/#minimum-function",
            "text": "Returns the minimum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.",
            "title": "minimum (Function"
        },
        {
            "location": "/api/4.0.0-M61/#ifthenelse-function",
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.",
            "title": "ifThenElse (Function"
        },
        {
            "location": "/api/4.0.0-M61/#default-function",
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.",
            "title": "default (Function"
        },
        {
            "location": "/api/4.0.0-M61/#instanceoflong-function",
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  <BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfLong (Function"
        },
        {
            "location": "/api/4.0.0-M61/#instanceofboolean-function",
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  <BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.",
            "title": "instanceOfBoolean (Function"
        },
        {
            "location": "/api/4.0.0-M61/#currenttimemillis-function",
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  <LONG> currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.",
            "title": "currentTimeMillis (Function"
        },
        {
            "location": "/api/4.0.0-M61/#maximum-function",
            "text": "Returns the maximum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.",
            "title": "maximum (Function"
        },
        {
            "location": "/api/4.0.0-M61/#instanceofstring-function",
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  <BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.",
            "title": "instanceOfString (Function"
        },
        {
            "location": "/api/4.0.0-M61/#log-stream-processor",
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;  This will log message and fooStream:events.",
            "title": "log (Stream Processor"
        },
        {
            "location": "/api/4.0.0-M61/#stddev-aggregate-function",
            "text": "Returns the calculated standard deviation for all the events.  Syntax  <DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.",
            "title": "stdDev (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M61/#max-aggregate-function",
            "text": "Returns the maximum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.",
            "title": "max (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M61/#minforever-aggregate-function",
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.",
            "title": "minForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M61/#avg-aggregate-function",
            "text": "Calculates the average for all the events.  Syntax  <DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.",
            "title": "avg (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M61/#min-aggregate-function",
            "text": "Returns the minimum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.",
            "title": "min (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M61/#sum-aggregate-function",
            "text": "Returns the sum for all the events.  Syntax  <LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.",
            "title": "sum (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M61/#count-aggregate-function",
            "text": "Returns the count of all the events.  Syntax  <LONG> count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.",
            "title": "count (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M61/#maxforever-aggregate-function",
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.",
            "title": "maxForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M61/#distinctcount-aggregate-function",
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  <LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\" \u00a0\"WEB_PAGE_3\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\"",
            "title": "distinctCount (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M61/#pol2cart-stream-function",
            "text": "The pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "pol2Cart (Stream Function"
        },
        {
            "location": "/api/4.0.0-M62/",
            "text": "API Docs\n\u00b6\n\n\nSink\n\u00b6\n\n\ninMemory \n(\nSink\n)\n\u00b6\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\u00b6\n\n\npassThrough \n(\nSink Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\u00b6\n\n\npassThrough \n(\nSource Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\u00b6\n\n\ninMemory \n(\nSource\n)\n\u00b6\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\u00b6\n\n\nsort \n(\nWindow\n)\n\u00b6\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(<INT> window.length, <STRING> attribute, <STRING> order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(<INT|LONG|TIME> window.time, <INT> start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(\nWindow\n)\n\u00b6\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(<INT> event.count, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(<INT|LONG|TIME> window.time, <INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(\nWindow\n)\n\u00b6\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(<STRING> cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(\nFunction\n)\n\u00b6\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(\nFunction\n)\n\u00b6\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\n<STRING> UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(\nFunction\n)\n\u00b6\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(\nFunction\n)\n\u00b6\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(\nFunction\n)\n\u00b6\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(\nFunction\n)\n\u00b6\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(\nFunction\n)\n\u00b6\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(\nFunction\n)\n\u00b6\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\n<LONG> eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(\nFunction\n)\n\u00b6\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(\nFunction\n)\n\u00b6\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\n<LONG> currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(\nStream Processor\n)\n\u00b6\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(\nAggregate Function\n)\n\u00b6\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\n<LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\u00a0\"WEB_PAGE_3\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\n<LONG> count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\n<LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(\nStream Function\n)\n\u00b6\n\n\nThe pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "4.0.0-M62"
        },
        {
            "location": "/api/4.0.0-M62/#api-docs",
            "text": "",
            "title": "API Docs"
        },
        {
            "location": "/api/4.0.0-M62/#sink",
            "text": "",
            "title": "Sink"
        },
        {
            "location": "/api/4.0.0-M62/#inmemory-sink",
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.",
            "title": "inMemory (Sink"
        },
        {
            "location": "/api/4.0.0-M62/#sinkmapper",
            "text": "",
            "title": "Sinkmapper"
        },
        {
            "location": "/api/4.0.0-M62/#passthrough-sink-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.",
            "title": "passThrough (Sink Mapper"
        },
        {
            "location": "/api/4.0.0-M62/#sourcemapper",
            "text": "",
            "title": "Sourcemapper"
        },
        {
            "location": "/api/4.0.0-M62/#passthrough-source-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.",
            "title": "passThrough (Source Mapper"
        },
        {
            "location": "/api/4.0.0-M62/#source",
            "text": "",
            "title": "Source"
        },
        {
            "location": "/api/4.0.0-M62/#inmemory-source",
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.",
            "title": "inMemory (Source"
        },
        {
            "location": "/api/4.0.0-M62/#core",
            "text": "",
            "title": "Core"
        },
        {
            "location": "/api/4.0.0-M62/#sort-window",
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort(<INT> window.length, <STRING> attribute, <STRING> order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.",
            "title": "sort (Window"
        },
        {
            "location": "/api/4.0.0-M62/#lossyfrequent-window",
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.",
            "title": "lossyFrequent (Window"
        },
        {
            "location": "/api/4.0.0-M62/#timebatch-window",
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch(<INT|LONG|TIME> window.time, <INT> start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.",
            "title": "timeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M62/#length-window",
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.",
            "title": "length (Window"
        },
        {
            "location": "/api/4.0.0-M62/#time-window",
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.",
            "title": "time (Window"
        },
        {
            "location": "/api/4.0.0-M62/#frequent-window",
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent(<INT> event.count, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.",
            "title": "frequent (Window"
        },
        {
            "location": "/api/4.0.0-M62/#timelength-window",
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength(<INT|LONG|TIME> window.time, <INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.",
            "title": "timeLength (Window"
        },
        {
            "location": "/api/4.0.0-M62/#cron-window",
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron(<STRING> cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.",
            "title": "cron (Window"
        },
        {
            "location": "/api/4.0.0-M62/#externaltime-window",
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.",
            "title": "externalTime (Window"
        },
        {
            "location": "/api/4.0.0-M62/#lengthbatch-window",
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.",
            "title": "lengthBatch (Window"
        },
        {
            "location": "/api/4.0.0-M62/#externaltimebatch-window",
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.",
            "title": "externalTimeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M62/#ifthenelse-function",
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.",
            "title": "ifThenElse (Function"
        },
        {
            "location": "/api/4.0.0-M62/#uuid-function",
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  <STRING> UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;",
            "title": "UUID (Function"
        },
        {
            "location": "/api/4.0.0-M62/#minimum-function",
            "text": "Returns the minimum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.",
            "title": "minimum (Function"
        },
        {
            "location": "/api/4.0.0-M62/#cast-function",
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.",
            "title": "cast (Function"
        },
        {
            "location": "/api/4.0.0-M62/#instanceofdouble-function",
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  <BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.",
            "title": "instanceOfDouble (Function"
        },
        {
            "location": "/api/4.0.0-M62/#instanceoffloat-function",
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  <BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.",
            "title": "instanceOfFloat (Function"
        },
        {
            "location": "/api/4.0.0-M62/#convert-function",
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").",
            "title": "convert (Function"
        },
        {
            "location": "/api/4.0.0-M62/#instanceoflong-function",
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  <BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfLong (Function"
        },
        {
            "location": "/api/4.0.0-M62/#instanceofinteger-function",
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  <BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfInteger (Function"
        },
        {
            "location": "/api/4.0.0-M62/#default-function",
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.",
            "title": "default (Function"
        },
        {
            "location": "/api/4.0.0-M62/#maximum-function",
            "text": "Returns the maximum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.",
            "title": "maximum (Function"
        },
        {
            "location": "/api/4.0.0-M62/#eventtimestamp-function",
            "text": "Returns the timestamp of the processed event.  Syntax  <LONG> eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.",
            "title": "eventTimestamp (Function"
        },
        {
            "location": "/api/4.0.0-M62/#instanceofboolean-function",
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  <BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.",
            "title": "instanceOfBoolean (Function"
        },
        {
            "location": "/api/4.0.0-M62/#coalesce-function",
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.",
            "title": "coalesce (Function"
        },
        {
            "location": "/api/4.0.0-M62/#currenttimemillis-function",
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  <LONG> currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.",
            "title": "currentTimeMillis (Function"
        },
        {
            "location": "/api/4.0.0-M62/#instanceofstring-function",
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  <BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.",
            "title": "instanceOfString (Function"
        },
        {
            "location": "/api/4.0.0-M62/#log-stream-processor",
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;  This will log message and fooStream:events.",
            "title": "log (Stream Processor"
        },
        {
            "location": "/api/4.0.0-M62/#max-aggregate-function",
            "text": "Returns the maximum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.",
            "title": "max (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M62/#avg-aggregate-function",
            "text": "Calculates the average for all the events.  Syntax  <DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.",
            "title": "avg (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M62/#distinctcount-aggregate-function",
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  <LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\" \u00a0\"WEB_PAGE_3\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\"",
            "title": "distinctCount (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M62/#maxforever-aggregate-function",
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.",
            "title": "maxForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M62/#stddev-aggregate-function",
            "text": "Returns the calculated standard deviation for all the events.  Syntax  <DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.",
            "title": "stdDev (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M62/#count-aggregate-function",
            "text": "Returns the count of all the events.  Syntax  <LONG> count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.",
            "title": "count (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M62/#min-aggregate-function",
            "text": "Returns the minimum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.",
            "title": "min (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M62/#sum-aggregate-function",
            "text": "Returns the sum for all the events.  Syntax  <LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.",
            "title": "sum (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M62/#minforever-aggregate-function",
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.",
            "title": "minForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M62/#pol2cart-stream-function",
            "text": "The pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "pol2Cart (Stream Function"
        },
        {
            "location": "/api/4.0.0-M69/",
            "text": "API Docs\n\u00b6\n\n\nSink\n\u00b6\n\n\ninMemory \n(\nSink\n)\n\u00b6\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\u00b6\n\n\npassThrough \n(\nSink Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\u00b6\n\n\npassThrough \n(\nSource Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\u00b6\n\n\ninMemory \n(\nSource\n)\n\u00b6\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\u00b6\n\n\nsort \n(\nWindow\n)\n\u00b6\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(<INT> window.length, <STRING> attribute, <STRING> order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(<INT|LONG|TIME> window.time, <INT> start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(\nWindow\n)\n\u00b6\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(<INT> event.count, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(<INT|LONG|TIME> window.time, <INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(\nWindow\n)\n\u00b6\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(<STRING> cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(\nFunction\n)\n\u00b6\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(\nFunction\n)\n\u00b6\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\n<STRING> UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(\nFunction\n)\n\u00b6\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(\nFunction\n)\n\u00b6\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(\nFunction\n)\n\u00b6\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(\nFunction\n)\n\u00b6\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(\nFunction\n)\n\u00b6\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(\nFunction\n)\n\u00b6\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\n<LONG> eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(\nFunction\n)\n\u00b6\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(\nFunction\n)\n\u00b6\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\n<LONG> currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(\nStream Processor\n)\n\u00b6\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(\nAggregate Function\n)\n\u00b6\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\n<LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\u00a0\"WEB_PAGE_3\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\n<LONG> count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\n<LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(\nStream Function\n)\n\u00b6\n\n\nThe pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "4.0.0-M69"
        },
        {
            "location": "/api/4.0.0-M69/#api-docs",
            "text": "",
            "title": "API Docs"
        },
        {
            "location": "/api/4.0.0-M69/#sink",
            "text": "",
            "title": "Sink"
        },
        {
            "location": "/api/4.0.0-M69/#inmemory-sink",
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.",
            "title": "inMemory (Sink"
        },
        {
            "location": "/api/4.0.0-M69/#sinkmapper",
            "text": "",
            "title": "Sinkmapper"
        },
        {
            "location": "/api/4.0.0-M69/#passthrough-sink-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.",
            "title": "passThrough (Sink Mapper"
        },
        {
            "location": "/api/4.0.0-M69/#sourcemapper",
            "text": "",
            "title": "Sourcemapper"
        },
        {
            "location": "/api/4.0.0-M69/#passthrough-source-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.",
            "title": "passThrough (Source Mapper"
        },
        {
            "location": "/api/4.0.0-M69/#source",
            "text": "",
            "title": "Source"
        },
        {
            "location": "/api/4.0.0-M69/#inmemory-source",
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.",
            "title": "inMemory (Source"
        },
        {
            "location": "/api/4.0.0-M69/#core",
            "text": "",
            "title": "Core"
        },
        {
            "location": "/api/4.0.0-M69/#sort-window",
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort(<INT> window.length, <STRING> attribute, <STRING> order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.",
            "title": "sort (Window"
        },
        {
            "location": "/api/4.0.0-M69/#lossyfrequent-window",
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.",
            "title": "lossyFrequent (Window"
        },
        {
            "location": "/api/4.0.0-M69/#timebatch-window",
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch(<INT|LONG|TIME> window.time, <INT> start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.",
            "title": "timeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M69/#length-window",
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.",
            "title": "length (Window"
        },
        {
            "location": "/api/4.0.0-M69/#time-window",
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.",
            "title": "time (Window"
        },
        {
            "location": "/api/4.0.0-M69/#frequent-window",
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent(<INT> event.count, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.",
            "title": "frequent (Window"
        },
        {
            "location": "/api/4.0.0-M69/#timelength-window",
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength(<INT|LONG|TIME> window.time, <INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.",
            "title": "timeLength (Window"
        },
        {
            "location": "/api/4.0.0-M69/#cron-window",
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron(<STRING> cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.",
            "title": "cron (Window"
        },
        {
            "location": "/api/4.0.0-M69/#externaltime-window",
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.",
            "title": "externalTime (Window"
        },
        {
            "location": "/api/4.0.0-M69/#lengthbatch-window",
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.",
            "title": "lengthBatch (Window"
        },
        {
            "location": "/api/4.0.0-M69/#externaltimebatch-window",
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.",
            "title": "externalTimeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M69/#ifthenelse-function",
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.",
            "title": "ifThenElse (Function"
        },
        {
            "location": "/api/4.0.0-M69/#uuid-function",
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  <STRING> UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;",
            "title": "UUID (Function"
        },
        {
            "location": "/api/4.0.0-M69/#minimum-function",
            "text": "Returns the minimum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.",
            "title": "minimum (Function"
        },
        {
            "location": "/api/4.0.0-M69/#cast-function",
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.",
            "title": "cast (Function"
        },
        {
            "location": "/api/4.0.0-M69/#instanceofdouble-function",
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  <BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.",
            "title": "instanceOfDouble (Function"
        },
        {
            "location": "/api/4.0.0-M69/#instanceoffloat-function",
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  <BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.",
            "title": "instanceOfFloat (Function"
        },
        {
            "location": "/api/4.0.0-M69/#convert-function",
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").",
            "title": "convert (Function"
        },
        {
            "location": "/api/4.0.0-M69/#instanceoflong-function",
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  <BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfLong (Function"
        },
        {
            "location": "/api/4.0.0-M69/#instanceofinteger-function",
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  <BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfInteger (Function"
        },
        {
            "location": "/api/4.0.0-M69/#default-function",
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.",
            "title": "default (Function"
        },
        {
            "location": "/api/4.0.0-M69/#maximum-function",
            "text": "Returns the maximum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.",
            "title": "maximum (Function"
        },
        {
            "location": "/api/4.0.0-M69/#eventtimestamp-function",
            "text": "Returns the timestamp of the processed event.  Syntax  <LONG> eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.",
            "title": "eventTimestamp (Function"
        },
        {
            "location": "/api/4.0.0-M69/#instanceofboolean-function",
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  <BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.",
            "title": "instanceOfBoolean (Function"
        },
        {
            "location": "/api/4.0.0-M69/#coalesce-function",
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.",
            "title": "coalesce (Function"
        },
        {
            "location": "/api/4.0.0-M69/#currenttimemillis-function",
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  <LONG> currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.",
            "title": "currentTimeMillis (Function"
        },
        {
            "location": "/api/4.0.0-M69/#instanceofstring-function",
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  <BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.",
            "title": "instanceOfString (Function"
        },
        {
            "location": "/api/4.0.0-M69/#log-stream-processor",
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;  This will log message and fooStream:events.",
            "title": "log (Stream Processor"
        },
        {
            "location": "/api/4.0.0-M69/#max-aggregate-function",
            "text": "Returns the maximum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.",
            "title": "max (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M69/#avg-aggregate-function",
            "text": "Calculates the average for all the events.  Syntax  <DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.",
            "title": "avg (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M69/#distinctcount-aggregate-function",
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  <LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\" \u00a0\"WEB_PAGE_3\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\"",
            "title": "distinctCount (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M69/#maxforever-aggregate-function",
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.",
            "title": "maxForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M69/#stddev-aggregate-function",
            "text": "Returns the calculated standard deviation for all the events.  Syntax  <DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.",
            "title": "stdDev (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M69/#count-aggregate-function",
            "text": "Returns the count of all the events.  Syntax  <LONG> count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.",
            "title": "count (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M69/#min-aggregate-function",
            "text": "Returns the minimum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.",
            "title": "min (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M69/#sum-aggregate-function",
            "text": "Returns the sum for all the events.  Syntax  <LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.",
            "title": "sum (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M69/#minforever-aggregate-function",
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.",
            "title": "minForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M69/#pol2cart-stream-function",
            "text": "The pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "pol2Cart (Stream Function"
        },
        {
            "location": "/api/4.0.0-M70/",
            "text": "API Docs\n\u00b6\n\n\nSink\n\u00b6\n\n\ninMemory \n(\nSink\n)\n\u00b6\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\u00b6\n\n\npassThrough \n(\nSink Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\u00b6\n\n\npassThrough \n(\nSource Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\u00b6\n\n\ninMemory \n(\nSource\n)\n\u00b6\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\u00b6\n\n\nsort \n(\nWindow\n)\n\u00b6\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(<INT> window.length, <STRING> attribute, <STRING> order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(<INT|LONG|TIME> window.time, <INT> start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(\nWindow\n)\n\u00b6\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(<INT> event.count, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(<INT|LONG|TIME> window.time, <INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(\nWindow\n)\n\u00b6\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(<STRING> cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(\nFunction\n)\n\u00b6\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(\nFunction\n)\n\u00b6\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\n<STRING> UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(\nFunction\n)\n\u00b6\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(\nFunction\n)\n\u00b6\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(\nFunction\n)\n\u00b6\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(\nFunction\n)\n\u00b6\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(\nFunction\n)\n\u00b6\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(\nFunction\n)\n\u00b6\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\n<LONG> eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(\nFunction\n)\n\u00b6\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(\nFunction\n)\n\u00b6\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\n<LONG> currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(\nStream Processor\n)\n\u00b6\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(\nAggregate Function\n)\n\u00b6\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\n<LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\u00a0\"WEB_PAGE_3\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\n<LONG> count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\n<LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(\nStream Function\n)\n\u00b6\n\n\nThe pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "4.0.0-M70"
        },
        {
            "location": "/api/4.0.0-M70/#api-docs",
            "text": "",
            "title": "API Docs"
        },
        {
            "location": "/api/4.0.0-M70/#sink",
            "text": "",
            "title": "Sink"
        },
        {
            "location": "/api/4.0.0-M70/#inmemory-sink",
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.",
            "title": "inMemory (Sink"
        },
        {
            "location": "/api/4.0.0-M70/#sinkmapper",
            "text": "",
            "title": "Sinkmapper"
        },
        {
            "location": "/api/4.0.0-M70/#passthrough-sink-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.",
            "title": "passThrough (Sink Mapper"
        },
        {
            "location": "/api/4.0.0-M70/#sourcemapper",
            "text": "",
            "title": "Sourcemapper"
        },
        {
            "location": "/api/4.0.0-M70/#passthrough-source-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.",
            "title": "passThrough (Source Mapper"
        },
        {
            "location": "/api/4.0.0-M70/#source",
            "text": "",
            "title": "Source"
        },
        {
            "location": "/api/4.0.0-M70/#inmemory-source",
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.",
            "title": "inMemory (Source"
        },
        {
            "location": "/api/4.0.0-M70/#core",
            "text": "",
            "title": "Core"
        },
        {
            "location": "/api/4.0.0-M70/#sort-window",
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort(<INT> window.length, <STRING> attribute, <STRING> order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.",
            "title": "sort (Window"
        },
        {
            "location": "/api/4.0.0-M70/#lossyfrequent-window",
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.",
            "title": "lossyFrequent (Window"
        },
        {
            "location": "/api/4.0.0-M70/#timebatch-window",
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch(<INT|LONG|TIME> window.time, <INT> start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.",
            "title": "timeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M70/#length-window",
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.",
            "title": "length (Window"
        },
        {
            "location": "/api/4.0.0-M70/#time-window",
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.",
            "title": "time (Window"
        },
        {
            "location": "/api/4.0.0-M70/#frequent-window",
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent(<INT> event.count, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.",
            "title": "frequent (Window"
        },
        {
            "location": "/api/4.0.0-M70/#timelength-window",
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength(<INT|LONG|TIME> window.time, <INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.",
            "title": "timeLength (Window"
        },
        {
            "location": "/api/4.0.0-M70/#cron-window",
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron(<STRING> cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.",
            "title": "cron (Window"
        },
        {
            "location": "/api/4.0.0-M70/#externaltime-window",
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.",
            "title": "externalTime (Window"
        },
        {
            "location": "/api/4.0.0-M70/#lengthbatch-window",
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.",
            "title": "lengthBatch (Window"
        },
        {
            "location": "/api/4.0.0-M70/#externaltimebatch-window",
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.",
            "title": "externalTimeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M70/#ifthenelse-function",
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.",
            "title": "ifThenElse (Function"
        },
        {
            "location": "/api/4.0.0-M70/#uuid-function",
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  <STRING> UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;",
            "title": "UUID (Function"
        },
        {
            "location": "/api/4.0.0-M70/#minimum-function",
            "text": "Returns the minimum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.",
            "title": "minimum (Function"
        },
        {
            "location": "/api/4.0.0-M70/#cast-function",
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.",
            "title": "cast (Function"
        },
        {
            "location": "/api/4.0.0-M70/#instanceofdouble-function",
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  <BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.",
            "title": "instanceOfDouble (Function"
        },
        {
            "location": "/api/4.0.0-M70/#instanceoffloat-function",
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  <BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.",
            "title": "instanceOfFloat (Function"
        },
        {
            "location": "/api/4.0.0-M70/#convert-function",
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").",
            "title": "convert (Function"
        },
        {
            "location": "/api/4.0.0-M70/#instanceoflong-function",
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  <BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfLong (Function"
        },
        {
            "location": "/api/4.0.0-M70/#instanceofinteger-function",
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  <BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfInteger (Function"
        },
        {
            "location": "/api/4.0.0-M70/#default-function",
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.",
            "title": "default (Function"
        },
        {
            "location": "/api/4.0.0-M70/#maximum-function",
            "text": "Returns the maximum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.",
            "title": "maximum (Function"
        },
        {
            "location": "/api/4.0.0-M70/#eventtimestamp-function",
            "text": "Returns the timestamp of the processed event.  Syntax  <LONG> eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.",
            "title": "eventTimestamp (Function"
        },
        {
            "location": "/api/4.0.0-M70/#instanceofboolean-function",
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  <BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.",
            "title": "instanceOfBoolean (Function"
        },
        {
            "location": "/api/4.0.0-M70/#coalesce-function",
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.",
            "title": "coalesce (Function"
        },
        {
            "location": "/api/4.0.0-M70/#currenttimemillis-function",
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  <LONG> currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.",
            "title": "currentTimeMillis (Function"
        },
        {
            "location": "/api/4.0.0-M70/#instanceofstring-function",
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  <BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.",
            "title": "instanceOfString (Function"
        },
        {
            "location": "/api/4.0.0-M70/#log-stream-processor",
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;  This will log message and fooStream:events.",
            "title": "log (Stream Processor"
        },
        {
            "location": "/api/4.0.0-M70/#max-aggregate-function",
            "text": "Returns the maximum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.",
            "title": "max (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M70/#avg-aggregate-function",
            "text": "Calculates the average for all the events.  Syntax  <DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.",
            "title": "avg (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M70/#distinctcount-aggregate-function",
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  <LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\" \u00a0\"WEB_PAGE_3\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\"",
            "title": "distinctCount (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M70/#maxforever-aggregate-function",
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.",
            "title": "maxForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M70/#stddev-aggregate-function",
            "text": "Returns the calculated standard deviation for all the events.  Syntax  <DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.",
            "title": "stdDev (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M70/#count-aggregate-function",
            "text": "Returns the count of all the events.  Syntax  <LONG> count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.",
            "title": "count (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M70/#min-aggregate-function",
            "text": "Returns the minimum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.",
            "title": "min (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M70/#sum-aggregate-function",
            "text": "Returns the sum for all the events.  Syntax  <LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.",
            "title": "sum (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M70/#minforever-aggregate-function",
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.",
            "title": "minForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M70/#pol2cart-stream-function",
            "text": "The pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "pol2Cart (Stream Function"
        },
        {
            "location": "/api/4.0.0-M71/",
            "text": "API Docs\n\u00b6\n\n\nSink\n\u00b6\n\n\ninMemory \n(\nSink\n)\n\u00b6\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\u00b6\n\n\npassThrough \n(\nSink Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\u00b6\n\n\npassThrough \n(\nSource Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\u00b6\n\n\ninMemory \n(\nSource\n)\n\u00b6\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\u00b6\n\n\nsort \n(\nWindow\n)\n\u00b6\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(<INT> window.length, <STRING> attribute, <STRING> order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(<INT|LONG|TIME> window.time, <INT> start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(\nWindow\n)\n\u00b6\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(<INT> event.count, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(<INT|LONG|TIME> window.time, <INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(\nWindow\n)\n\u00b6\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(<STRING> cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(\nFunction\n)\n\u00b6\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(\nFunction\n)\n\u00b6\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\n<STRING> UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(\nFunction\n)\n\u00b6\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(\nFunction\n)\n\u00b6\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(\nFunction\n)\n\u00b6\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(\nFunction\n)\n\u00b6\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(\nFunction\n)\n\u00b6\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(\nFunction\n)\n\u00b6\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\n<LONG> eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(\nFunction\n)\n\u00b6\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(\nFunction\n)\n\u00b6\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\n<LONG> currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(\nStream Processor\n)\n\u00b6\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(\nAggregate Function\n)\n\u00b6\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\n<LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\u00a0\"WEB_PAGE_3\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\n<LONG> count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\n<LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(\nStream Function\n)\n\u00b6\n\n\nThe pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "4.0.0-M71"
        },
        {
            "location": "/api/4.0.0-M71/#api-docs",
            "text": "",
            "title": "API Docs"
        },
        {
            "location": "/api/4.0.0-M71/#sink",
            "text": "",
            "title": "Sink"
        },
        {
            "location": "/api/4.0.0-M71/#inmemory-sink",
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.",
            "title": "inMemory (Sink"
        },
        {
            "location": "/api/4.0.0-M71/#sinkmapper",
            "text": "",
            "title": "Sinkmapper"
        },
        {
            "location": "/api/4.0.0-M71/#passthrough-sink-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.",
            "title": "passThrough (Sink Mapper"
        },
        {
            "location": "/api/4.0.0-M71/#sourcemapper",
            "text": "",
            "title": "Sourcemapper"
        },
        {
            "location": "/api/4.0.0-M71/#passthrough-source-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.",
            "title": "passThrough (Source Mapper"
        },
        {
            "location": "/api/4.0.0-M71/#source",
            "text": "",
            "title": "Source"
        },
        {
            "location": "/api/4.0.0-M71/#inmemory-source",
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.",
            "title": "inMemory (Source"
        },
        {
            "location": "/api/4.0.0-M71/#core",
            "text": "",
            "title": "Core"
        },
        {
            "location": "/api/4.0.0-M71/#sort-window",
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort(<INT> window.length, <STRING> attribute, <STRING> order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.",
            "title": "sort (Window"
        },
        {
            "location": "/api/4.0.0-M71/#lossyfrequent-window",
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.",
            "title": "lossyFrequent (Window"
        },
        {
            "location": "/api/4.0.0-M71/#timebatch-window",
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch(<INT|LONG|TIME> window.time, <INT> start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.",
            "title": "timeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M71/#length-window",
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.",
            "title": "length (Window"
        },
        {
            "location": "/api/4.0.0-M71/#time-window",
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.",
            "title": "time (Window"
        },
        {
            "location": "/api/4.0.0-M71/#frequent-window",
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent(<INT> event.count, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.",
            "title": "frequent (Window"
        },
        {
            "location": "/api/4.0.0-M71/#timelength-window",
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength(<INT|LONG|TIME> window.time, <INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.",
            "title": "timeLength (Window"
        },
        {
            "location": "/api/4.0.0-M71/#cron-window",
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron(<STRING> cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.",
            "title": "cron (Window"
        },
        {
            "location": "/api/4.0.0-M71/#externaltime-window",
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.",
            "title": "externalTime (Window"
        },
        {
            "location": "/api/4.0.0-M71/#lengthbatch-window",
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.",
            "title": "lengthBatch (Window"
        },
        {
            "location": "/api/4.0.0-M71/#externaltimebatch-window",
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.",
            "title": "externalTimeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M71/#ifthenelse-function",
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.",
            "title": "ifThenElse (Function"
        },
        {
            "location": "/api/4.0.0-M71/#uuid-function",
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  <STRING> UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;",
            "title": "UUID (Function"
        },
        {
            "location": "/api/4.0.0-M71/#minimum-function",
            "text": "Returns the minimum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.",
            "title": "minimum (Function"
        },
        {
            "location": "/api/4.0.0-M71/#cast-function",
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.",
            "title": "cast (Function"
        },
        {
            "location": "/api/4.0.0-M71/#instanceofdouble-function",
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  <BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.",
            "title": "instanceOfDouble (Function"
        },
        {
            "location": "/api/4.0.0-M71/#instanceoffloat-function",
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  <BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.",
            "title": "instanceOfFloat (Function"
        },
        {
            "location": "/api/4.0.0-M71/#convert-function",
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").",
            "title": "convert (Function"
        },
        {
            "location": "/api/4.0.0-M71/#instanceoflong-function",
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  <BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfLong (Function"
        },
        {
            "location": "/api/4.0.0-M71/#instanceofinteger-function",
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  <BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfInteger (Function"
        },
        {
            "location": "/api/4.0.0-M71/#default-function",
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.",
            "title": "default (Function"
        },
        {
            "location": "/api/4.0.0-M71/#maximum-function",
            "text": "Returns the maximum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.",
            "title": "maximum (Function"
        },
        {
            "location": "/api/4.0.0-M71/#eventtimestamp-function",
            "text": "Returns the timestamp of the processed event.  Syntax  <LONG> eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.",
            "title": "eventTimestamp (Function"
        },
        {
            "location": "/api/4.0.0-M71/#instanceofboolean-function",
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  <BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.",
            "title": "instanceOfBoolean (Function"
        },
        {
            "location": "/api/4.0.0-M71/#coalesce-function",
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.",
            "title": "coalesce (Function"
        },
        {
            "location": "/api/4.0.0-M71/#currenttimemillis-function",
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  <LONG> currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.",
            "title": "currentTimeMillis (Function"
        },
        {
            "location": "/api/4.0.0-M71/#instanceofstring-function",
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  <BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.",
            "title": "instanceOfString (Function"
        },
        {
            "location": "/api/4.0.0-M71/#log-stream-processor",
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;  This will log message and fooStream:events.",
            "title": "log (Stream Processor"
        },
        {
            "location": "/api/4.0.0-M71/#max-aggregate-function",
            "text": "Returns the maximum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.",
            "title": "max (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M71/#avg-aggregate-function",
            "text": "Calculates the average for all the events.  Syntax  <DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.",
            "title": "avg (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M71/#distinctcount-aggregate-function",
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  <LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\" \u00a0\"WEB_PAGE_3\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\"",
            "title": "distinctCount (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M71/#maxforever-aggregate-function",
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.",
            "title": "maxForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M71/#stddev-aggregate-function",
            "text": "Returns the calculated standard deviation for all the events.  Syntax  <DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.",
            "title": "stdDev (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M71/#count-aggregate-function",
            "text": "Returns the count of all the events.  Syntax  <LONG> count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.",
            "title": "count (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M71/#min-aggregate-function",
            "text": "Returns the minimum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.",
            "title": "min (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M71/#sum-aggregate-function",
            "text": "Returns the sum for all the events.  Syntax  <LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.",
            "title": "sum (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M71/#minforever-aggregate-function",
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.",
            "title": "minForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M71/#pol2cart-stream-function",
            "text": "The pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "pol2Cart (Stream Function"
        },
        {
            "location": "/api/4.0.0-M72/",
            "text": "API Docs\n\u00b6\n\n\nSink\n\u00b6\n\n\ninMemory \n(\nSink\n)\n\u00b6\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\u00b6\n\n\npassThrough \n(\nSink Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\u00b6\n\n\npassThrough \n(\nSource Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\u00b6\n\n\ninMemory \n(\nSource\n)\n\u00b6\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\u00b6\n\n\nsort \n(\nWindow\n)\n\u00b6\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(<INT> window.length, <STRING> attribute, <STRING> order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(<INT|LONG|TIME> window.time, <INT> start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(\nWindow\n)\n\u00b6\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(<INT> event.count, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(<INT|LONG|TIME> window.time, <INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(\nWindow\n)\n\u00b6\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(<STRING> cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(\nFunction\n)\n\u00b6\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(\nFunction\n)\n\u00b6\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\n<STRING> UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(\nFunction\n)\n\u00b6\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(\nFunction\n)\n\u00b6\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(\nFunction\n)\n\u00b6\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(\nFunction\n)\n\u00b6\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(\nFunction\n)\n\u00b6\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(\nFunction\n)\n\u00b6\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\n<LONG> eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(\nFunction\n)\n\u00b6\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(\nFunction\n)\n\u00b6\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\n<LONG> currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(\nStream Processor\n)\n\u00b6\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(\nAggregate Function\n)\n\u00b6\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\n<LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\u00a0\"WEB_PAGE_3\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\n<LONG> count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\n<LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(\nStream Function\n)\n\u00b6\n\n\nThe pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "4.0.0-M72"
        },
        {
            "location": "/api/4.0.0-M72/#api-docs",
            "text": "",
            "title": "API Docs"
        },
        {
            "location": "/api/4.0.0-M72/#sink",
            "text": "",
            "title": "Sink"
        },
        {
            "location": "/api/4.0.0-M72/#inmemory-sink",
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.",
            "title": "inMemory (Sink"
        },
        {
            "location": "/api/4.0.0-M72/#sinkmapper",
            "text": "",
            "title": "Sinkmapper"
        },
        {
            "location": "/api/4.0.0-M72/#passthrough-sink-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.",
            "title": "passThrough (Sink Mapper"
        },
        {
            "location": "/api/4.0.0-M72/#sourcemapper",
            "text": "",
            "title": "Sourcemapper"
        },
        {
            "location": "/api/4.0.0-M72/#passthrough-source-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.",
            "title": "passThrough (Source Mapper"
        },
        {
            "location": "/api/4.0.0-M72/#source",
            "text": "",
            "title": "Source"
        },
        {
            "location": "/api/4.0.0-M72/#inmemory-source",
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.",
            "title": "inMemory (Source"
        },
        {
            "location": "/api/4.0.0-M72/#core",
            "text": "",
            "title": "Core"
        },
        {
            "location": "/api/4.0.0-M72/#sort-window",
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort(<INT> window.length, <STRING> attribute, <STRING> order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.",
            "title": "sort (Window"
        },
        {
            "location": "/api/4.0.0-M72/#lossyfrequent-window",
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.",
            "title": "lossyFrequent (Window"
        },
        {
            "location": "/api/4.0.0-M72/#timebatch-window",
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch(<INT|LONG|TIME> window.time, <INT> start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.",
            "title": "timeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M72/#length-window",
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.",
            "title": "length (Window"
        },
        {
            "location": "/api/4.0.0-M72/#time-window",
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.",
            "title": "time (Window"
        },
        {
            "location": "/api/4.0.0-M72/#frequent-window",
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent(<INT> event.count, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.",
            "title": "frequent (Window"
        },
        {
            "location": "/api/4.0.0-M72/#timelength-window",
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength(<INT|LONG|TIME> window.time, <INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.",
            "title": "timeLength (Window"
        },
        {
            "location": "/api/4.0.0-M72/#cron-window",
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron(<STRING> cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.",
            "title": "cron (Window"
        },
        {
            "location": "/api/4.0.0-M72/#externaltime-window",
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.",
            "title": "externalTime (Window"
        },
        {
            "location": "/api/4.0.0-M72/#lengthbatch-window",
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.",
            "title": "lengthBatch (Window"
        },
        {
            "location": "/api/4.0.0-M72/#externaltimebatch-window",
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.",
            "title": "externalTimeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M72/#ifthenelse-function",
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.",
            "title": "ifThenElse (Function"
        },
        {
            "location": "/api/4.0.0-M72/#uuid-function",
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  <STRING> UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;",
            "title": "UUID (Function"
        },
        {
            "location": "/api/4.0.0-M72/#minimum-function",
            "text": "Returns the minimum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.",
            "title": "minimum (Function"
        },
        {
            "location": "/api/4.0.0-M72/#cast-function",
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.",
            "title": "cast (Function"
        },
        {
            "location": "/api/4.0.0-M72/#instanceofdouble-function",
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  <BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.",
            "title": "instanceOfDouble (Function"
        },
        {
            "location": "/api/4.0.0-M72/#instanceoffloat-function",
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  <BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.",
            "title": "instanceOfFloat (Function"
        },
        {
            "location": "/api/4.0.0-M72/#convert-function",
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").",
            "title": "convert (Function"
        },
        {
            "location": "/api/4.0.0-M72/#instanceoflong-function",
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  <BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfLong (Function"
        },
        {
            "location": "/api/4.0.0-M72/#instanceofinteger-function",
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  <BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfInteger (Function"
        },
        {
            "location": "/api/4.0.0-M72/#default-function",
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.",
            "title": "default (Function"
        },
        {
            "location": "/api/4.0.0-M72/#maximum-function",
            "text": "Returns the maximum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.",
            "title": "maximum (Function"
        },
        {
            "location": "/api/4.0.0-M72/#eventtimestamp-function",
            "text": "Returns the timestamp of the processed event.  Syntax  <LONG> eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.",
            "title": "eventTimestamp (Function"
        },
        {
            "location": "/api/4.0.0-M72/#instanceofboolean-function",
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  <BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.",
            "title": "instanceOfBoolean (Function"
        },
        {
            "location": "/api/4.0.0-M72/#coalesce-function",
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.",
            "title": "coalesce (Function"
        },
        {
            "location": "/api/4.0.0-M72/#currenttimemillis-function",
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  <LONG> currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.",
            "title": "currentTimeMillis (Function"
        },
        {
            "location": "/api/4.0.0-M72/#instanceofstring-function",
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  <BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.",
            "title": "instanceOfString (Function"
        },
        {
            "location": "/api/4.0.0-M72/#log-stream-processor",
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;  This will log message and fooStream:events.",
            "title": "log (Stream Processor"
        },
        {
            "location": "/api/4.0.0-M72/#max-aggregate-function",
            "text": "Returns the maximum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.",
            "title": "max (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M72/#avg-aggregate-function",
            "text": "Calculates the average for all the events.  Syntax  <DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.",
            "title": "avg (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M72/#distinctcount-aggregate-function",
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  <LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\" \u00a0\"WEB_PAGE_3\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\"",
            "title": "distinctCount (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M72/#maxforever-aggregate-function",
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.",
            "title": "maxForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M72/#stddev-aggregate-function",
            "text": "Returns the calculated standard deviation for all the events.  Syntax  <DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.",
            "title": "stdDev (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M72/#count-aggregate-function",
            "text": "Returns the count of all the events.  Syntax  <LONG> count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.",
            "title": "count (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M72/#min-aggregate-function",
            "text": "Returns the minimum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.",
            "title": "min (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M72/#sum-aggregate-function",
            "text": "Returns the sum for all the events.  Syntax  <LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.",
            "title": "sum (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M72/#minforever-aggregate-function",
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.",
            "title": "minForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M72/#pol2cart-stream-function",
            "text": "The pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "pol2Cart (Stream Function"
        },
        {
            "location": "/api/4.0.0-M73/",
            "text": "API Docs\n\u00b6\n\n\nSink\n\u00b6\n\n\ninMemory \n(\nSink\n)\n\u00b6\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\u00b6\n\n\npassThrough \n(\nSink Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\u00b6\n\n\npassThrough \n(\nSource Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\u00b6\n\n\ninMemory \n(\nSource\n)\n\u00b6\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\u00b6\n\n\nsort \n(\nWindow\n)\n\u00b6\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(<INT> window.length, <STRING> attribute, <STRING> order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(<INT|LONG|TIME> window.time, <INT> start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(\nWindow\n)\n\u00b6\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(<INT> event.count, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(<INT|LONG|TIME> window.time, <INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(\nWindow\n)\n\u00b6\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(<STRING> cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(\nFunction\n)\n\u00b6\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(\nFunction\n)\n\u00b6\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\n<STRING> UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(\nFunction\n)\n\u00b6\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(\nFunction\n)\n\u00b6\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(\nFunction\n)\n\u00b6\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(\nFunction\n)\n\u00b6\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(\nFunction\n)\n\u00b6\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(\nFunction\n)\n\u00b6\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\n<LONG> eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(\nFunction\n)\n\u00b6\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(\nFunction\n)\n\u00b6\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\n<LONG> currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(\nStream Processor\n)\n\u00b6\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(\nAggregate Function\n)\n\u00b6\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\n<LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\u00a0\"WEB_PAGE_3\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\n<LONG> count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\n<LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(\nStream Function\n)\n\u00b6\n\n\nThe pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "4.0.0-M73"
        },
        {
            "location": "/api/4.0.0-M73/#api-docs",
            "text": "",
            "title": "API Docs"
        },
        {
            "location": "/api/4.0.0-M73/#sink",
            "text": "",
            "title": "Sink"
        },
        {
            "location": "/api/4.0.0-M73/#inmemory-sink",
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.",
            "title": "inMemory (Sink"
        },
        {
            "location": "/api/4.0.0-M73/#sinkmapper",
            "text": "",
            "title": "Sinkmapper"
        },
        {
            "location": "/api/4.0.0-M73/#passthrough-sink-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.",
            "title": "passThrough (Sink Mapper"
        },
        {
            "location": "/api/4.0.0-M73/#sourcemapper",
            "text": "",
            "title": "Sourcemapper"
        },
        {
            "location": "/api/4.0.0-M73/#passthrough-source-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.",
            "title": "passThrough (Source Mapper"
        },
        {
            "location": "/api/4.0.0-M73/#source",
            "text": "",
            "title": "Source"
        },
        {
            "location": "/api/4.0.0-M73/#inmemory-source",
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.",
            "title": "inMemory (Source"
        },
        {
            "location": "/api/4.0.0-M73/#core",
            "text": "",
            "title": "Core"
        },
        {
            "location": "/api/4.0.0-M73/#sort-window",
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort(<INT> window.length, <STRING> attribute, <STRING> order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.",
            "title": "sort (Window"
        },
        {
            "location": "/api/4.0.0-M73/#lossyfrequent-window",
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.",
            "title": "lossyFrequent (Window"
        },
        {
            "location": "/api/4.0.0-M73/#timebatch-window",
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch(<INT|LONG|TIME> window.time, <INT> start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.",
            "title": "timeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M73/#length-window",
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.",
            "title": "length (Window"
        },
        {
            "location": "/api/4.0.0-M73/#time-window",
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.",
            "title": "time (Window"
        },
        {
            "location": "/api/4.0.0-M73/#frequent-window",
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent(<INT> event.count, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.",
            "title": "frequent (Window"
        },
        {
            "location": "/api/4.0.0-M73/#timelength-window",
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength(<INT|LONG|TIME> window.time, <INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.",
            "title": "timeLength (Window"
        },
        {
            "location": "/api/4.0.0-M73/#cron-window",
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron(<STRING> cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.",
            "title": "cron (Window"
        },
        {
            "location": "/api/4.0.0-M73/#externaltime-window",
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.",
            "title": "externalTime (Window"
        },
        {
            "location": "/api/4.0.0-M73/#lengthbatch-window",
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.",
            "title": "lengthBatch (Window"
        },
        {
            "location": "/api/4.0.0-M73/#externaltimebatch-window",
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.",
            "title": "externalTimeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M73/#ifthenelse-function",
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.",
            "title": "ifThenElse (Function"
        },
        {
            "location": "/api/4.0.0-M73/#uuid-function",
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  <STRING> UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;",
            "title": "UUID (Function"
        },
        {
            "location": "/api/4.0.0-M73/#minimum-function",
            "text": "Returns the minimum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.",
            "title": "minimum (Function"
        },
        {
            "location": "/api/4.0.0-M73/#cast-function",
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.",
            "title": "cast (Function"
        },
        {
            "location": "/api/4.0.0-M73/#instanceofdouble-function",
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  <BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.",
            "title": "instanceOfDouble (Function"
        },
        {
            "location": "/api/4.0.0-M73/#instanceoffloat-function",
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  <BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.",
            "title": "instanceOfFloat (Function"
        },
        {
            "location": "/api/4.0.0-M73/#convert-function",
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").",
            "title": "convert (Function"
        },
        {
            "location": "/api/4.0.0-M73/#instanceoflong-function",
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  <BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfLong (Function"
        },
        {
            "location": "/api/4.0.0-M73/#instanceofinteger-function",
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  <BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfInteger (Function"
        },
        {
            "location": "/api/4.0.0-M73/#default-function",
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.",
            "title": "default (Function"
        },
        {
            "location": "/api/4.0.0-M73/#maximum-function",
            "text": "Returns the maximum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.",
            "title": "maximum (Function"
        },
        {
            "location": "/api/4.0.0-M73/#eventtimestamp-function",
            "text": "Returns the timestamp of the processed event.  Syntax  <LONG> eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.",
            "title": "eventTimestamp (Function"
        },
        {
            "location": "/api/4.0.0-M73/#instanceofboolean-function",
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  <BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.",
            "title": "instanceOfBoolean (Function"
        },
        {
            "location": "/api/4.0.0-M73/#coalesce-function",
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.",
            "title": "coalesce (Function"
        },
        {
            "location": "/api/4.0.0-M73/#currenttimemillis-function",
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  <LONG> currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.",
            "title": "currentTimeMillis (Function"
        },
        {
            "location": "/api/4.0.0-M73/#instanceofstring-function",
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  <BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.",
            "title": "instanceOfString (Function"
        },
        {
            "location": "/api/4.0.0-M73/#log-stream-processor",
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;  This will log message and fooStream:events.",
            "title": "log (Stream Processor"
        },
        {
            "location": "/api/4.0.0-M73/#max-aggregate-function",
            "text": "Returns the maximum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.",
            "title": "max (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M73/#avg-aggregate-function",
            "text": "Calculates the average for all the events.  Syntax  <DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.",
            "title": "avg (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M73/#distinctcount-aggregate-function",
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  <LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\" \u00a0\"WEB_PAGE_3\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\"",
            "title": "distinctCount (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M73/#maxforever-aggregate-function",
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.",
            "title": "maxForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M73/#stddev-aggregate-function",
            "text": "Returns the calculated standard deviation for all the events.  Syntax  <DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.",
            "title": "stdDev (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M73/#count-aggregate-function",
            "text": "Returns the count of all the events.  Syntax  <LONG> count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.",
            "title": "count (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M73/#min-aggregate-function",
            "text": "Returns the minimum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.",
            "title": "min (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M73/#sum-aggregate-function",
            "text": "Returns the sum for all the events.  Syntax  <LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.",
            "title": "sum (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M73/#minforever-aggregate-function",
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.",
            "title": "minForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M73/#pol2cart-stream-function",
            "text": "The pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "pol2Cart (Stream Function"
        },
        {
            "location": "/api/4.0.0-M74/",
            "text": "API Docs\n\u00b6\n\n\nSink\n\u00b6\n\n\ninMemory \n(\nSink\n)\n\u00b6\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\u00b6\n\n\npassThrough \n(\nSink Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\u00b6\n\n\npassThrough \n(\nSource Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\u00b6\n\n\ninMemory \n(\nSource\n)\n\u00b6\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\u00b6\n\n\nsort \n(\nWindow\n)\n\u00b6\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(<INT> window.length, <STRING> attribute, <STRING> order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(<INT|LONG|TIME> window.time, <INT> start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(\nWindow\n)\n\u00b6\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(<INT> event.count, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(<INT|LONG|TIME> window.time, <INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(\nWindow\n)\n\u00b6\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(<STRING> cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(\nFunction\n)\n\u00b6\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(\nFunction\n)\n\u00b6\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\n<STRING> UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(\nFunction\n)\n\u00b6\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(\nFunction\n)\n\u00b6\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(\nFunction\n)\n\u00b6\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(\nFunction\n)\n\u00b6\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(\nFunction\n)\n\u00b6\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(\nFunction\n)\n\u00b6\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\n<LONG> eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(\nFunction\n)\n\u00b6\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(\nFunction\n)\n\u00b6\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\n<LONG> currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(\nStream Processor\n)\n\u00b6\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(\nAggregate Function\n)\n\u00b6\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\n<LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\u00a0\"WEB_PAGE_3\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\n<LONG> count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\n<LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(\nStream Function\n)\n\u00b6\n\n\nThe pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "4.0.0-M74"
        },
        {
            "location": "/api/4.0.0-M74/#api-docs",
            "text": "",
            "title": "API Docs"
        },
        {
            "location": "/api/4.0.0-M74/#sink",
            "text": "",
            "title": "Sink"
        },
        {
            "location": "/api/4.0.0-M74/#inmemory-sink",
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.",
            "title": "inMemory (Sink"
        },
        {
            "location": "/api/4.0.0-M74/#sinkmapper",
            "text": "",
            "title": "Sinkmapper"
        },
        {
            "location": "/api/4.0.0-M74/#passthrough-sink-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.",
            "title": "passThrough (Sink Mapper"
        },
        {
            "location": "/api/4.0.0-M74/#sourcemapper",
            "text": "",
            "title": "Sourcemapper"
        },
        {
            "location": "/api/4.0.0-M74/#passthrough-source-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.",
            "title": "passThrough (Source Mapper"
        },
        {
            "location": "/api/4.0.0-M74/#source",
            "text": "",
            "title": "Source"
        },
        {
            "location": "/api/4.0.0-M74/#inmemory-source",
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.",
            "title": "inMemory (Source"
        },
        {
            "location": "/api/4.0.0-M74/#core",
            "text": "",
            "title": "Core"
        },
        {
            "location": "/api/4.0.0-M74/#sort-window",
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort(<INT> window.length, <STRING> attribute, <STRING> order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.",
            "title": "sort (Window"
        },
        {
            "location": "/api/4.0.0-M74/#lossyfrequent-window",
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.",
            "title": "lossyFrequent (Window"
        },
        {
            "location": "/api/4.0.0-M74/#timebatch-window",
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch(<INT|LONG|TIME> window.time, <INT> start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.",
            "title": "timeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M74/#length-window",
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.",
            "title": "length (Window"
        },
        {
            "location": "/api/4.0.0-M74/#time-window",
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.",
            "title": "time (Window"
        },
        {
            "location": "/api/4.0.0-M74/#frequent-window",
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent(<INT> event.count, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.",
            "title": "frequent (Window"
        },
        {
            "location": "/api/4.0.0-M74/#timelength-window",
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength(<INT|LONG|TIME> window.time, <INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.",
            "title": "timeLength (Window"
        },
        {
            "location": "/api/4.0.0-M74/#cron-window",
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron(<STRING> cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.",
            "title": "cron (Window"
        },
        {
            "location": "/api/4.0.0-M74/#externaltime-window",
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.",
            "title": "externalTime (Window"
        },
        {
            "location": "/api/4.0.0-M74/#lengthbatch-window",
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.",
            "title": "lengthBatch (Window"
        },
        {
            "location": "/api/4.0.0-M74/#externaltimebatch-window",
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.",
            "title": "externalTimeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M74/#ifthenelse-function",
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.",
            "title": "ifThenElse (Function"
        },
        {
            "location": "/api/4.0.0-M74/#uuid-function",
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  <STRING> UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;",
            "title": "UUID (Function"
        },
        {
            "location": "/api/4.0.0-M74/#minimum-function",
            "text": "Returns the minimum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.",
            "title": "minimum (Function"
        },
        {
            "location": "/api/4.0.0-M74/#cast-function",
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.",
            "title": "cast (Function"
        },
        {
            "location": "/api/4.0.0-M74/#instanceofdouble-function",
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  <BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.",
            "title": "instanceOfDouble (Function"
        },
        {
            "location": "/api/4.0.0-M74/#instanceoffloat-function",
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  <BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.",
            "title": "instanceOfFloat (Function"
        },
        {
            "location": "/api/4.0.0-M74/#convert-function",
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").",
            "title": "convert (Function"
        },
        {
            "location": "/api/4.0.0-M74/#instanceoflong-function",
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  <BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfLong (Function"
        },
        {
            "location": "/api/4.0.0-M74/#instanceofinteger-function",
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  <BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfInteger (Function"
        },
        {
            "location": "/api/4.0.0-M74/#default-function",
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.",
            "title": "default (Function"
        },
        {
            "location": "/api/4.0.0-M74/#maximum-function",
            "text": "Returns the maximum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.",
            "title": "maximum (Function"
        },
        {
            "location": "/api/4.0.0-M74/#eventtimestamp-function",
            "text": "Returns the timestamp of the processed event.  Syntax  <LONG> eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.",
            "title": "eventTimestamp (Function"
        },
        {
            "location": "/api/4.0.0-M74/#instanceofboolean-function",
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  <BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.",
            "title": "instanceOfBoolean (Function"
        },
        {
            "location": "/api/4.0.0-M74/#coalesce-function",
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.",
            "title": "coalesce (Function"
        },
        {
            "location": "/api/4.0.0-M74/#currenttimemillis-function",
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  <LONG> currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.",
            "title": "currentTimeMillis (Function"
        },
        {
            "location": "/api/4.0.0-M74/#instanceofstring-function",
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  <BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.",
            "title": "instanceOfString (Function"
        },
        {
            "location": "/api/4.0.0-M74/#log-stream-processor",
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;  This will log message and fooStream:events.",
            "title": "log (Stream Processor"
        },
        {
            "location": "/api/4.0.0-M74/#max-aggregate-function",
            "text": "Returns the maximum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.",
            "title": "max (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M74/#avg-aggregate-function",
            "text": "Calculates the average for all the events.  Syntax  <DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.",
            "title": "avg (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M74/#distinctcount-aggregate-function",
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  <LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\" \u00a0\"WEB_PAGE_3\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\"",
            "title": "distinctCount (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M74/#maxforever-aggregate-function",
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.",
            "title": "maxForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M74/#stddev-aggregate-function",
            "text": "Returns the calculated standard deviation for all the events.  Syntax  <DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.",
            "title": "stdDev (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M74/#count-aggregate-function",
            "text": "Returns the count of all the events.  Syntax  <LONG> count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.",
            "title": "count (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M74/#min-aggregate-function",
            "text": "Returns the minimum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.",
            "title": "min (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M74/#sum-aggregate-function",
            "text": "Returns the sum for all the events.  Syntax  <LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.",
            "title": "sum (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M74/#minforever-aggregate-function",
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.",
            "title": "minForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M74/#pol2cart-stream-function",
            "text": "The pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "pol2Cart (Stream Function"
        },
        {
            "location": "/api/4.0.0-M75/",
            "text": "API Docs\n\u00b6\n\n\nSink\n\u00b6\n\n\ninMemory \n(\nSink\n)\n\u00b6\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\u00b6\n\n\npassThrough \n(\nSink Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\u00b6\n\n\npassThrough \n(\nSource Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\u00b6\n\n\ninMemory \n(\nSource\n)\n\u00b6\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\u00b6\n\n\nsort \n(\nWindow\n)\n\u00b6\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(<INT> window.length, <STRING> attribute, <STRING> order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(<INT|LONG|TIME> window.time, <INT> start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(\nWindow\n)\n\u00b6\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(<INT> event.count, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(<INT|LONG|TIME> window.time, <INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(\nWindow\n)\n\u00b6\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(<STRING> cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(\nFunction\n)\n\u00b6\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(\nFunction\n)\n\u00b6\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\n<STRING> UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(\nFunction\n)\n\u00b6\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(\nFunction\n)\n\u00b6\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(\nFunction\n)\n\u00b6\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(\nFunction\n)\n\u00b6\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(\nFunction\n)\n\u00b6\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(\nFunction\n)\n\u00b6\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\n<LONG> eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(\nFunction\n)\n\u00b6\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(\nFunction\n)\n\u00b6\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\n<LONG> currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(\nStream Processor\n)\n\u00b6\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(\nAggregate Function\n)\n\u00b6\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\n<LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\u00a0\"WEB_PAGE_3\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\n<LONG> count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\n<LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(\nStream Function\n)\n\u00b6\n\n\nThe pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "4.0.0-M75"
        },
        {
            "location": "/api/4.0.0-M75/#api-docs",
            "text": "",
            "title": "API Docs"
        },
        {
            "location": "/api/4.0.0-M75/#sink",
            "text": "",
            "title": "Sink"
        },
        {
            "location": "/api/4.0.0-M75/#inmemory-sink",
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.",
            "title": "inMemory (Sink"
        },
        {
            "location": "/api/4.0.0-M75/#sinkmapper",
            "text": "",
            "title": "Sinkmapper"
        },
        {
            "location": "/api/4.0.0-M75/#passthrough-sink-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.",
            "title": "passThrough (Sink Mapper"
        },
        {
            "location": "/api/4.0.0-M75/#sourcemapper",
            "text": "",
            "title": "Sourcemapper"
        },
        {
            "location": "/api/4.0.0-M75/#passthrough-source-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.",
            "title": "passThrough (Source Mapper"
        },
        {
            "location": "/api/4.0.0-M75/#source",
            "text": "",
            "title": "Source"
        },
        {
            "location": "/api/4.0.0-M75/#inmemory-source",
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.",
            "title": "inMemory (Source"
        },
        {
            "location": "/api/4.0.0-M75/#core",
            "text": "",
            "title": "Core"
        },
        {
            "location": "/api/4.0.0-M75/#sort-window",
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort(<INT> window.length, <STRING> attribute, <STRING> order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.",
            "title": "sort (Window"
        },
        {
            "location": "/api/4.0.0-M75/#lossyfrequent-window",
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.",
            "title": "lossyFrequent (Window"
        },
        {
            "location": "/api/4.0.0-M75/#timebatch-window",
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch(<INT|LONG|TIME> window.time, <INT> start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.",
            "title": "timeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M75/#length-window",
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.",
            "title": "length (Window"
        },
        {
            "location": "/api/4.0.0-M75/#time-window",
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.",
            "title": "time (Window"
        },
        {
            "location": "/api/4.0.0-M75/#frequent-window",
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent(<INT> event.count, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.",
            "title": "frequent (Window"
        },
        {
            "location": "/api/4.0.0-M75/#timelength-window",
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength(<INT|LONG|TIME> window.time, <INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.",
            "title": "timeLength (Window"
        },
        {
            "location": "/api/4.0.0-M75/#cron-window",
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron(<STRING> cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.",
            "title": "cron (Window"
        },
        {
            "location": "/api/4.0.0-M75/#externaltime-window",
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.",
            "title": "externalTime (Window"
        },
        {
            "location": "/api/4.0.0-M75/#lengthbatch-window",
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.",
            "title": "lengthBatch (Window"
        },
        {
            "location": "/api/4.0.0-M75/#externaltimebatch-window",
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.",
            "title": "externalTimeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M75/#ifthenelse-function",
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.",
            "title": "ifThenElse (Function"
        },
        {
            "location": "/api/4.0.0-M75/#uuid-function",
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  <STRING> UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;",
            "title": "UUID (Function"
        },
        {
            "location": "/api/4.0.0-M75/#minimum-function",
            "text": "Returns the minimum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.",
            "title": "minimum (Function"
        },
        {
            "location": "/api/4.0.0-M75/#cast-function",
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.",
            "title": "cast (Function"
        },
        {
            "location": "/api/4.0.0-M75/#instanceofdouble-function",
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  <BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.",
            "title": "instanceOfDouble (Function"
        },
        {
            "location": "/api/4.0.0-M75/#instanceoffloat-function",
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  <BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.",
            "title": "instanceOfFloat (Function"
        },
        {
            "location": "/api/4.0.0-M75/#convert-function",
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").",
            "title": "convert (Function"
        },
        {
            "location": "/api/4.0.0-M75/#instanceoflong-function",
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  <BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfLong (Function"
        },
        {
            "location": "/api/4.0.0-M75/#instanceofinteger-function",
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  <BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfInteger (Function"
        },
        {
            "location": "/api/4.0.0-M75/#default-function",
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.",
            "title": "default (Function"
        },
        {
            "location": "/api/4.0.0-M75/#maximum-function",
            "text": "Returns the maximum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.",
            "title": "maximum (Function"
        },
        {
            "location": "/api/4.0.0-M75/#eventtimestamp-function",
            "text": "Returns the timestamp of the processed event.  Syntax  <LONG> eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.",
            "title": "eventTimestamp (Function"
        },
        {
            "location": "/api/4.0.0-M75/#instanceofboolean-function",
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  <BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.",
            "title": "instanceOfBoolean (Function"
        },
        {
            "location": "/api/4.0.0-M75/#coalesce-function",
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.",
            "title": "coalesce (Function"
        },
        {
            "location": "/api/4.0.0-M75/#currenttimemillis-function",
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  <LONG> currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.",
            "title": "currentTimeMillis (Function"
        },
        {
            "location": "/api/4.0.0-M75/#instanceofstring-function",
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  <BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.",
            "title": "instanceOfString (Function"
        },
        {
            "location": "/api/4.0.0-M75/#log-stream-processor",
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;  This will log message and fooStream:events.",
            "title": "log (Stream Processor"
        },
        {
            "location": "/api/4.0.0-M75/#max-aggregate-function",
            "text": "Returns the maximum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.",
            "title": "max (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M75/#avg-aggregate-function",
            "text": "Calculates the average for all the events.  Syntax  <DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.",
            "title": "avg (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M75/#distinctcount-aggregate-function",
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  <LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\" \u00a0\"WEB_PAGE_3\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\"",
            "title": "distinctCount (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M75/#maxforever-aggregate-function",
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.",
            "title": "maxForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M75/#stddev-aggregate-function",
            "text": "Returns the calculated standard deviation for all the events.  Syntax  <DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.",
            "title": "stdDev (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M75/#count-aggregate-function",
            "text": "Returns the count of all the events.  Syntax  <LONG> count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.",
            "title": "count (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M75/#min-aggregate-function",
            "text": "Returns the minimum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.",
            "title": "min (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M75/#sum-aggregate-function",
            "text": "Returns the sum for all the events.  Syntax  <LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.",
            "title": "sum (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M75/#minforever-aggregate-function",
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.",
            "title": "minForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M75/#pol2cart-stream-function",
            "text": "The pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "pol2Cart (Stream Function"
        },
        {
            "location": "/api/4.0.0-M76/",
            "text": "API Docs\n\u00b6\n\n\nSink\n\u00b6\n\n\ninMemory \n(\nSink\n)\n\u00b6\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\u00b6\n\n\npassThrough \n(\nSink Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\u00b6\n\n\npassThrough \n(\nSource Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\u00b6\n\n\ninMemory \n(\nSource\n)\n\u00b6\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\u00b6\n\n\nsort \n(\nWindow\n)\n\u00b6\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(<INT> window.length, <STRING> attribute, <STRING> order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(<INT|LONG|TIME> window.time, <INT> start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(\nWindow\n)\n\u00b6\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(<INT> event.count, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(<INT|LONG|TIME> window.time, <INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(\nWindow\n)\n\u00b6\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(<STRING> cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(\nFunction\n)\n\u00b6\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(\nFunction\n)\n\u00b6\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\n<STRING> UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(\nFunction\n)\n\u00b6\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(\nFunction\n)\n\u00b6\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(\nFunction\n)\n\u00b6\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(\nFunction\n)\n\u00b6\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(\nFunction\n)\n\u00b6\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(\nFunction\n)\n\u00b6\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\n<LONG> eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(\nFunction\n)\n\u00b6\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(\nFunction\n)\n\u00b6\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\n<LONG> currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(\nStream Processor\n)\n\u00b6\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(\nAggregate Function\n)\n\u00b6\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\n<LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\u00a0\"WEB_PAGE_3\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\n<LONG> count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\n<LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(\nStream Function\n)\n\u00b6\n\n\nThe pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "4.0.0-M76"
        },
        {
            "location": "/api/4.0.0-M76/#api-docs",
            "text": "",
            "title": "API Docs"
        },
        {
            "location": "/api/4.0.0-M76/#sink",
            "text": "",
            "title": "Sink"
        },
        {
            "location": "/api/4.0.0-M76/#inmemory-sink",
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.",
            "title": "inMemory (Sink"
        },
        {
            "location": "/api/4.0.0-M76/#sinkmapper",
            "text": "",
            "title": "Sinkmapper"
        },
        {
            "location": "/api/4.0.0-M76/#passthrough-sink-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.",
            "title": "passThrough (Sink Mapper"
        },
        {
            "location": "/api/4.0.0-M76/#sourcemapper",
            "text": "",
            "title": "Sourcemapper"
        },
        {
            "location": "/api/4.0.0-M76/#passthrough-source-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.",
            "title": "passThrough (Source Mapper"
        },
        {
            "location": "/api/4.0.0-M76/#source",
            "text": "",
            "title": "Source"
        },
        {
            "location": "/api/4.0.0-M76/#inmemory-source",
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.",
            "title": "inMemory (Source"
        },
        {
            "location": "/api/4.0.0-M76/#core",
            "text": "",
            "title": "Core"
        },
        {
            "location": "/api/4.0.0-M76/#sort-window",
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort(<INT> window.length, <STRING> attribute, <STRING> order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.",
            "title": "sort (Window"
        },
        {
            "location": "/api/4.0.0-M76/#lossyfrequent-window",
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.",
            "title": "lossyFrequent (Window"
        },
        {
            "location": "/api/4.0.0-M76/#timebatch-window",
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch(<INT|LONG|TIME> window.time, <INT> start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.",
            "title": "timeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M76/#length-window",
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.",
            "title": "length (Window"
        },
        {
            "location": "/api/4.0.0-M76/#time-window",
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.",
            "title": "time (Window"
        },
        {
            "location": "/api/4.0.0-M76/#frequent-window",
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent(<INT> event.count, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.",
            "title": "frequent (Window"
        },
        {
            "location": "/api/4.0.0-M76/#timelength-window",
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength(<INT|LONG|TIME> window.time, <INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.",
            "title": "timeLength (Window"
        },
        {
            "location": "/api/4.0.0-M76/#cron-window",
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron(<STRING> cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.",
            "title": "cron (Window"
        },
        {
            "location": "/api/4.0.0-M76/#externaltime-window",
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.",
            "title": "externalTime (Window"
        },
        {
            "location": "/api/4.0.0-M76/#lengthbatch-window",
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.",
            "title": "lengthBatch (Window"
        },
        {
            "location": "/api/4.0.0-M76/#externaltimebatch-window",
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.",
            "title": "externalTimeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M76/#ifthenelse-function",
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.",
            "title": "ifThenElse (Function"
        },
        {
            "location": "/api/4.0.0-M76/#uuid-function",
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  <STRING> UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;",
            "title": "UUID (Function"
        },
        {
            "location": "/api/4.0.0-M76/#minimum-function",
            "text": "Returns the minimum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.",
            "title": "minimum (Function"
        },
        {
            "location": "/api/4.0.0-M76/#cast-function",
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.",
            "title": "cast (Function"
        },
        {
            "location": "/api/4.0.0-M76/#instanceofdouble-function",
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  <BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.",
            "title": "instanceOfDouble (Function"
        },
        {
            "location": "/api/4.0.0-M76/#instanceoffloat-function",
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  <BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.",
            "title": "instanceOfFloat (Function"
        },
        {
            "location": "/api/4.0.0-M76/#convert-function",
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").",
            "title": "convert (Function"
        },
        {
            "location": "/api/4.0.0-M76/#instanceoflong-function",
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  <BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfLong (Function"
        },
        {
            "location": "/api/4.0.0-M76/#instanceofinteger-function",
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  <BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfInteger (Function"
        },
        {
            "location": "/api/4.0.0-M76/#default-function",
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.",
            "title": "default (Function"
        },
        {
            "location": "/api/4.0.0-M76/#maximum-function",
            "text": "Returns the maximum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.",
            "title": "maximum (Function"
        },
        {
            "location": "/api/4.0.0-M76/#eventtimestamp-function",
            "text": "Returns the timestamp of the processed event.  Syntax  <LONG> eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.",
            "title": "eventTimestamp (Function"
        },
        {
            "location": "/api/4.0.0-M76/#instanceofboolean-function",
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  <BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.",
            "title": "instanceOfBoolean (Function"
        },
        {
            "location": "/api/4.0.0-M76/#coalesce-function",
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.",
            "title": "coalesce (Function"
        },
        {
            "location": "/api/4.0.0-M76/#currenttimemillis-function",
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  <LONG> currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.",
            "title": "currentTimeMillis (Function"
        },
        {
            "location": "/api/4.0.0-M76/#instanceofstring-function",
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  <BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.",
            "title": "instanceOfString (Function"
        },
        {
            "location": "/api/4.0.0-M76/#log-stream-processor",
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;  This will log message and fooStream:events.",
            "title": "log (Stream Processor"
        },
        {
            "location": "/api/4.0.0-M76/#max-aggregate-function",
            "text": "Returns the maximum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.",
            "title": "max (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M76/#avg-aggregate-function",
            "text": "Calculates the average for all the events.  Syntax  <DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.",
            "title": "avg (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M76/#distinctcount-aggregate-function",
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  <LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\" \u00a0\"WEB_PAGE_3\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\"",
            "title": "distinctCount (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M76/#maxforever-aggregate-function",
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.",
            "title": "maxForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M76/#stddev-aggregate-function",
            "text": "Returns the calculated standard deviation for all the events.  Syntax  <DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.",
            "title": "stdDev (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M76/#count-aggregate-function",
            "text": "Returns the count of all the events.  Syntax  <LONG> count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.",
            "title": "count (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M76/#min-aggregate-function",
            "text": "Returns the minimum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.",
            "title": "min (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M76/#sum-aggregate-function",
            "text": "Returns the sum for all the events.  Syntax  <LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.",
            "title": "sum (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M76/#minforever-aggregate-function",
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.",
            "title": "minForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M76/#pol2cart-stream-function",
            "text": "The pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "pol2Cart (Stream Function"
        },
        {
            "location": "/api/4.0.0-M77/",
            "text": "API Docs\n\u00b6\n\n\nSink\n\u00b6\n\n\ninMemory \n(\nSink\n)\n\u00b6\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\u00b6\n\n\npassThrough \n(\nSink Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\u00b6\n\n\npassThrough \n(\nSource Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\u00b6\n\n\ninMemory \n(\nSource\n)\n\u00b6\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\u00b6\n\n\nsort \n(\nWindow\n)\n\u00b6\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(<INT> window.length, <STRING> attribute, <STRING> order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(<INT|LONG|TIME> window.time, <INT> start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(\nWindow\n)\n\u00b6\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(<INT> event.count, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(<INT|LONG|TIME> window.time, <INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(\nWindow\n)\n\u00b6\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(<STRING> cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(\nFunction\n)\n\u00b6\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(\nFunction\n)\n\u00b6\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\n<STRING> UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(\nFunction\n)\n\u00b6\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(\nFunction\n)\n\u00b6\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(\nFunction\n)\n\u00b6\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(\nFunction\n)\n\u00b6\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(\nFunction\n)\n\u00b6\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(\nFunction\n)\n\u00b6\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\n<LONG> eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(\nFunction\n)\n\u00b6\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(\nFunction\n)\n\u00b6\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\n<LONG> currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(\nStream Processor\n)\n\u00b6\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(\nAggregate Function\n)\n\u00b6\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\n<LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\u00a0\"WEB_PAGE_3\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\n<LONG> count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\n<LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(\nStream Function\n)\n\u00b6\n\n\nThe pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "4.0.0-M77"
        },
        {
            "location": "/api/4.0.0-M77/#api-docs",
            "text": "",
            "title": "API Docs"
        },
        {
            "location": "/api/4.0.0-M77/#sink",
            "text": "",
            "title": "Sink"
        },
        {
            "location": "/api/4.0.0-M77/#inmemory-sink",
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.",
            "title": "inMemory (Sink"
        },
        {
            "location": "/api/4.0.0-M77/#sinkmapper",
            "text": "",
            "title": "Sinkmapper"
        },
        {
            "location": "/api/4.0.0-M77/#passthrough-sink-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.",
            "title": "passThrough (Sink Mapper"
        },
        {
            "location": "/api/4.0.0-M77/#sourcemapper",
            "text": "",
            "title": "Sourcemapper"
        },
        {
            "location": "/api/4.0.0-M77/#passthrough-source-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.",
            "title": "passThrough (Source Mapper"
        },
        {
            "location": "/api/4.0.0-M77/#source",
            "text": "",
            "title": "Source"
        },
        {
            "location": "/api/4.0.0-M77/#inmemory-source",
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.",
            "title": "inMemory (Source"
        },
        {
            "location": "/api/4.0.0-M77/#core",
            "text": "",
            "title": "Core"
        },
        {
            "location": "/api/4.0.0-M77/#sort-window",
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort(<INT> window.length, <STRING> attribute, <STRING> order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.",
            "title": "sort (Window"
        },
        {
            "location": "/api/4.0.0-M77/#lossyfrequent-window",
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.",
            "title": "lossyFrequent (Window"
        },
        {
            "location": "/api/4.0.0-M77/#timebatch-window",
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch(<INT|LONG|TIME> window.time, <INT> start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.",
            "title": "timeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M77/#length-window",
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.",
            "title": "length (Window"
        },
        {
            "location": "/api/4.0.0-M77/#time-window",
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.",
            "title": "time (Window"
        },
        {
            "location": "/api/4.0.0-M77/#frequent-window",
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent(<INT> event.count, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.",
            "title": "frequent (Window"
        },
        {
            "location": "/api/4.0.0-M77/#timelength-window",
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength(<INT|LONG|TIME> window.time, <INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.",
            "title": "timeLength (Window"
        },
        {
            "location": "/api/4.0.0-M77/#cron-window",
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron(<STRING> cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.",
            "title": "cron (Window"
        },
        {
            "location": "/api/4.0.0-M77/#externaltime-window",
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.",
            "title": "externalTime (Window"
        },
        {
            "location": "/api/4.0.0-M77/#lengthbatch-window",
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.",
            "title": "lengthBatch (Window"
        },
        {
            "location": "/api/4.0.0-M77/#externaltimebatch-window",
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.",
            "title": "externalTimeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M77/#ifthenelse-function",
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.",
            "title": "ifThenElse (Function"
        },
        {
            "location": "/api/4.0.0-M77/#uuid-function",
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  <STRING> UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;",
            "title": "UUID (Function"
        },
        {
            "location": "/api/4.0.0-M77/#minimum-function",
            "text": "Returns the minimum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.",
            "title": "minimum (Function"
        },
        {
            "location": "/api/4.0.0-M77/#cast-function",
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.",
            "title": "cast (Function"
        },
        {
            "location": "/api/4.0.0-M77/#instanceofdouble-function",
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  <BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.",
            "title": "instanceOfDouble (Function"
        },
        {
            "location": "/api/4.0.0-M77/#instanceoffloat-function",
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  <BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.",
            "title": "instanceOfFloat (Function"
        },
        {
            "location": "/api/4.0.0-M77/#convert-function",
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").",
            "title": "convert (Function"
        },
        {
            "location": "/api/4.0.0-M77/#instanceoflong-function",
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  <BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfLong (Function"
        },
        {
            "location": "/api/4.0.0-M77/#instanceofinteger-function",
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  <BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfInteger (Function"
        },
        {
            "location": "/api/4.0.0-M77/#default-function",
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.",
            "title": "default (Function"
        },
        {
            "location": "/api/4.0.0-M77/#maximum-function",
            "text": "Returns the maximum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.",
            "title": "maximum (Function"
        },
        {
            "location": "/api/4.0.0-M77/#eventtimestamp-function",
            "text": "Returns the timestamp of the processed event.  Syntax  <LONG> eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.",
            "title": "eventTimestamp (Function"
        },
        {
            "location": "/api/4.0.0-M77/#instanceofboolean-function",
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  <BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.",
            "title": "instanceOfBoolean (Function"
        },
        {
            "location": "/api/4.0.0-M77/#coalesce-function",
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.",
            "title": "coalesce (Function"
        },
        {
            "location": "/api/4.0.0-M77/#currenttimemillis-function",
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  <LONG> currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.",
            "title": "currentTimeMillis (Function"
        },
        {
            "location": "/api/4.0.0-M77/#instanceofstring-function",
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  <BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.",
            "title": "instanceOfString (Function"
        },
        {
            "location": "/api/4.0.0-M77/#log-stream-processor",
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;  This will log message and fooStream:events.",
            "title": "log (Stream Processor"
        },
        {
            "location": "/api/4.0.0-M77/#max-aggregate-function",
            "text": "Returns the maximum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.",
            "title": "max (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M77/#avg-aggregate-function",
            "text": "Calculates the average for all the events.  Syntax  <DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.",
            "title": "avg (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M77/#distinctcount-aggregate-function",
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  <LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\" \u00a0\"WEB_PAGE_3\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\"",
            "title": "distinctCount (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M77/#maxforever-aggregate-function",
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.",
            "title": "maxForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M77/#stddev-aggregate-function",
            "text": "Returns the calculated standard deviation for all the events.  Syntax  <DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.",
            "title": "stdDev (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M77/#count-aggregate-function",
            "text": "Returns the count of all the events.  Syntax  <LONG> count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.",
            "title": "count (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M77/#min-aggregate-function",
            "text": "Returns the minimum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.",
            "title": "min (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M77/#sum-aggregate-function",
            "text": "Returns the sum for all the events.  Syntax  <LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.",
            "title": "sum (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M77/#minforever-aggregate-function",
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.",
            "title": "minForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M77/#pol2cart-stream-function",
            "text": "The pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "pol2Cart (Stream Function"
        },
        {
            "location": "/api/4.0.0-M78/",
            "text": "API Docs\n\u00b6\n\n\nSink\n\u00b6\n\n\ninMemory \n(\nSink\n)\n\u00b6\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\u00b6\n\n\npassThrough \n(\nSink Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\u00b6\n\n\npassThrough \n(\nSource Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\u00b6\n\n\ninMemory \n(\nSource\n)\n\u00b6\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\u00b6\n\n\nsort \n(\nWindow\n)\n\u00b6\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(<INT> window.length, <STRING> attribute, <STRING> order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(<INT|LONG|TIME> window.time, <INT> start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(\nWindow\n)\n\u00b6\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(<INT> event.count, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(<INT|LONG|TIME> window.time, <INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(\nWindow\n)\n\u00b6\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(<STRING> cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(\nFunction\n)\n\u00b6\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(\nFunction\n)\n\u00b6\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\n<STRING> UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(\nFunction\n)\n\u00b6\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(\nFunction\n)\n\u00b6\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(\nFunction\n)\n\u00b6\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(\nFunction\n)\n\u00b6\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(\nFunction\n)\n\u00b6\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(\nFunction\n)\n\u00b6\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\n<LONG> eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(\nFunction\n)\n\u00b6\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(\nFunction\n)\n\u00b6\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\n<LONG> currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(\nStream Processor\n)\n\u00b6\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(\nAggregate Function\n)\n\u00b6\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\n<LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\u00a0\"WEB_PAGE_3\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\n<LONG> count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\n<LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(\nStream Function\n)\n\u00b6\n\n\nThe pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "4.0.0-M78"
        },
        {
            "location": "/api/4.0.0-M78/#api-docs",
            "text": "",
            "title": "API Docs"
        },
        {
            "location": "/api/4.0.0-M78/#sink",
            "text": "",
            "title": "Sink"
        },
        {
            "location": "/api/4.0.0-M78/#inmemory-sink",
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.",
            "title": "inMemory (Sink"
        },
        {
            "location": "/api/4.0.0-M78/#sinkmapper",
            "text": "",
            "title": "Sinkmapper"
        },
        {
            "location": "/api/4.0.0-M78/#passthrough-sink-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.",
            "title": "passThrough (Sink Mapper"
        },
        {
            "location": "/api/4.0.0-M78/#sourcemapper",
            "text": "",
            "title": "Sourcemapper"
        },
        {
            "location": "/api/4.0.0-M78/#passthrough-source-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.",
            "title": "passThrough (Source Mapper"
        },
        {
            "location": "/api/4.0.0-M78/#source",
            "text": "",
            "title": "Source"
        },
        {
            "location": "/api/4.0.0-M78/#inmemory-source",
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.",
            "title": "inMemory (Source"
        },
        {
            "location": "/api/4.0.0-M78/#core",
            "text": "",
            "title": "Core"
        },
        {
            "location": "/api/4.0.0-M78/#sort-window",
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort(<INT> window.length, <STRING> attribute, <STRING> order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.",
            "title": "sort (Window"
        },
        {
            "location": "/api/4.0.0-M78/#lossyfrequent-window",
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.",
            "title": "lossyFrequent (Window"
        },
        {
            "location": "/api/4.0.0-M78/#timebatch-window",
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch(<INT|LONG|TIME> window.time, <INT> start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.",
            "title": "timeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M78/#length-window",
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.",
            "title": "length (Window"
        },
        {
            "location": "/api/4.0.0-M78/#time-window",
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.",
            "title": "time (Window"
        },
        {
            "location": "/api/4.0.0-M78/#frequent-window",
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent(<INT> event.count, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.",
            "title": "frequent (Window"
        },
        {
            "location": "/api/4.0.0-M78/#timelength-window",
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength(<INT|LONG|TIME> window.time, <INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.",
            "title": "timeLength (Window"
        },
        {
            "location": "/api/4.0.0-M78/#cron-window",
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron(<STRING> cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.",
            "title": "cron (Window"
        },
        {
            "location": "/api/4.0.0-M78/#externaltime-window",
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.",
            "title": "externalTime (Window"
        },
        {
            "location": "/api/4.0.0-M78/#lengthbatch-window",
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.",
            "title": "lengthBatch (Window"
        },
        {
            "location": "/api/4.0.0-M78/#externaltimebatch-window",
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.",
            "title": "externalTimeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M78/#ifthenelse-function",
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.",
            "title": "ifThenElse (Function"
        },
        {
            "location": "/api/4.0.0-M78/#uuid-function",
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  <STRING> UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;",
            "title": "UUID (Function"
        },
        {
            "location": "/api/4.0.0-M78/#minimum-function",
            "text": "Returns the minimum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.",
            "title": "minimum (Function"
        },
        {
            "location": "/api/4.0.0-M78/#cast-function",
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.",
            "title": "cast (Function"
        },
        {
            "location": "/api/4.0.0-M78/#instanceofdouble-function",
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  <BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.",
            "title": "instanceOfDouble (Function"
        },
        {
            "location": "/api/4.0.0-M78/#instanceoffloat-function",
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  <BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.",
            "title": "instanceOfFloat (Function"
        },
        {
            "location": "/api/4.0.0-M78/#convert-function",
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").",
            "title": "convert (Function"
        },
        {
            "location": "/api/4.0.0-M78/#instanceoflong-function",
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  <BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfLong (Function"
        },
        {
            "location": "/api/4.0.0-M78/#instanceofinteger-function",
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  <BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfInteger (Function"
        },
        {
            "location": "/api/4.0.0-M78/#default-function",
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.",
            "title": "default (Function"
        },
        {
            "location": "/api/4.0.0-M78/#maximum-function",
            "text": "Returns the maximum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.",
            "title": "maximum (Function"
        },
        {
            "location": "/api/4.0.0-M78/#eventtimestamp-function",
            "text": "Returns the timestamp of the processed event.  Syntax  <LONG> eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.",
            "title": "eventTimestamp (Function"
        },
        {
            "location": "/api/4.0.0-M78/#instanceofboolean-function",
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  <BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.",
            "title": "instanceOfBoolean (Function"
        },
        {
            "location": "/api/4.0.0-M78/#coalesce-function",
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.",
            "title": "coalesce (Function"
        },
        {
            "location": "/api/4.0.0-M78/#currenttimemillis-function",
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  <LONG> currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.",
            "title": "currentTimeMillis (Function"
        },
        {
            "location": "/api/4.0.0-M78/#instanceofstring-function",
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  <BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.",
            "title": "instanceOfString (Function"
        },
        {
            "location": "/api/4.0.0-M78/#log-stream-processor",
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;  This will log message and fooStream:events.",
            "title": "log (Stream Processor"
        },
        {
            "location": "/api/4.0.0-M78/#max-aggregate-function",
            "text": "Returns the maximum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.",
            "title": "max (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M78/#avg-aggregate-function",
            "text": "Calculates the average for all the events.  Syntax  <DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.",
            "title": "avg (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M78/#distinctcount-aggregate-function",
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  <LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\" \u00a0\"WEB_PAGE_3\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\"",
            "title": "distinctCount (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M78/#maxforever-aggregate-function",
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.",
            "title": "maxForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M78/#stddev-aggregate-function",
            "text": "Returns the calculated standard deviation for all the events.  Syntax  <DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.",
            "title": "stdDev (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M78/#count-aggregate-function",
            "text": "Returns the count of all the events.  Syntax  <LONG> count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.",
            "title": "count (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M78/#min-aggregate-function",
            "text": "Returns the minimum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.",
            "title": "min (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M78/#sum-aggregate-function",
            "text": "Returns the sum for all the events.  Syntax  <LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.",
            "title": "sum (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M78/#minforever-aggregate-function",
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.",
            "title": "minForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M78/#pol2cart-stream-function",
            "text": "The pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "pol2Cart (Stream Function"
        },
        {
            "location": "/api/4.0.0-M79/",
            "text": "API Docs\n\u00b6\n\n\nSink\n\u00b6\n\n\ninMemory \n(\nSink\n)\n\u00b6\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\u00b6\n\n\npassThrough \n(\nSink Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\u00b6\n\n\npassThrough \n(\nSource Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\u00b6\n\n\ninMemory \n(\nSource\n)\n\u00b6\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\u00b6\n\n\nsort \n(\nWindow\n)\n\u00b6\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(<INT> window.length, <STRING> attribute, <STRING> order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(<INT|LONG|TIME> window.time, <INT> start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(\nWindow\n)\n\u00b6\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(<INT> event.count, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(<INT|LONG|TIME> window.time, <INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(\nWindow\n)\n\u00b6\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(<STRING> cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(\nFunction\n)\n\u00b6\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(\nFunction\n)\n\u00b6\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\n<STRING> UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(\nFunction\n)\n\u00b6\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(\nFunction\n)\n\u00b6\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(\nFunction\n)\n\u00b6\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(\nFunction\n)\n\u00b6\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(\nFunction\n)\n\u00b6\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(\nFunction\n)\n\u00b6\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\n<LONG> eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(\nFunction\n)\n\u00b6\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(\nFunction\n)\n\u00b6\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\n<LONG> currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(\nStream Processor\n)\n\u00b6\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(\nAggregate Function\n)\n\u00b6\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\n<LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\u00a0\"WEB_PAGE_3\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\n<LONG> count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\n<LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(\nStream Function\n)\n\u00b6\n\n\nThe pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "4.0.0-M79"
        },
        {
            "location": "/api/4.0.0-M79/#api-docs",
            "text": "",
            "title": "API Docs"
        },
        {
            "location": "/api/4.0.0-M79/#sink",
            "text": "",
            "title": "Sink"
        },
        {
            "location": "/api/4.0.0-M79/#inmemory-sink",
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.",
            "title": "inMemory (Sink"
        },
        {
            "location": "/api/4.0.0-M79/#sinkmapper",
            "text": "",
            "title": "Sinkmapper"
        },
        {
            "location": "/api/4.0.0-M79/#passthrough-sink-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.",
            "title": "passThrough (Sink Mapper"
        },
        {
            "location": "/api/4.0.0-M79/#sourcemapper",
            "text": "",
            "title": "Sourcemapper"
        },
        {
            "location": "/api/4.0.0-M79/#passthrough-source-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.",
            "title": "passThrough (Source Mapper"
        },
        {
            "location": "/api/4.0.0-M79/#source",
            "text": "",
            "title": "Source"
        },
        {
            "location": "/api/4.0.0-M79/#inmemory-source",
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.",
            "title": "inMemory (Source"
        },
        {
            "location": "/api/4.0.0-M79/#core",
            "text": "",
            "title": "Core"
        },
        {
            "location": "/api/4.0.0-M79/#sort-window",
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort(<INT> window.length, <STRING> attribute, <STRING> order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.",
            "title": "sort (Window"
        },
        {
            "location": "/api/4.0.0-M79/#lossyfrequent-window",
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.",
            "title": "lossyFrequent (Window"
        },
        {
            "location": "/api/4.0.0-M79/#timebatch-window",
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch(<INT|LONG|TIME> window.time, <INT> start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.",
            "title": "timeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M79/#length-window",
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.",
            "title": "length (Window"
        },
        {
            "location": "/api/4.0.0-M79/#time-window",
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.",
            "title": "time (Window"
        },
        {
            "location": "/api/4.0.0-M79/#frequent-window",
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent(<INT> event.count, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.",
            "title": "frequent (Window"
        },
        {
            "location": "/api/4.0.0-M79/#timelength-window",
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength(<INT|LONG|TIME> window.time, <INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.",
            "title": "timeLength (Window"
        },
        {
            "location": "/api/4.0.0-M79/#cron-window",
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron(<STRING> cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.",
            "title": "cron (Window"
        },
        {
            "location": "/api/4.0.0-M79/#externaltime-window",
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.",
            "title": "externalTime (Window"
        },
        {
            "location": "/api/4.0.0-M79/#lengthbatch-window",
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.",
            "title": "lengthBatch (Window"
        },
        {
            "location": "/api/4.0.0-M79/#externaltimebatch-window",
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.",
            "title": "externalTimeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M79/#ifthenelse-function",
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.",
            "title": "ifThenElse (Function"
        },
        {
            "location": "/api/4.0.0-M79/#uuid-function",
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  <STRING> UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;",
            "title": "UUID (Function"
        },
        {
            "location": "/api/4.0.0-M79/#minimum-function",
            "text": "Returns the minimum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.",
            "title": "minimum (Function"
        },
        {
            "location": "/api/4.0.0-M79/#cast-function",
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.",
            "title": "cast (Function"
        },
        {
            "location": "/api/4.0.0-M79/#instanceofdouble-function",
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  <BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.",
            "title": "instanceOfDouble (Function"
        },
        {
            "location": "/api/4.0.0-M79/#instanceoffloat-function",
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  <BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.",
            "title": "instanceOfFloat (Function"
        },
        {
            "location": "/api/4.0.0-M79/#convert-function",
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").",
            "title": "convert (Function"
        },
        {
            "location": "/api/4.0.0-M79/#instanceoflong-function",
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  <BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfLong (Function"
        },
        {
            "location": "/api/4.0.0-M79/#instanceofinteger-function",
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  <BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfInteger (Function"
        },
        {
            "location": "/api/4.0.0-M79/#default-function",
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.",
            "title": "default (Function"
        },
        {
            "location": "/api/4.0.0-M79/#maximum-function",
            "text": "Returns the maximum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.",
            "title": "maximum (Function"
        },
        {
            "location": "/api/4.0.0-M79/#eventtimestamp-function",
            "text": "Returns the timestamp of the processed event.  Syntax  <LONG> eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.",
            "title": "eventTimestamp (Function"
        },
        {
            "location": "/api/4.0.0-M79/#instanceofboolean-function",
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  <BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.",
            "title": "instanceOfBoolean (Function"
        },
        {
            "location": "/api/4.0.0-M79/#coalesce-function",
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.",
            "title": "coalesce (Function"
        },
        {
            "location": "/api/4.0.0-M79/#currenttimemillis-function",
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  <LONG> currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.",
            "title": "currentTimeMillis (Function"
        },
        {
            "location": "/api/4.0.0-M79/#instanceofstring-function",
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  <BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.",
            "title": "instanceOfString (Function"
        },
        {
            "location": "/api/4.0.0-M79/#log-stream-processor",
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;  This will log message and fooStream:events.",
            "title": "log (Stream Processor"
        },
        {
            "location": "/api/4.0.0-M79/#max-aggregate-function",
            "text": "Returns the maximum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.",
            "title": "max (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M79/#avg-aggregate-function",
            "text": "Calculates the average for all the events.  Syntax  <DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.",
            "title": "avg (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M79/#distinctcount-aggregate-function",
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  <LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\" \u00a0\"WEB_PAGE_3\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\"",
            "title": "distinctCount (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M79/#maxforever-aggregate-function",
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.",
            "title": "maxForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M79/#stddev-aggregate-function",
            "text": "Returns the calculated standard deviation for all the events.  Syntax  <DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.",
            "title": "stdDev (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M79/#count-aggregate-function",
            "text": "Returns the count of all the events.  Syntax  <LONG> count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.",
            "title": "count (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M79/#min-aggregate-function",
            "text": "Returns the minimum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.",
            "title": "min (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M79/#sum-aggregate-function",
            "text": "Returns the sum for all the events.  Syntax  <LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.",
            "title": "sum (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M79/#minforever-aggregate-function",
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.",
            "title": "minForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M79/#pol2cart-stream-function",
            "text": "The pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "pol2Cart (Stream Function"
        },
        {
            "location": "/api/4.0.0-M80/",
            "text": "API Docs\n\u00b6\n\n\nSink\n\u00b6\n\n\ninMemory \n(\nSink\n)\n\u00b6\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\u00b6\n\n\npassThrough \n(\nSink Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\u00b6\n\n\npassThrough \n(\nSource Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\u00b6\n\n\ninMemory \n(\nSource\n)\n\u00b6\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\u00b6\n\n\nsort \n(\nWindow\n)\n\u00b6\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(<INT> window.length, <STRING> attribute, <STRING> order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(<INT|LONG|TIME> window.time, <INT> start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(\nWindow\n)\n\u00b6\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(<INT> event.count, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(<INT|LONG|TIME> window.time, <INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(\nWindow\n)\n\u00b6\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(<STRING> cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(\nFunction\n)\n\u00b6\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(\nFunction\n)\n\u00b6\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\n<STRING> UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(\nFunction\n)\n\u00b6\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(\nFunction\n)\n\u00b6\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(\nFunction\n)\n\u00b6\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(\nFunction\n)\n\u00b6\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(\nFunction\n)\n\u00b6\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(\nFunction\n)\n\u00b6\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\n<LONG> eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(\nFunction\n)\n\u00b6\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(\nFunction\n)\n\u00b6\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\n<LONG> currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(\nStream Processor\n)\n\u00b6\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(\nAggregate Function\n)\n\u00b6\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\n<LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\u00a0\"WEB_PAGE_3\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\n<LONG> count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\n<LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(\nStream Function\n)\n\u00b6\n\n\nThe pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "4.0.0-M80"
        },
        {
            "location": "/api/4.0.0-M80/#api-docs",
            "text": "",
            "title": "API Docs"
        },
        {
            "location": "/api/4.0.0-M80/#sink",
            "text": "",
            "title": "Sink"
        },
        {
            "location": "/api/4.0.0-M80/#inmemory-sink",
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.",
            "title": "inMemory (Sink"
        },
        {
            "location": "/api/4.0.0-M80/#sinkmapper",
            "text": "",
            "title": "Sinkmapper"
        },
        {
            "location": "/api/4.0.0-M80/#passthrough-sink-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.",
            "title": "passThrough (Sink Mapper"
        },
        {
            "location": "/api/4.0.0-M80/#sourcemapper",
            "text": "",
            "title": "Sourcemapper"
        },
        {
            "location": "/api/4.0.0-M80/#passthrough-source-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.",
            "title": "passThrough (Source Mapper"
        },
        {
            "location": "/api/4.0.0-M80/#source",
            "text": "",
            "title": "Source"
        },
        {
            "location": "/api/4.0.0-M80/#inmemory-source",
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.",
            "title": "inMemory (Source"
        },
        {
            "location": "/api/4.0.0-M80/#core",
            "text": "",
            "title": "Core"
        },
        {
            "location": "/api/4.0.0-M80/#sort-window",
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort(<INT> window.length, <STRING> attribute, <STRING> order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.",
            "title": "sort (Window"
        },
        {
            "location": "/api/4.0.0-M80/#lossyfrequent-window",
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.",
            "title": "lossyFrequent (Window"
        },
        {
            "location": "/api/4.0.0-M80/#timebatch-window",
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch(<INT|LONG|TIME> window.time, <INT> start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.",
            "title": "timeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M80/#length-window",
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.",
            "title": "length (Window"
        },
        {
            "location": "/api/4.0.0-M80/#time-window",
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.",
            "title": "time (Window"
        },
        {
            "location": "/api/4.0.0-M80/#frequent-window",
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent(<INT> event.count, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.",
            "title": "frequent (Window"
        },
        {
            "location": "/api/4.0.0-M80/#timelength-window",
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength(<INT|LONG|TIME> window.time, <INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.",
            "title": "timeLength (Window"
        },
        {
            "location": "/api/4.0.0-M80/#cron-window",
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron(<STRING> cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.",
            "title": "cron (Window"
        },
        {
            "location": "/api/4.0.0-M80/#externaltime-window",
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.",
            "title": "externalTime (Window"
        },
        {
            "location": "/api/4.0.0-M80/#lengthbatch-window",
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.",
            "title": "lengthBatch (Window"
        },
        {
            "location": "/api/4.0.0-M80/#externaltimebatch-window",
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.",
            "title": "externalTimeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M80/#ifthenelse-function",
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.",
            "title": "ifThenElse (Function"
        },
        {
            "location": "/api/4.0.0-M80/#uuid-function",
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  <STRING> UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;",
            "title": "UUID (Function"
        },
        {
            "location": "/api/4.0.0-M80/#minimum-function",
            "text": "Returns the minimum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.",
            "title": "minimum (Function"
        },
        {
            "location": "/api/4.0.0-M80/#cast-function",
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.",
            "title": "cast (Function"
        },
        {
            "location": "/api/4.0.0-M80/#instanceofdouble-function",
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  <BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.",
            "title": "instanceOfDouble (Function"
        },
        {
            "location": "/api/4.0.0-M80/#instanceoffloat-function",
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  <BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.",
            "title": "instanceOfFloat (Function"
        },
        {
            "location": "/api/4.0.0-M80/#convert-function",
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").",
            "title": "convert (Function"
        },
        {
            "location": "/api/4.0.0-M80/#instanceoflong-function",
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  <BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfLong (Function"
        },
        {
            "location": "/api/4.0.0-M80/#instanceofinteger-function",
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  <BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfInteger (Function"
        },
        {
            "location": "/api/4.0.0-M80/#default-function",
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.",
            "title": "default (Function"
        },
        {
            "location": "/api/4.0.0-M80/#maximum-function",
            "text": "Returns the maximum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.",
            "title": "maximum (Function"
        },
        {
            "location": "/api/4.0.0-M80/#eventtimestamp-function",
            "text": "Returns the timestamp of the processed event.  Syntax  <LONG> eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.",
            "title": "eventTimestamp (Function"
        },
        {
            "location": "/api/4.0.0-M80/#instanceofboolean-function",
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  <BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.",
            "title": "instanceOfBoolean (Function"
        },
        {
            "location": "/api/4.0.0-M80/#coalesce-function",
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.",
            "title": "coalesce (Function"
        },
        {
            "location": "/api/4.0.0-M80/#currenttimemillis-function",
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  <LONG> currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.",
            "title": "currentTimeMillis (Function"
        },
        {
            "location": "/api/4.0.0-M80/#instanceofstring-function",
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  <BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.",
            "title": "instanceOfString (Function"
        },
        {
            "location": "/api/4.0.0-M80/#log-stream-processor",
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;  This will log message and fooStream:events.",
            "title": "log (Stream Processor"
        },
        {
            "location": "/api/4.0.0-M80/#max-aggregate-function",
            "text": "Returns the maximum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.",
            "title": "max (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M80/#avg-aggregate-function",
            "text": "Calculates the average for all the events.  Syntax  <DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.",
            "title": "avg (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M80/#distinctcount-aggregate-function",
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  <LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\" \u00a0\"WEB_PAGE_3\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\"",
            "title": "distinctCount (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M80/#maxforever-aggregate-function",
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.",
            "title": "maxForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M80/#stddev-aggregate-function",
            "text": "Returns the calculated standard deviation for all the events.  Syntax  <DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.",
            "title": "stdDev (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M80/#count-aggregate-function",
            "text": "Returns the count of all the events.  Syntax  <LONG> count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.",
            "title": "count (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M80/#min-aggregate-function",
            "text": "Returns the minimum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.",
            "title": "min (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M80/#sum-aggregate-function",
            "text": "Returns the sum for all the events.  Syntax  <LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.",
            "title": "sum (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M80/#minforever-aggregate-function",
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.",
            "title": "minForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M80/#pol2cart-stream-function",
            "text": "The pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "pol2Cart (Stream Function"
        },
        {
            "location": "/api/4.0.0-M81/",
            "text": "API Docs\n\u00b6\n\n\nSink\n\u00b6\n\n\ninMemory \n(\nSink\n)\n\u00b6\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\u00b6\n\n\npassThrough \n(\nSink Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\u00b6\n\n\npassThrough \n(\nSource Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\u00b6\n\n\ninMemory \n(\nSource\n)\n\u00b6\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\u00b6\n\n\nsort \n(\nWindow\n)\n\u00b6\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(<INT> window.length, <STRING> attribute, <STRING> order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(<INT|LONG|TIME> window.time, <INT> start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(\nWindow\n)\n\u00b6\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(<INT> event.count, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(<INT|LONG|TIME> window.time, <INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(\nWindow\n)\n\u00b6\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(<STRING> cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(\nFunction\n)\n\u00b6\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(\nFunction\n)\n\u00b6\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\n<STRING> UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(\nFunction\n)\n\u00b6\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(\nFunction\n)\n\u00b6\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(\nFunction\n)\n\u00b6\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(\nFunction\n)\n\u00b6\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(\nFunction\n)\n\u00b6\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(\nFunction\n)\n\u00b6\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\n<LONG> eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(\nFunction\n)\n\u00b6\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(\nFunction\n)\n\u00b6\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\n<LONG> currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(\nStream Processor\n)\n\u00b6\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(\nAggregate Function\n)\n\u00b6\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\n<LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\u00a0\"WEB_PAGE_3\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\n<LONG> count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\n<LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(\nStream Function\n)\n\u00b6\n\n\nThe pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "4.0.0-M81"
        },
        {
            "location": "/api/4.0.0-M81/#api-docs",
            "text": "",
            "title": "API Docs"
        },
        {
            "location": "/api/4.0.0-M81/#sink",
            "text": "",
            "title": "Sink"
        },
        {
            "location": "/api/4.0.0-M81/#inmemory-sink",
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.",
            "title": "inMemory (Sink"
        },
        {
            "location": "/api/4.0.0-M81/#sinkmapper",
            "text": "",
            "title": "Sinkmapper"
        },
        {
            "location": "/api/4.0.0-M81/#passthrough-sink-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.",
            "title": "passThrough (Sink Mapper"
        },
        {
            "location": "/api/4.0.0-M81/#sourcemapper",
            "text": "",
            "title": "Sourcemapper"
        },
        {
            "location": "/api/4.0.0-M81/#passthrough-source-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.",
            "title": "passThrough (Source Mapper"
        },
        {
            "location": "/api/4.0.0-M81/#source",
            "text": "",
            "title": "Source"
        },
        {
            "location": "/api/4.0.0-M81/#inmemory-source",
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.",
            "title": "inMemory (Source"
        },
        {
            "location": "/api/4.0.0-M81/#core",
            "text": "",
            "title": "Core"
        },
        {
            "location": "/api/4.0.0-M81/#sort-window",
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort(<INT> window.length, <STRING> attribute, <STRING> order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.",
            "title": "sort (Window"
        },
        {
            "location": "/api/4.0.0-M81/#lossyfrequent-window",
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.",
            "title": "lossyFrequent (Window"
        },
        {
            "location": "/api/4.0.0-M81/#timebatch-window",
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch(<INT|LONG|TIME> window.time, <INT> start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.",
            "title": "timeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M81/#length-window",
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.",
            "title": "length (Window"
        },
        {
            "location": "/api/4.0.0-M81/#time-window",
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.",
            "title": "time (Window"
        },
        {
            "location": "/api/4.0.0-M81/#frequent-window",
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent(<INT> event.count, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.",
            "title": "frequent (Window"
        },
        {
            "location": "/api/4.0.0-M81/#timelength-window",
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength(<INT|LONG|TIME> window.time, <INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.",
            "title": "timeLength (Window"
        },
        {
            "location": "/api/4.0.0-M81/#cron-window",
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron(<STRING> cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.",
            "title": "cron (Window"
        },
        {
            "location": "/api/4.0.0-M81/#externaltime-window",
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.",
            "title": "externalTime (Window"
        },
        {
            "location": "/api/4.0.0-M81/#lengthbatch-window",
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.",
            "title": "lengthBatch (Window"
        },
        {
            "location": "/api/4.0.0-M81/#externaltimebatch-window",
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.",
            "title": "externalTimeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M81/#ifthenelse-function",
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.",
            "title": "ifThenElse (Function"
        },
        {
            "location": "/api/4.0.0-M81/#uuid-function",
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  <STRING> UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;",
            "title": "UUID (Function"
        },
        {
            "location": "/api/4.0.0-M81/#minimum-function",
            "text": "Returns the minimum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.",
            "title": "minimum (Function"
        },
        {
            "location": "/api/4.0.0-M81/#cast-function",
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.",
            "title": "cast (Function"
        },
        {
            "location": "/api/4.0.0-M81/#instanceofdouble-function",
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  <BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.",
            "title": "instanceOfDouble (Function"
        },
        {
            "location": "/api/4.0.0-M81/#instanceoffloat-function",
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  <BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.",
            "title": "instanceOfFloat (Function"
        },
        {
            "location": "/api/4.0.0-M81/#convert-function",
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").",
            "title": "convert (Function"
        },
        {
            "location": "/api/4.0.0-M81/#instanceoflong-function",
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  <BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfLong (Function"
        },
        {
            "location": "/api/4.0.0-M81/#instanceofinteger-function",
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  <BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfInteger (Function"
        },
        {
            "location": "/api/4.0.0-M81/#default-function",
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.",
            "title": "default (Function"
        },
        {
            "location": "/api/4.0.0-M81/#maximum-function",
            "text": "Returns the maximum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.",
            "title": "maximum (Function"
        },
        {
            "location": "/api/4.0.0-M81/#eventtimestamp-function",
            "text": "Returns the timestamp of the processed event.  Syntax  <LONG> eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.",
            "title": "eventTimestamp (Function"
        },
        {
            "location": "/api/4.0.0-M81/#instanceofboolean-function",
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  <BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.",
            "title": "instanceOfBoolean (Function"
        },
        {
            "location": "/api/4.0.0-M81/#coalesce-function",
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.",
            "title": "coalesce (Function"
        },
        {
            "location": "/api/4.0.0-M81/#currenttimemillis-function",
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  <LONG> currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.",
            "title": "currentTimeMillis (Function"
        },
        {
            "location": "/api/4.0.0-M81/#instanceofstring-function",
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  <BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.",
            "title": "instanceOfString (Function"
        },
        {
            "location": "/api/4.0.0-M81/#log-stream-processor",
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;  This will log message and fooStream:events.",
            "title": "log (Stream Processor"
        },
        {
            "location": "/api/4.0.0-M81/#max-aggregate-function",
            "text": "Returns the maximum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.",
            "title": "max (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M81/#avg-aggregate-function",
            "text": "Calculates the average for all the events.  Syntax  <DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.",
            "title": "avg (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M81/#distinctcount-aggregate-function",
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  <LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\" \u00a0\"WEB_PAGE_3\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\"",
            "title": "distinctCount (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M81/#maxforever-aggregate-function",
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.",
            "title": "maxForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M81/#stddev-aggregate-function",
            "text": "Returns the calculated standard deviation for all the events.  Syntax  <DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.",
            "title": "stdDev (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M81/#count-aggregate-function",
            "text": "Returns the count of all the events.  Syntax  <LONG> count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.",
            "title": "count (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M81/#min-aggregate-function",
            "text": "Returns the minimum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.",
            "title": "min (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M81/#sum-aggregate-function",
            "text": "Returns the sum for all the events.  Syntax  <LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.",
            "title": "sum (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M81/#minforever-aggregate-function",
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.",
            "title": "minForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M81/#pol2cart-stream-function",
            "text": "The pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "pol2Cart (Stream Function"
        },
        {
            "location": "/api/4.0.0-M82/",
            "text": "API Docs\n\u00b6\n\n\nSink\n\u00b6\n\n\ninMemory \n(\nSink\n)\n\u00b6\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\u00b6\n\n\npassThrough \n(\nSink Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\u00b6\n\n\npassThrough \n(\nSource Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\u00b6\n\n\ninMemory \n(\nSource\n)\n\u00b6\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\u00b6\n\n\nsort \n(\nWindow\n)\n\u00b6\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(<INT> window.length, <STRING> attribute, <STRING> order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(<INT|LONG|TIME> window.time, <INT> start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(\nWindow\n)\n\u00b6\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(<INT> event.count, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(<INT|LONG|TIME> window.time, <INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(\nWindow\n)\n\u00b6\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(<STRING> cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(\nFunction\n)\n\u00b6\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(\nFunction\n)\n\u00b6\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\n<STRING> UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(\nFunction\n)\n\u00b6\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(\nFunction\n)\n\u00b6\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(\nFunction\n)\n\u00b6\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(\nFunction\n)\n\u00b6\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(\nFunction\n)\n\u00b6\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(\nFunction\n)\n\u00b6\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\n<LONG> eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(\nFunction\n)\n\u00b6\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(\nFunction\n)\n\u00b6\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\n<LONG> currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(\nStream Processor\n)\n\u00b6\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(\nAggregate Function\n)\n\u00b6\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\n<LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\u00a0\"WEB_PAGE_3\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\n<LONG> count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\n<LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(\nStream Function\n)\n\u00b6\n\n\nThe pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "4.0.0-M82"
        },
        {
            "location": "/api/4.0.0-M82/#api-docs",
            "text": "",
            "title": "API Docs"
        },
        {
            "location": "/api/4.0.0-M82/#sink",
            "text": "",
            "title": "Sink"
        },
        {
            "location": "/api/4.0.0-M82/#inmemory-sink",
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.",
            "title": "inMemory (Sink"
        },
        {
            "location": "/api/4.0.0-M82/#sinkmapper",
            "text": "",
            "title": "Sinkmapper"
        },
        {
            "location": "/api/4.0.0-M82/#passthrough-sink-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.",
            "title": "passThrough (Sink Mapper"
        },
        {
            "location": "/api/4.0.0-M82/#sourcemapper",
            "text": "",
            "title": "Sourcemapper"
        },
        {
            "location": "/api/4.0.0-M82/#passthrough-source-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.",
            "title": "passThrough (Source Mapper"
        },
        {
            "location": "/api/4.0.0-M82/#source",
            "text": "",
            "title": "Source"
        },
        {
            "location": "/api/4.0.0-M82/#inmemory-source",
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.",
            "title": "inMemory (Source"
        },
        {
            "location": "/api/4.0.0-M82/#core",
            "text": "",
            "title": "Core"
        },
        {
            "location": "/api/4.0.0-M82/#sort-window",
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort(<INT> window.length, <STRING> attribute, <STRING> order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.",
            "title": "sort (Window"
        },
        {
            "location": "/api/4.0.0-M82/#lossyfrequent-window",
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.",
            "title": "lossyFrequent (Window"
        },
        {
            "location": "/api/4.0.0-M82/#timebatch-window",
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch(<INT|LONG|TIME> window.time, <INT> start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.",
            "title": "timeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M82/#length-window",
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.",
            "title": "length (Window"
        },
        {
            "location": "/api/4.0.0-M82/#time-window",
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.",
            "title": "time (Window"
        },
        {
            "location": "/api/4.0.0-M82/#frequent-window",
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent(<INT> event.count, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.",
            "title": "frequent (Window"
        },
        {
            "location": "/api/4.0.0-M82/#timelength-window",
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength(<INT|LONG|TIME> window.time, <INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.",
            "title": "timeLength (Window"
        },
        {
            "location": "/api/4.0.0-M82/#cron-window",
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron(<STRING> cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.",
            "title": "cron (Window"
        },
        {
            "location": "/api/4.0.0-M82/#externaltime-window",
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.",
            "title": "externalTime (Window"
        },
        {
            "location": "/api/4.0.0-M82/#lengthbatch-window",
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.",
            "title": "lengthBatch (Window"
        },
        {
            "location": "/api/4.0.0-M82/#externaltimebatch-window",
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.",
            "title": "externalTimeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M82/#ifthenelse-function",
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.",
            "title": "ifThenElse (Function"
        },
        {
            "location": "/api/4.0.0-M82/#uuid-function",
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  <STRING> UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;",
            "title": "UUID (Function"
        },
        {
            "location": "/api/4.0.0-M82/#minimum-function",
            "text": "Returns the minimum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.",
            "title": "minimum (Function"
        },
        {
            "location": "/api/4.0.0-M82/#cast-function",
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.",
            "title": "cast (Function"
        },
        {
            "location": "/api/4.0.0-M82/#instanceofdouble-function",
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  <BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.",
            "title": "instanceOfDouble (Function"
        },
        {
            "location": "/api/4.0.0-M82/#instanceoffloat-function",
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  <BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.",
            "title": "instanceOfFloat (Function"
        },
        {
            "location": "/api/4.0.0-M82/#convert-function",
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").",
            "title": "convert (Function"
        },
        {
            "location": "/api/4.0.0-M82/#instanceoflong-function",
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  <BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfLong (Function"
        },
        {
            "location": "/api/4.0.0-M82/#instanceofinteger-function",
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  <BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfInteger (Function"
        },
        {
            "location": "/api/4.0.0-M82/#default-function",
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.",
            "title": "default (Function"
        },
        {
            "location": "/api/4.0.0-M82/#maximum-function",
            "text": "Returns the maximum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.",
            "title": "maximum (Function"
        },
        {
            "location": "/api/4.0.0-M82/#eventtimestamp-function",
            "text": "Returns the timestamp of the processed event.  Syntax  <LONG> eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.",
            "title": "eventTimestamp (Function"
        },
        {
            "location": "/api/4.0.0-M82/#instanceofboolean-function",
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  <BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.",
            "title": "instanceOfBoolean (Function"
        },
        {
            "location": "/api/4.0.0-M82/#coalesce-function",
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.",
            "title": "coalesce (Function"
        },
        {
            "location": "/api/4.0.0-M82/#currenttimemillis-function",
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  <LONG> currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.",
            "title": "currentTimeMillis (Function"
        },
        {
            "location": "/api/4.0.0-M82/#instanceofstring-function",
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  <BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.",
            "title": "instanceOfString (Function"
        },
        {
            "location": "/api/4.0.0-M82/#log-stream-processor",
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;  This will log message and fooStream:events.",
            "title": "log (Stream Processor"
        },
        {
            "location": "/api/4.0.0-M82/#max-aggregate-function",
            "text": "Returns the maximum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.",
            "title": "max (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M82/#avg-aggregate-function",
            "text": "Calculates the average for all the events.  Syntax  <DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.",
            "title": "avg (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M82/#distinctcount-aggregate-function",
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  <LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\" \u00a0\"WEB_PAGE_3\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\"",
            "title": "distinctCount (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M82/#maxforever-aggregate-function",
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.",
            "title": "maxForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M82/#stddev-aggregate-function",
            "text": "Returns the calculated standard deviation for all the events.  Syntax  <DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.",
            "title": "stdDev (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M82/#count-aggregate-function",
            "text": "Returns the count of all the events.  Syntax  <LONG> count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.",
            "title": "count (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M82/#min-aggregate-function",
            "text": "Returns the minimum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.",
            "title": "min (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M82/#sum-aggregate-function",
            "text": "Returns the sum for all the events.  Syntax  <LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.",
            "title": "sum (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M82/#minforever-aggregate-function",
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.",
            "title": "minForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M82/#pol2cart-stream-function",
            "text": "The pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "pol2Cart (Stream Function"
        },
        {
            "location": "/api/4.0.0-M83/",
            "text": "API Docs\n\u00b6\n\n\nSink\n\u00b6\n\n\ninMemory \n(\nSink\n)\n\u00b6\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\u00b6\n\n\npassThrough \n(\nSink Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\u00b6\n\n\npassThrough \n(\nSource Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\u00b6\n\n\ninMemory \n(\nSource\n)\n\u00b6\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\u00b6\n\n\nsort \n(\nWindow\n)\n\u00b6\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(<INT> window.length, <STRING> attribute, <STRING> order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(<INT|LONG|TIME> window.time, <INT> start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(\nWindow\n)\n\u00b6\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(<INT> event.count, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(<INT|LONG|TIME> window.time, <INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(\nWindow\n)\n\u00b6\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(<STRING> cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(\nFunction\n)\n\u00b6\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(\nFunction\n)\n\u00b6\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\n<STRING> UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(\nFunction\n)\n\u00b6\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(\nFunction\n)\n\u00b6\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(\nFunction\n)\n\u00b6\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(\nFunction\n)\n\u00b6\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(\nFunction\n)\n\u00b6\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(\nFunction\n)\n\u00b6\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\n<LONG> eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(\nFunction\n)\n\u00b6\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(\nFunction\n)\n\u00b6\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\n<LONG> currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(\nStream Processor\n)\n\u00b6\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(\nAggregate Function\n)\n\u00b6\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\n<LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\u00a0\"WEB_PAGE_3\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\n<LONG> count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\n<LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(\nStream Function\n)\n\u00b6\n\n\nThe pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "4.0.0-M83"
        },
        {
            "location": "/api/4.0.0-M83/#api-docs",
            "text": "",
            "title": "API Docs"
        },
        {
            "location": "/api/4.0.0-M83/#sink",
            "text": "",
            "title": "Sink"
        },
        {
            "location": "/api/4.0.0-M83/#inmemory-sink",
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.",
            "title": "inMemory (Sink"
        },
        {
            "location": "/api/4.0.0-M83/#sinkmapper",
            "text": "",
            "title": "Sinkmapper"
        },
        {
            "location": "/api/4.0.0-M83/#passthrough-sink-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.",
            "title": "passThrough (Sink Mapper"
        },
        {
            "location": "/api/4.0.0-M83/#sourcemapper",
            "text": "",
            "title": "Sourcemapper"
        },
        {
            "location": "/api/4.0.0-M83/#passthrough-source-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.",
            "title": "passThrough (Source Mapper"
        },
        {
            "location": "/api/4.0.0-M83/#source",
            "text": "",
            "title": "Source"
        },
        {
            "location": "/api/4.0.0-M83/#inmemory-source",
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.",
            "title": "inMemory (Source"
        },
        {
            "location": "/api/4.0.0-M83/#core",
            "text": "",
            "title": "Core"
        },
        {
            "location": "/api/4.0.0-M83/#sort-window",
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort(<INT> window.length, <STRING> attribute, <STRING> order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.",
            "title": "sort (Window"
        },
        {
            "location": "/api/4.0.0-M83/#lossyfrequent-window",
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.",
            "title": "lossyFrequent (Window"
        },
        {
            "location": "/api/4.0.0-M83/#timebatch-window",
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch(<INT|LONG|TIME> window.time, <INT> start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.",
            "title": "timeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M83/#length-window",
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.",
            "title": "length (Window"
        },
        {
            "location": "/api/4.0.0-M83/#time-window",
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.",
            "title": "time (Window"
        },
        {
            "location": "/api/4.0.0-M83/#frequent-window",
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent(<INT> event.count, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.",
            "title": "frequent (Window"
        },
        {
            "location": "/api/4.0.0-M83/#timelength-window",
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength(<INT|LONG|TIME> window.time, <INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.",
            "title": "timeLength (Window"
        },
        {
            "location": "/api/4.0.0-M83/#cron-window",
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron(<STRING> cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.",
            "title": "cron (Window"
        },
        {
            "location": "/api/4.0.0-M83/#externaltime-window",
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.",
            "title": "externalTime (Window"
        },
        {
            "location": "/api/4.0.0-M83/#lengthbatch-window",
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.",
            "title": "lengthBatch (Window"
        },
        {
            "location": "/api/4.0.0-M83/#externaltimebatch-window",
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.",
            "title": "externalTimeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M83/#ifthenelse-function",
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.",
            "title": "ifThenElse (Function"
        },
        {
            "location": "/api/4.0.0-M83/#uuid-function",
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  <STRING> UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;",
            "title": "UUID (Function"
        },
        {
            "location": "/api/4.0.0-M83/#minimum-function",
            "text": "Returns the minimum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.",
            "title": "minimum (Function"
        },
        {
            "location": "/api/4.0.0-M83/#cast-function",
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.",
            "title": "cast (Function"
        },
        {
            "location": "/api/4.0.0-M83/#instanceofdouble-function",
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  <BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.",
            "title": "instanceOfDouble (Function"
        },
        {
            "location": "/api/4.0.0-M83/#instanceoffloat-function",
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  <BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.",
            "title": "instanceOfFloat (Function"
        },
        {
            "location": "/api/4.0.0-M83/#convert-function",
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").",
            "title": "convert (Function"
        },
        {
            "location": "/api/4.0.0-M83/#instanceoflong-function",
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  <BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfLong (Function"
        },
        {
            "location": "/api/4.0.0-M83/#instanceofinteger-function",
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  <BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfInteger (Function"
        },
        {
            "location": "/api/4.0.0-M83/#default-function",
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.",
            "title": "default (Function"
        },
        {
            "location": "/api/4.0.0-M83/#maximum-function",
            "text": "Returns the maximum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.",
            "title": "maximum (Function"
        },
        {
            "location": "/api/4.0.0-M83/#eventtimestamp-function",
            "text": "Returns the timestamp of the processed event.  Syntax  <LONG> eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.",
            "title": "eventTimestamp (Function"
        },
        {
            "location": "/api/4.0.0-M83/#instanceofboolean-function",
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  <BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.",
            "title": "instanceOfBoolean (Function"
        },
        {
            "location": "/api/4.0.0-M83/#coalesce-function",
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.",
            "title": "coalesce (Function"
        },
        {
            "location": "/api/4.0.0-M83/#currenttimemillis-function",
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  <LONG> currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.",
            "title": "currentTimeMillis (Function"
        },
        {
            "location": "/api/4.0.0-M83/#instanceofstring-function",
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  <BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.",
            "title": "instanceOfString (Function"
        },
        {
            "location": "/api/4.0.0-M83/#log-stream-processor",
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;  This will log message and fooStream:events.",
            "title": "log (Stream Processor"
        },
        {
            "location": "/api/4.0.0-M83/#max-aggregate-function",
            "text": "Returns the maximum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.",
            "title": "max (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M83/#avg-aggregate-function",
            "text": "Calculates the average for all the events.  Syntax  <DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.",
            "title": "avg (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M83/#distinctcount-aggregate-function",
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  <LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\" \u00a0\"WEB_PAGE_3\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\"",
            "title": "distinctCount (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M83/#maxforever-aggregate-function",
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.",
            "title": "maxForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M83/#stddev-aggregate-function",
            "text": "Returns the calculated standard deviation for all the events.  Syntax  <DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.",
            "title": "stdDev (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M83/#count-aggregate-function",
            "text": "Returns the count of all the events.  Syntax  <LONG> count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.",
            "title": "count (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M83/#min-aggregate-function",
            "text": "Returns the minimum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.",
            "title": "min (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M83/#sum-aggregate-function",
            "text": "Returns the sum for all the events.  Syntax  <LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.",
            "title": "sum (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M83/#minforever-aggregate-function",
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.",
            "title": "minForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M83/#pol2cart-stream-function",
            "text": "The pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "pol2Cart (Stream Function"
        },
        {
            "location": "/api/4.0.0-M84/",
            "text": "API Docs\n\u00b6\n\n\nSink\n\u00b6\n\n\ninMemory \n(\nSink\n)\n\u00b6\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\u00b6\n\n\npassThrough \n(\nSink Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\u00b6\n\n\npassThrough \n(\nSource Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\u00b6\n\n\ninMemory \n(\nSource\n)\n\u00b6\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\u00b6\n\n\nsort \n(\nWindow\n)\n\u00b6\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(<INT> window.length, <STRING> attribute, <STRING> order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(<INT|LONG|TIME> window.time, <INT> start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(\nWindow\n)\n\u00b6\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(<INT> event.count, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(<INT|LONG|TIME> window.time, <INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(\nWindow\n)\n\u00b6\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(<STRING> cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(\nFunction\n)\n\u00b6\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(\nFunction\n)\n\u00b6\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\n<STRING> UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(\nFunction\n)\n\u00b6\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(\nFunction\n)\n\u00b6\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(\nFunction\n)\n\u00b6\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(\nFunction\n)\n\u00b6\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(\nFunction\n)\n\u00b6\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(\nFunction\n)\n\u00b6\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\n<LONG> eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(\nFunction\n)\n\u00b6\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(\nFunction\n)\n\u00b6\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\n<LONG> currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(\nStream Processor\n)\n\u00b6\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(\nAggregate Function\n)\n\u00b6\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\n<LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\u00a0\"WEB_PAGE_3\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\n<LONG> count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\n<LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(\nStream Function\n)\n\u00b6\n\n\nThe pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "4.0.0-M84"
        },
        {
            "location": "/api/4.0.0-M84/#api-docs",
            "text": "",
            "title": "API Docs"
        },
        {
            "location": "/api/4.0.0-M84/#sink",
            "text": "",
            "title": "Sink"
        },
        {
            "location": "/api/4.0.0-M84/#inmemory-sink",
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.",
            "title": "inMemory (Sink"
        },
        {
            "location": "/api/4.0.0-M84/#sinkmapper",
            "text": "",
            "title": "Sinkmapper"
        },
        {
            "location": "/api/4.0.0-M84/#passthrough-sink-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.",
            "title": "passThrough (Sink Mapper"
        },
        {
            "location": "/api/4.0.0-M84/#sourcemapper",
            "text": "",
            "title": "Sourcemapper"
        },
        {
            "location": "/api/4.0.0-M84/#passthrough-source-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.",
            "title": "passThrough (Source Mapper"
        },
        {
            "location": "/api/4.0.0-M84/#source",
            "text": "",
            "title": "Source"
        },
        {
            "location": "/api/4.0.0-M84/#inmemory-source",
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.",
            "title": "inMemory (Source"
        },
        {
            "location": "/api/4.0.0-M84/#core",
            "text": "",
            "title": "Core"
        },
        {
            "location": "/api/4.0.0-M84/#sort-window",
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort(<INT> window.length, <STRING> attribute, <STRING> order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.",
            "title": "sort (Window"
        },
        {
            "location": "/api/4.0.0-M84/#lossyfrequent-window",
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.",
            "title": "lossyFrequent (Window"
        },
        {
            "location": "/api/4.0.0-M84/#timebatch-window",
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch(<INT|LONG|TIME> window.time, <INT> start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.",
            "title": "timeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M84/#length-window",
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.",
            "title": "length (Window"
        },
        {
            "location": "/api/4.0.0-M84/#time-window",
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.",
            "title": "time (Window"
        },
        {
            "location": "/api/4.0.0-M84/#frequent-window",
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent(<INT> event.count, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.",
            "title": "frequent (Window"
        },
        {
            "location": "/api/4.0.0-M84/#timelength-window",
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength(<INT|LONG|TIME> window.time, <INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.",
            "title": "timeLength (Window"
        },
        {
            "location": "/api/4.0.0-M84/#cron-window",
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron(<STRING> cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.",
            "title": "cron (Window"
        },
        {
            "location": "/api/4.0.0-M84/#externaltime-window",
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.",
            "title": "externalTime (Window"
        },
        {
            "location": "/api/4.0.0-M84/#lengthbatch-window",
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.",
            "title": "lengthBatch (Window"
        },
        {
            "location": "/api/4.0.0-M84/#externaltimebatch-window",
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.",
            "title": "externalTimeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M84/#ifthenelse-function",
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.",
            "title": "ifThenElse (Function"
        },
        {
            "location": "/api/4.0.0-M84/#uuid-function",
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  <STRING> UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;",
            "title": "UUID (Function"
        },
        {
            "location": "/api/4.0.0-M84/#minimum-function",
            "text": "Returns the minimum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.",
            "title": "minimum (Function"
        },
        {
            "location": "/api/4.0.0-M84/#cast-function",
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.",
            "title": "cast (Function"
        },
        {
            "location": "/api/4.0.0-M84/#instanceofdouble-function",
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  <BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.",
            "title": "instanceOfDouble (Function"
        },
        {
            "location": "/api/4.0.0-M84/#instanceoffloat-function",
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  <BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.",
            "title": "instanceOfFloat (Function"
        },
        {
            "location": "/api/4.0.0-M84/#convert-function",
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").",
            "title": "convert (Function"
        },
        {
            "location": "/api/4.0.0-M84/#instanceoflong-function",
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  <BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfLong (Function"
        },
        {
            "location": "/api/4.0.0-M84/#instanceofinteger-function",
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  <BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfInteger (Function"
        },
        {
            "location": "/api/4.0.0-M84/#default-function",
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.",
            "title": "default (Function"
        },
        {
            "location": "/api/4.0.0-M84/#maximum-function",
            "text": "Returns the maximum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.",
            "title": "maximum (Function"
        },
        {
            "location": "/api/4.0.0-M84/#eventtimestamp-function",
            "text": "Returns the timestamp of the processed event.  Syntax  <LONG> eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.",
            "title": "eventTimestamp (Function"
        },
        {
            "location": "/api/4.0.0-M84/#instanceofboolean-function",
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  <BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.",
            "title": "instanceOfBoolean (Function"
        },
        {
            "location": "/api/4.0.0-M84/#coalesce-function",
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.",
            "title": "coalesce (Function"
        },
        {
            "location": "/api/4.0.0-M84/#currenttimemillis-function",
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  <LONG> currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.",
            "title": "currentTimeMillis (Function"
        },
        {
            "location": "/api/4.0.0-M84/#instanceofstring-function",
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  <BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.",
            "title": "instanceOfString (Function"
        },
        {
            "location": "/api/4.0.0-M84/#log-stream-processor",
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;  This will log message and fooStream:events.",
            "title": "log (Stream Processor"
        },
        {
            "location": "/api/4.0.0-M84/#max-aggregate-function",
            "text": "Returns the maximum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.",
            "title": "max (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M84/#avg-aggregate-function",
            "text": "Calculates the average for all the events.  Syntax  <DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.",
            "title": "avg (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M84/#distinctcount-aggregate-function",
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  <LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\" \u00a0\"WEB_PAGE_3\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\"",
            "title": "distinctCount (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M84/#maxforever-aggregate-function",
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.",
            "title": "maxForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M84/#stddev-aggregate-function",
            "text": "Returns the calculated standard deviation for all the events.  Syntax  <DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.",
            "title": "stdDev (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M84/#count-aggregate-function",
            "text": "Returns the count of all the events.  Syntax  <LONG> count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.",
            "title": "count (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M84/#min-aggregate-function",
            "text": "Returns the minimum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.",
            "title": "min (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M84/#sum-aggregate-function",
            "text": "Returns the sum for all the events.  Syntax  <LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.",
            "title": "sum (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M84/#minforever-aggregate-function",
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.",
            "title": "minForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M84/#pol2cart-stream-function",
            "text": "The pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "pol2Cart (Stream Function"
        },
        {
            "location": "/api/4.0.0-M85/",
            "text": "API Docs\n\u00b6\n\n\nCore\n\u00b6\n\n\nlength \n(\nWindow\n)\n\u00b6\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ncron \n(\nWindow\n)\n\u00b6\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(<STRING> cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\ntimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(<INT|LONG|TIME> window.time, <INT> start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\ntimeLength \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(<INT|LONG|TIME> window.time, <INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ntime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nlossyFrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\nsort \n(\nWindow\n)\n\u00b6\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(<INT> window.length, <STRING> attribute, <STRING> order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nexternalTime \n(\nWindow\n)\n\u00b6\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(<INT|LONG|TIME> window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nfrequent \n(\nWindow\n)\n\u00b6\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(<INT> event.count, <STRING> attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\nlengthBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(<INT> window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(\nWindow\n)\n\u00b6\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\ninstanceOfInteger \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfFloat \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\neventTimestamp \n(\nFunction\n)\n\u00b6\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\n<LONG> eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\nifThenElse \n(\nFunction\n)\n\u00b6\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nminimum \n(\nFunction\n)\n\u00b6\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(\nFunction\n)\n\u00b6\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ncurrentTimeMillis \n(\nFunction\n)\n\u00b6\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\n<LONG> currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\nconvert \n(\nFunction\n)\n\u00b6\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\nmaximum \n(\nFunction\n)\n\u00b6\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\ninstanceOfDouble \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfString \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\ndefault \n(\nFunction\n)\n\u00b6\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\ninstanceOfLong \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\nUUID \n(\nFunction\n)\n\u00b6\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\n<STRING> UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\ninstanceOfBoolean \n(\nFunction\n)\n\u00b6\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\n<BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(\nFunction\n)\n\u00b6\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\nlog \n(\nStream Processor\n)\n\u00b6\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nminForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\nmax \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nmaxForever \n(\nAggregate Function\n)\n\u00b6\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\ndistinctCount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\n<LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\u00a0\"WEB_PAGE_3\"\n\u00a0\"WEB_PAGE_1\"\n\u00a0\"WEB_PAGE_2\"\n\n\n\nstdDev \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\nmin \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\n<INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(\nAggregate Function\n)\n\u00b6\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\n<DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\nsum \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\n<LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\ncount \n(\nAggregate Function\n)\n\u00b6\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\n<LONG> count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\npol2Cart \n(\nStream Function\n)\n\u00b6\n\n\nThe pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.\n\n\n\nSinkmapper\n\u00b6\n\n\npassThrough \n(\nSink Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSink\n\u00b6\n\n\ninMemory \n(\nSink\n)\n\u00b6\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSource\n\u00b6\n\n\ninMemory \n(\nSource\n)\n\u00b6\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nSourcemapper\n\u00b6\n\n\npassThrough \n(\nSource Mapper\n)\n\u00b6\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\"passThrough\")\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.",
            "title": "4.0.0-M85"
        },
        {
            "location": "/api/4.0.0-M85/#api-docs",
            "text": "",
            "title": "API Docs"
        },
        {
            "location": "/api/4.0.0-M85/#core",
            "text": "",
            "title": "Core"
        },
        {
            "location": "/api/4.0.0-M85/#length-window",
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.",
            "title": "length (Window"
        },
        {
            "location": "/api/4.0.0-M85/#cron-window",
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron(<STRING> cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.",
            "title": "cron (Window"
        },
        {
            "location": "/api/4.0.0-M85/#timebatch-window",
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch(<INT|LONG|TIME> window.time, <INT> start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.",
            "title": "timeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M85/#timelength-window",
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength(<INT|LONG|TIME> window.time, <INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.",
            "title": "timeLength (Window"
        },
        {
            "location": "/api/4.0.0-M85/#time-window",
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.",
            "title": "time (Window"
        },
        {
            "location": "/api/4.0.0-M85/#lossyfrequent-window",
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent(<DOUBLE> support.threshold, <DOUBLE> error.bound, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price >= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.",
            "title": "lossyFrequent (Window"
        },
        {
            "location": "/api/4.0.0-M85/#sort-window",
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort(<INT> window.length, <STRING> attribute, <STRING> order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.",
            "title": "sort (Window"
        },
        {
            "location": "/api/4.0.0-M85/#externaltime-window",
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime(<INT|LONG|TIME> window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.",
            "title": "externalTime (Window"
        },
        {
            "location": "/api/4.0.0-M85/#frequent-window",
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent(<INT> event.count, <STRING> attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price >= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.",
            "title": "frequent (Window"
        },
        {
            "location": "/api/4.0.0-M85/#lengthbatch-window",
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch(<INT> window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.",
            "title": "lengthBatch (Window"
        },
        {
            "location": "/api/4.0.0-M85/#externaltimebatch-window",
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch(<LONG> timestamp, <INT|LONG|TIME> window.time, <INT|LONG|TIME> start.time, <INT|LONG|TIME> timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.",
            "title": "externalTimeBatch (Window"
        },
        {
            "location": "/api/4.0.0-M85/#instanceofinteger-function",
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  <BOOL> instanceOfInteger(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfInteger (Function"
        },
        {
            "location": "/api/4.0.0-M85/#instanceoffloat-function",
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  <BOOL> instanceOfFloat(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.",
            "title": "instanceOfFloat (Function"
        },
        {
            "location": "/api/4.0.0-M85/#eventtimestamp-function",
            "text": "Returns the timestamp of the processed event.  Syntax  <LONG> eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.",
            "title": "eventTimestamp (Function"
        },
        {
            "location": "/api/4.0.0-M85/#ifthenelse-function",
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> ifThenElse(<BOOL> condition, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> if.expression, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue>35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage < 5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.",
            "title": "ifThenElse (Function"
        },
        {
            "location": "/api/4.0.0-M85/#minimum-function",
            "text": "Returns the minimum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> minimum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.",
            "title": "minimum (Function"
        },
        {
            "location": "/api/4.0.0-M85/#cast-function",
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> cast(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> to.be.caster, <STRING> cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.",
            "title": "cast (Function"
        },
        {
            "location": "/api/4.0.0-M85/#currenttimemillis-function",
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  <LONG> currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.",
            "title": "currentTimeMillis (Function"
        },
        {
            "location": "/api/4.0.0-M85/#convert-function",
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL> convert(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL> to.be.converted, <STRING> converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").",
            "title": "convert (Function"
        },
        {
            "location": "/api/4.0.0-M85/#maximum-function",
            "text": "Returns the maximum value of the input parameters.  Syntax  <INT|LONG|DOUBLE|FLOAT> maximum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.",
            "title": "maximum (Function"
        },
        {
            "location": "/api/4.0.0-M85/#instanceofdouble-function",
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  <BOOL> instanceOfDouble(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.",
            "title": "instanceOfDouble (Function"
        },
        {
            "location": "/api/4.0.0-M85/#instanceofstring-function",
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  <BOOL> instanceOfString(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.",
            "title": "instanceOfString (Function"
        },
        {
            "location": "/api/4.0.0-M85/#default-function",
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> attribute, <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.",
            "title": "default (Function"
        },
        {
            "location": "/api/4.0.0-M85/#instanceoflong-function",
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  <BOOL> instanceOfLong(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.",
            "title": "instanceOfLong (Function"
        },
        {
            "location": "/api/4.0.0-M85/#uuid-function",
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  <STRING> UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;",
            "title": "UUID (Function"
        },
        {
            "location": "/api/4.0.0-M85/#instanceofboolean-function",
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  <BOOL> instanceOfBoolean(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.",
            "title": "instanceOfBoolean (Function"
        },
        {
            "location": "/api/4.0.0-M85/#coalesce-function",
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  <INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> coalesce(<INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT> args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.",
            "title": "coalesce (Function"
        },
        {
            "location": "/api/4.0.0-M85/#log-stream-processor",
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log(<STRING> priority, <STRING> log.message, <BOOL> is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log(\"INFO\", \"Sample Event :\", true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log(\"Sample Event :\", true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log(\"Sample Event :\", fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log(\"Sample Event :\")\nselect *\ninsert into barStream;  This will log message and fooStream:events.",
            "title": "log (Stream Processor"
        },
        {
            "location": "/api/4.0.0-M85/#minforever-aggregate-function",
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> minForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.",
            "title": "minForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M85/#max-aggregate-function",
            "text": "Returns the maximum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> max(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.",
            "title": "max (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M85/#maxforever-aggregate-function",
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  <INT|LONG|DOUBLE|FLOAT> maxForever(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.",
            "title": "maxForever (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M85/#distinctcount-aggregate-function",
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  <LONG> distinctCount(<INT|LONG|DOUBLE|FLOAT|STRING> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\" \u00a0\"WEB_PAGE_3\" \u00a0\"WEB_PAGE_1\" \u00a0\"WEB_PAGE_2\"",
            "title": "distinctCount (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M85/#stddev-aggregate-function",
            "text": "Returns the calculated standard deviation for all the events.  Syntax  <DOUBLE> stdDev(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.",
            "title": "stdDev (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M85/#min-aggregate-function",
            "text": "Returns the minimum value for all the events.  Syntax  <INT|LONG|DOUBLE|FLOAT> min(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.",
            "title": "min (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M85/#avg-aggregate-function",
            "text": "Calculates the average for all the events.  Syntax  <DOUBLE> avg(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.",
            "title": "avg (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M85/#sum-aggregate-function",
            "text": "Returns the sum for all the events.  Syntax  <LONG|DOUBLE> sum(<INT|LONG|DOUBLE|FLOAT> arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.",
            "title": "sum (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M85/#count-aggregate-function",
            "text": "Returns the count of all the events.  Syntax  <LONG> count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.",
            "title": "count (Aggregate Function"
        },
        {
            "location": "/api/4.0.0-M85/#pol2cart-stream-function",
            "text": "The pol2Cart function calculating the cartesian coordinates x & y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart(<DOUBLE> theta, <DOUBLE> rho, <DOUBLE> z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.",
            "title": "pol2Cart (Stream Function"
        },
        {
            "location": "/api/4.0.0-M85/#sinkmapper",
            "text": "",
            "title": "Sinkmapper"
        },
        {
            "location": "/api/4.0.0-M85/#passthrough-sink-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.",
            "title": "passThrough (Sink Mapper"
        },
        {
            "location": "/api/4.0.0-M85/#sink",
            "text": "",
            "title": "Sink"
        },
        {
            "location": "/api/4.0.0-M85/#inmemory-sink",
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.",
            "title": "inMemory (Sink"
        },
        {
            "location": "/api/4.0.0-M85/#source",
            "text": "",
            "title": "Source"
        },
        {
            "location": "/api/4.0.0-M85/#inmemory-source",
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type=\"inMemory\", topic=\"<STRING>\", @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.",
            "title": "inMemory (Source"
        },
        {
            "location": "/api/4.0.0-M85/#sourcemapper",
            "text": "",
            "title": "Sourcemapper"
        },
        {
            "location": "/api/4.0.0-M85/#passthrough-source-mapper",
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type=\"passThrough\")  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.",
            "title": "passThrough (Source Mapper"
        },
        {
            "location": "/license/",
            "text": "Copyright (c) 2017 WSO2 Inc. (\nhttp://www.wso2.org\n) All Rights Reserved.\n\n\nWSO2 Inc. licenses this file to you under the Apache License,\nVersion 2.0 (the \"License\"); you may not use this file except\nin compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\n\n-------------------------------------------------------------------------\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS",
            "title": "License"
        }
    ]
}